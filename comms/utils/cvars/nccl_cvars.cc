// Copyright (c) Meta Platforms, Inc. and affiliates.
// @generated SignedSource<<9faa9aa79e5e364340862b443258445f2a79d5fb>>
// Automatically generated by ./comms/utils/cvars/extractcvars.py --- START
// DO NOT EDIT!!!

#include "comms/utils/cvars/nccl_cvars.h"

#include <pwd.h>

#include <algorithm>
#include <cstring>
#include <fstream>
#include <iostream>
#include <limits>
#include <sstream>
#include <string>
#include <unordered_set>
#include <vector>

#include <cuda_runtime.h>

#include <folly/String.h>
#include <folly/logging/xlog.h>

#if defined(__HIP_PLATFORM_AMD__)
static const std::string ncclConfigFileName = "rccl.conf";
#else
static const std::string ncclConfigFileName = "nccl.conf";
#endif

static int cudaDev = -1;
static bool logInfoLog = false;
namespace ncclx {
static std::unordered_map<std::string, std::string>& nccl_config() {
  static std::unordered_map<std::string, std::string> config;
  return config;
};

static void initEnvSet(std::unordered_set<std::string>& env);
static void readCvarEnv();

#define CVAR_INFO(fmt, ...)                 \
  XLOGF_IF(                                 \
      INFO,                                 \
      logInfoLog,                           \
      "[CudaDev: {}] NCCL INFO CVAR: " fmt, \
      cudaDev,                              \
      __VA_ARGS__);

#define CVAR_WARN(fmt, ...) \
  XLOGF(WARN, "[CudaDev: {}] NCCL WARN CVAR: " fmt, cudaDev, __VA_ARGS__);

#define CVAR_ERROR(fmt, ...) \
  XLOGF(FATAL, "[CudaDev: {}] NCCL ERROR CVAR: " fmt, cudaDev, __VA_ARGS__);

#define CVAR_WARN_UNKNOWN_VALUE(name, value)               \
  do {                                                     \
    CVAR_WARN("Unknown value {} for env {}", value, name); \
  } while (0)

static bool env2bool(
    const char* str,
    const char* def); // Declear env2bool so we can use it in initCvarLogger

static void initCvarLogger() {
  // Used for ncclCvarInit time warning only
  auto err = cudaGetDevice(&cudaDev);
  if (err != cudaSuccess) {
    CVAR_WARN(
        "Error getting cuda device. Error: {}, ErrorStr: {}",
        static_cast<int>(err),
        cudaGetErrorString(err));
  }
  logInfoLog = env2bool("NCCL_CVARS_LOG_INFO", "false");
}

static std::vector<std::string> tokenizer(std::string str) {
  // Split input string by comma
  std::vector<std::string> tokens;
  folly::split(",", str, tokens, true /* ignore empty */);

  // Trim white space & check for duplicates
  std::unordered_set<std::string> uniqueTokens;
  for (auto& token : tokens) {
    token = folly::trimWhitespace(token);
    if (not uniqueTokens.insert(token).second) {
      CVAR_WARN("Duplicate token {} found", token);
    }
  }

  return tokens;
}

static std::unordered_map<std::string, std::vector<std::string>>
parseConfigTokens(const std::string& inputString) {
  // Split input string by semicolon
  std::unordered_map<std::string, std::vector<std::string>> configMap;
  std::vector<std::string> tokenList;
  folly::split(';', inputString, tokenList, true /* ignore empty */);

  // Trim white space & check for duplicates
  std::unordered_set<std::string> uniqueTokens;
  for (auto& token : tokenList) {
    token = folly::trimWhitespace(token);
    std::vector<std::string> keyValuePairs;
    folly::split(":", token, keyValuePairs, true /* ignore empty */);
    if (keyValuePairs.size() != 2) {
      CVAR_WARN("Invalid token {} found", token);
    }
    configMap[keyValuePairs.at(0)] = tokenizer(keyValuePairs.at(1));
  }

  return configMap;
}

static std::string readenv(const char* str, const char* def) {
  std::string s;
  if (getenv(str)) {
    s = std::string(getenv(str));
  } else if (ncclx::nccl_config().contains(str)) {
    s = ncclx::nccl_config()[str];
  } else if (def) {
    s = std::string(def);
  } else {
    s = std::string("");
  }

  return s;
}

static bool env2bool(const char* str, const char* def) {
  std::string s = readenv(str, def);
  std::transform(s.cbegin(), s.cend(), s.begin(), [](unsigned char c) {
    return std::tolower(c);
  });
  if (s == "y")
    return true;
  else if (s == "n")
    return false;
  else if (s == "yes")
    return true;
  else if (s == "no")
    return false;
  else if (s == "t")
    return true;
  else if (s == "f")
    return false;
  else if (s == "true")
    return true;
  else if (s == "false")
    return false;
  else if (s == "1")
    return true;
  else if (s == "0")
    return false;
  else
    CVAR_WARN_UNKNOWN_VALUE(str, s.c_str());
  return true;
}

template <typename T>
static T env2num(const char* str, const char* def) {
  std::string s = readenv(str, def);

  if (std::find_if(s.begin(), s.end(), ::isdigit) != s.end()) {
    /* if the string contains a digit, try converting it normally */
    std::stringstream sstream(s);
    T ret;
    sstream >> ret;
    return ret;
  } else {
    /* if there are no digits, see if its a special string such as
     * "MAX" or "MIN". */
    std::transform(s.begin(), s.end(), s.begin(), ::toupper);
    if (s == "MAX") {
      return std::numeric_limits<T>::max();
    } else if (s == "MIN") {
      return std::numeric_limits<T>::min();
    } else {
      CVAR_WARN("Unrecognized numeral {}", s);
      return 0;
    }
  }
}

static std::string env2str(const char* str, const char* def) {
  return std::string(folly::trimWhitespace(readenv(str, def)));
}

static std::vector<std::string> env2strlist(const char* str, const char* def) {
  return tokenizer(std::string(folly::trimWhitespace(readenv(str, def))));
}

static std::unordered_map<std::string, std::vector<std::string>> env2dictlist(
    const char* str,
    const char* def) {
  return parseConfigTokens(
      std::string(folly::trimWhitespace(readenv(str, def))));
}

static std::tuple<std::string, std::vector<std::string>> env2prefixedStrlist(
    const char* str,
    const char* def,
    const std::vector<std::string>& prefixes) {
  std::string s = readenv(str, def);

  // search if any prefix is specified
  for (auto prefix : prefixes) {
    if (!s.compare(0, prefix.size(), prefix)) {
      // if prefix is found, convert the remaining string to stringList
      std::string slist_s = s.substr(prefix.size());
      return std::make_tuple(prefix, tokenizer(slist_s));
    }
  }
  // if no prefix is found, convert entire string to stringList
  return std::make_tuple("", tokenizer(s));
}

static void updateNcclConfig(const std::string& fname) {
  std::ifstream in(fname);
  if (!in) {
    CVAR_INFO("NCCL config file {} doesn't exists, skipping", fname);
    return;
  }

  std::string line;
  while (std::getline(in, line)) {
    // Trim the string starting with first `#`
    auto n = line.find('#');
    if (n != std::string::npos) {
      line.erase(n);
    }

    line = folly::trimWhitespace(line);
    if (line.empty()) {
      continue;
    }

    std::vector<std::string> tokens(2);
    folly::split<false>('=', line, tokens[0], tokens[1]);
    if (tokens[0].empty()) {
      CVAR_WARN("Ignoring invalid config option: {}", line);
      continue;
    }

    CVAR_INFO(
        "NCCL Config - Overriding CVAR {}={} from {}",
        tokens.at(0).c_str(),
        tokens.at(1).c_str(),
        fname.c_str());

    ncclx::nccl_config().emplace(tokens.at(0), tokens.at(1));
  }
}
}; // namespace ncclx

extern char** environ;
void ncclCvarInit() {
  std::unordered_set<std::string> env;
  ncclx::initEnvSet(env);

  ncclx::initCvarLogger();

  // Check if any NCCL_ env var is not in allow list
  char** s = environ;
  for (; *s; s++) {
    if (!strncmp(*s, "NCCL_", strlen("NCCL_"))) {
      std::string str(*s);
      str = str.substr(0, str.find('='));
      if (env.find(str) == env.end()) {
        CVAR_WARN("Unknown env {} in the NCCL namespace", str);
      }
    }
  }

  CVAR_INFO("NCCL Config - ncclConfigFileName={}", ncclConfigFileName);
  ncclx::updateNcclConfig("/etc/" + ncclConfigFileName);
  struct passwd* pwUser = getpwuid(getuid());
  if (pwUser) {
    std::string fname = std::string(pwUser->pw_dir) + "/." + ncclConfigFileName;
    ncclx::updateNcclConfig(fname);
  }

  char* settings = getenv("NCCL_CVARS_SETTINGS");
  if (settings) {
    throw std::runtime_error(
        "NCCL Config - NCCL_CVARS_SETTINGS is deprecated, please migrate");
  }

  ncclx::readCvarEnv();
}

bool CUDA_LAUNCH_BLOCKING;
bool CUDA_LAUNCH_BLOCKING_DEFAULT;
std::string NCCL_ALGO;
std::string NCCL_ALGO_DEFAULT;
enum NCCL_ALLGATHER_ALGO NCCL_ALLGATHER_ALGO;
enum NCCL_ALLGATHER_ALGO NCCL_ALLGATHER_ALGO_DEFAULT;
enum NCCL_ALLGATHER_P_ALGO NCCL_ALLGATHER_P_ALGO;
enum NCCL_ALLGATHER_P_ALGO NCCL_ALLGATHER_P_ALGO_DEFAULT;
int64_t NCCL_ALLOC_P2P_NET_LL_BUFFERS;
int64_t NCCL_ALLOC_P2P_NET_LL_BUFFERS_DEFAULT;
enum NCCL_ALLREDUCE_ALGO NCCL_ALLREDUCE_ALGO;
enum NCCL_ALLREDUCE_ALGO NCCL_ALLREDUCE_ALGO_DEFAULT;
enum NCCL_ALLREDUCE_TYPE NCCL_ALLREDUCE_TYPE;
enum NCCL_ALLREDUCE_TYPE NCCL_ALLREDUCE_TYPE_DEFAULT;
enum NCCL_ALLTOALLV_ALGO NCCL_ALLTOALLV_ALGO;
enum NCCL_ALLTOALLV_ALGO NCCL_ALLTOALLV_ALGO_DEFAULT;
enum NCCL_ALLTOALL_ALGO NCCL_ALLTOALL_ALGO;
enum NCCL_ALLTOALL_ALGO NCCL_ALLTOALL_ALGO_DEFAULT;
int NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS;
int NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE;
int NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_DEFAULT;
enum NCCL_BROADCAST_ALGO NCCL_BROADCAST_ALGO;
enum NCCL_BROADCAST_ALGO NCCL_BROADCAST_ALGO_DEFAULT;
int64_t NCCL_BUFFSIZE;
int64_t NCCL_BUFFSIZE_DEFAULT;
int NCCL_CGA_CLUSTER_SIZE;
int NCCL_CGA_CLUSTER_SIZE_DEFAULT;
enum NCCL_CHANNEL_METADATA_LOCATION NCCL_CHANNEL_METADATA_LOCATION;
enum NCCL_CHANNEL_METADATA_LOCATION NCCL_CHANNEL_METADATA_LOCATION_DEFAULT;
int64_t NCCL_CHECK_POINTERS;
int64_t NCCL_CHECK_POINTERS_DEFAULT;
int64_t NCCL_CHUNK_SIZE;
int64_t NCCL_CHUNK_SIZE_DEFAULT;
std::string NCCL_CLIENT_SOCKET_IFNAME;
std::string NCCL_CLIENT_SOCKET_IFNAME_DEFAULT;
int NCCL_COLLNET_ENABLE;
int NCCL_COLLNET_ENABLE_DEFAULT;
int64_t NCCL_COLLNET_NODE_THRESHOLD;
int64_t NCCL_COLLNET_NODE_THRESHOLD_DEFAULT;
int NCCL_COLLSTAT_REPORT_INTERVAL;
int NCCL_COLLSTAT_REPORT_INTERVAL_DEFAULT;
std::vector<std::string> NCCL_COLLTRACE;
std::vector<std::string> NCCL_COLLTRACE_DEFAULT;
int64_t NCCL_COLLTRACE_CHECK_INTERVAL_MS;
int64_t NCCL_COLLTRACE_CHECK_INTERVAL_MS_DEFAULT;
bool NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD;
bool NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD_DEFAULT;
bool NCCL_COLLTRACE_EVENT_BLOCKING_SYNC;
bool NCCL_COLLTRACE_EVENT_BLOCKING_SYNC_DEFAULT;
int NCCL_COLLTRACE_PENDING_QUEUE_SIZE;
int NCCL_COLLTRACE_PENDING_QUEUE_SIZE_DEFAULT;
int NCCL_COLLTRACE_RECORD_MAX;
int NCCL_COLLTRACE_RECORD_MAX_DEFAULT;
int NCCL_COLLTRACE_RECORD_MAX_ITERATIONS;
int NCCL_COLLTRACE_RECORD_MAX_ITERATIONS_DEFAULT;
int64_t NCCL_COLLTRACE_REPORT_FIRST_N_COLL;
int64_t NCCL_COLLTRACE_REPORT_FIRST_N_COLL_DEFAULT;
int NCCL_COLLTRACE_REPORT_INTERVAL_SEC;
int NCCL_COLLTRACE_REPORT_INTERVAL_SEC_DEFAULT;
std::vector<std::string> NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG;
std::vector<std::string> NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG_DEFAULT;
bool NCCL_COLLTRACE_TRACE_CUDA_GRAPH;
bool NCCL_COLLTRACE_TRACE_CUDA_GRAPH_DEFAULT;
bool NCCL_COLLTRACE_USE_NEW_COLLTRACE;
bool NCCL_COLLTRACE_USE_NEW_COLLTRACE_DEFAULT;
int64_t NCCL_COLLTRACE_WAKEUP_INTERVAL_MS;
int64_t NCCL_COLLTRACE_WAKEUP_INTERVAL_MS_DEFAULT;
int64_t NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC;
int64_t NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC_DEFAULT;
std::string NCCL_COLL_EVENT_LOGGING;
std::string NCCL_COLL_EVENT_LOGGING_DEFAULT;
std::string NCCL_COLL_STATS_LOGGING;
std::string NCCL_COLL_STATS_LOGGING_DEFAULT;
bool NCCL_COMMSMONITOR_ENABLE;
bool NCCL_COMMSMONITOR_ENABLE_DEFAULT;
std::vector<std::string> NCCL_COMMS_TRACING_SERVICE_PORTS;
std::vector<std::string> NCCL_COMMS_TRACING_SERVICE_PORTS_DEFAULT;
enum NCCL_COMM_ABORT_SCOPE NCCL_COMM_ABORT_SCOPE;
enum NCCL_COMM_ABORT_SCOPE NCCL_COMM_ABORT_SCOPE_DEFAULT;
int64_t NCCL_COMM_BLOCKING;
int64_t NCCL_COMM_BLOCKING_DEFAULT;
bool NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS;
bool NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS_DEFAULT;
std::string NCCL_COMM_EVENT_LOGGING;
std::string NCCL_COMM_EVENT_LOGGING_DEFAULT;
std::string NCCL_COMM_ID;
std::string NCCL_COMM_ID_DEFAULT;
bool NCCL_COMM_REGISTER_LOG_ENABLE;
bool NCCL_COMM_REGISTER_LOG_ENABLE_DEFAULT;
int NCCL_COMM_SHRINK_SHARE_RESOURCES;
int NCCL_COMM_SHRINK_SHARE_RESOURCES_DEFAULT;
int NCCL_COMM_SPLIT_SHARE_RESOURCES;
int NCCL_COMM_SPLIT_SHARE_RESOURCES_DEFAULT;
enum NCCL_COMM_STATE_DEBUG_TOPO NCCL_COMM_STATE_DEBUG_TOPO;
enum NCCL_COMM_STATE_DEBUG_TOPO NCCL_COMM_STATE_DEBUG_TOPO_DEFAULT;
int NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS;
int NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS_DEFAULT;
bool NCCL_COMM_TRACING_SERVICE_ENABLE;
bool NCCL_COMM_TRACING_SERVICE_ENABLE_DEFAULT;
bool NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT;
bool NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT_DEFAULT;
int64_t NCCL_CONNECT_ROUND_MAX_PEERS;
int64_t NCCL_CONNECT_ROUND_MAX_PEERS_DEFAULT;
int64_t NCCL_CREATE_THREAD_CONTEXT;
int64_t NCCL_CREATE_THREAD_CONTEXT_DEFAULT;
int64_t NCCL_CROSS_NIC;
int64_t NCCL_CROSS_NIC_DEFAULT;
bool NCCL_CTRAN_ABORT_ON_ERROR;
bool NCCL_CTRAN_ABORT_ON_ERROR_DEFAULT;
bool NCCL_CTRAN_AG_RD_RTR;
bool NCCL_CTRAN_AG_RD_RTR_DEFAULT;
uint64_t NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE;
uint64_t NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE_DEFAULT;
int NCCL_CTRAN_AG_RING_NUM_SPLIT;
int NCCL_CTRAN_AG_RING_NUM_SPLIT_DEFAULT;
bool NCCL_CTRAN_ALGO_PROFILING_ENABLE;
bool NCCL_CTRAN_ALGO_PROFILING_ENABLE_DEFAULT;
std::string NCCL_CTRAN_ALGO_PROFILING_LOGGING;
std::string NCCL_CTRAN_ALGO_PROFILING_LOGGING_DEFAULT;
std::string NCCL_CTRAN_ALGO_PROFILING_OUTPUT;
std::string NCCL_CTRAN_ALGO_PROFILING_OUTPUT_DEFAULT;
std::string NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE;
std::string NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE_DEFAULT;
int NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT;
int NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT_DEFAULT;
int NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE;
int NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE_DEFAULT;
uint64_t NCCL_CTRAN_ALLGATHER_MIN_SIZE;
uint64_t NCCL_CTRAN_ALLGATHER_MIN_SIZE_DEFAULT;
bool NCCL_CTRAN_ALLOW_CUDA_GRAPH;
bool NCCL_CTRAN_ALLOW_CUDA_GRAPH_DEFAULT;
int NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE_DEFAULT;
int NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE_DEFAULT;
int NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS_DEFAULT;
uint32_t NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE;
uint32_t NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE_DEFAULT;
int NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE_DEFAULT;
uint64_t NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE;
uint64_t NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE_DEFAULT;
uint32_t NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS;
uint32_t NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE;
int NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP;
int NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS;
int NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS;
int NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS;
int NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP;
int NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS;
int NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP;
int NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS;
int NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE_DEFAULT;
bool NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE;
bool NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE_DEFAULT;
int NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P;
int NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P_DEFAULT;
int NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE_DEFAULT;
int NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE_DEFAULT;
uint64_t NCCL_CTRAN_ALLTOALL_THRESHOLD;
uint64_t NCCL_CTRAN_ALLTOALL_THRESHOLD_DEFAULT;
std::vector<enum NCCL_CTRAN_BACKENDS> NCCL_CTRAN_BACKENDS;
std::vector<enum NCCL_CTRAN_BACKENDS> NCCL_CTRAN_BACKENDS_DEFAULT;
uint64_t NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE;
uint64_t NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE_DEFAULT;
int NCCL_CTRAN_CGA_CLUSTER_SIZE;
int NCCL_CTRAN_CGA_CLUSTER_SIZE_DEFAULT;
int NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK;
int NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK_DEFAULT;
int NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS_DEFAULT;
uint64_t NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE;
uint64_t NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE_DEFAULT;
bool NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING;
bool NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING_DEFAULT;
int NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT;
int NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT_DEFAULT;
bool NCCL_CTRAN_ENABLE;
bool NCCL_CTRAN_ENABLE_DEFAULT;
bool NCCL_CTRAN_ENABLE_DEV_TRACE_LOG;
bool NCCL_CTRAN_ENABLE_DEV_TRACE_LOG_DEFAULT;
bool NCCL_CTRAN_ENABLE_FAULT_TOLERANCE;
bool NCCL_CTRAN_ENABLE_FAULT_TOLERANCE_DEFAULT;
bool NCCL_CTRAN_ENABLE_PRECONNECT;
bool NCCL_CTRAN_ENABLE_PRECONNECT_DEFAULT;
bool NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS;
bool NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS_DEFAULT;
bool NCCL_CTRAN_ENABLE_TRACE_LOG;
bool NCCL_CTRAN_ENABLE_TRACE_LOG_DEFAULT;
bool NCCL_CTRAN_ENABLE_TRACE_LOGGER;
bool NCCL_CTRAN_ENABLE_TRACE_LOGGER_DEFAULT;
bool NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH;
bool NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH_DEFAULT;
std::vector<std::string> NCCL_CTRAN_EX_IB_QP_CONFIG;
std::vector<std::string> NCCL_CTRAN_EX_IB_QP_CONFIG_DEFAULT;
int NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS;
int NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS_DEFAULT;
uint64_t NCCL_CTRAN_IB_CTRL_TC;
uint64_t NCCL_CTRAN_IB_CTRL_TC_DEFAULT;
int NCCL_CTRAN_IB_DEVICES_PER_RANK;
int NCCL_CTRAN_IB_DEVICES_PER_RANK_DEFAULT;
int NCCL_CTRAN_IB_DEVICE_STRIDE;
int NCCL_CTRAN_IB_DEVICE_STRIDE_DEFAULT;
bool NCCL_CTRAN_IB_DMABUF_ENABLE;
bool NCCL_CTRAN_IB_DMABUF_ENABLE_DEFAULT;
bool NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE;
bool NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE_DEFAULT;
bool NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK;
bool NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK_DEFAULT;
int NCCL_CTRAN_IB_MAX_QPS;
int NCCL_CTRAN_IB_MAX_QPS_DEFAULT;
std::vector<std::string> NCCL_CTRAN_IB_PG_TRAFFIC_CLASS;
std::vector<std::string> NCCL_CTRAN_IB_PG_TRAFFIC_CLASS_DEFAULT;
std::unordered_map<std::string, std::vector<std::string>>
    NCCL_CTRAN_IB_QP_CONFIG_ALGO;
std::unordered_map<std::string, std::vector<std::string>>
    NCCL_CTRAN_IB_QP_CONFIG_ALGO_DEFAULT;
std::vector<std::string> NCCL_CTRAN_IB_QP_CONFIG_XDC;
std::vector<std::string> NCCL_CTRAN_IB_QP_CONFIG_XDC_DEFAULT;
std::vector<std::string> NCCL_CTRAN_IB_QP_CONFIG_XRACK;
std::vector<std::string> NCCL_CTRAN_IB_QP_CONFIG_XRACK_DEFAULT;
std::vector<std::string> NCCL_CTRAN_IB_QP_CONFIG_XZONE;
std::vector<std::string> NCCL_CTRAN_IB_QP_CONFIG_XZONE_DEFAULT;
uint64_t NCCL_CTRAN_IB_QP_MAX_MSGS;
uint64_t NCCL_CTRAN_IB_QP_MAX_MSGS_DEFAULT;
uint64_t NCCL_CTRAN_IB_QP_SCALING_THRESHOLD;
uint64_t NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_DEFAULT;
enum NCCL_CTRAN_IB_VC_MODE NCCL_CTRAN_IB_VC_MODE;
enum NCCL_CTRAN_IB_VC_MODE NCCL_CTRAN_IB_VC_MODE_DEFAULT;
uint64_t NCCL_CTRAN_INTERNODE_TMPBUF_SIZE;
uint64_t NCCL_CTRAN_INTERNODE_TMPBUF_SIZE_DEFAULT;
std::string NCCL_CTRAN_KINETO_PROFILE_DIR;
std::string NCCL_CTRAN_KINETO_PROFILE_DIR_DEFAULT;
bool NCCL_CTRAN_NO_ERROR_CHECK;
bool NCCL_CTRAN_NO_ERROR_CHECK_DEFAULT;
int NCCL_CTRAN_NUM_CHECKSUMS;
int NCCL_CTRAN_NUM_CHECKSUMS_DEFAULT;
int NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS;
int NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS_DEFAULT;
int NCCL_CTRAN_NUM_KERNEL_ELEMS;
int NCCL_CTRAN_NUM_KERNEL_ELEMS_DEFAULT;
int NCCL_CTRAN_NUM_KERNEL_FLAGS;
int NCCL_CTRAN_NUM_KERNEL_FLAGS_DEFAULT;
int NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE;
int NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE_DEFAULT;
int NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE_DEFAULT;
int NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE;
int NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE_DEFAULT;
int NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE_DEFAULT;
bool NCCL_CTRAN_NVL_FABRIC_ENABLE;
bool NCCL_CTRAN_NVL_FABRIC_ENABLE_DEFAULT;
int NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE;
int NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE_DEFAULT;
bool NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE;
bool NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE_DEFAULT;
int NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE_DEFAULT;
uint64_t NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE;
uint64_t NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE_DEFAULT;
enum NCCL_CTRAN_PROFILING NCCL_CTRAN_PROFILING;
enum NCCL_CTRAN_PROFILING NCCL_CTRAN_PROFILING_DEFAULT;
int NCCL_CTRAN_PROFILING_REPORT_COUNT;
int NCCL_CTRAN_PROFILING_REPORT_COUNT_DEFAULT;
bool NCCL_CTRAN_QP_PROFILING_ENABLE;
bool NCCL_CTRAN_QP_PROFILING_ENABLE_DEFAULT;
std::string NCCL_CTRAN_QP_PROFILING_OUTPUT;
std::string NCCL_CTRAN_QP_PROFILING_OUTPUT_DEFAULT;
int NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT;
int NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT_DEFAULT;
int NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT;
uint64_t NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE;
uint64_t NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE_DEFAULT;
int NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK;
int NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK_DEFAULT;
int NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS;
int NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS_DEFAULT;
int NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE;
int NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE_DEFAULT;
enum NCCL_CTRAN_REGISTER NCCL_CTRAN_REGISTER;
enum NCCL_CTRAN_REGISTER NCCL_CTRAN_REGISTER_DEFAULT;
bool NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC;
bool NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC_DEFAULT;
int NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT;
int NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_DEFAULT;
bool NCCL_CTRAN_REGISTRATION_SIZE_CHECK;
bool NCCL_CTRAN_REGISTRATION_SIZE_CHECK_DEFAULT;
int NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE;
int NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE_DEFAULT;
int32_t NCCL_CTRAN_SOCKET_POLL_TIMEOUT;
int32_t NCCL_CTRAN_SOCKET_POLL_TIMEOUT_DEFAULT;
std::string NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR;
std::string NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR_DEFAULT;
bool NCCL_CTRAN_TRANSPORT_PROFILER;
bool NCCL_CTRAN_TRANSPORT_PROFILER_DEFAULT;
uint64_t NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS;
uint64_t NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS_DEFAULT;
uint64_t NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE;
uint64_t NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE_DEFAULT;
int32_t NCCL_CTRAN_WIN_SIGNAL_SIZE;
int32_t NCCL_CTRAN_WIN_SIGNAL_SIZE_DEFAULT;
int64_t NCCL_CUMEM_ENABLE;
int64_t NCCL_CUMEM_ENABLE_DEFAULT;
int64_t NCCL_CUMEM_HOST_ENABLE;
int64_t NCCL_CUMEM_HOST_ENABLE_DEFAULT;
bool NCCL_CVARS_LOG_INFO;
bool NCCL_CVARS_LOG_INFO_DEFAULT;
int NCCL_DDA_ALLREDUCE_MAX_BLOCKS;
int NCCL_DDA_ALLREDUCE_MAX_BLOCKS_DEFAULT;
uint64_t NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD;
uint64_t NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_DEFAULT;
uint64_t NCCL_DDA_ALLREDUCE_TREE_THRESHOLD;
uint64_t NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_DEFAULT;
uint64_t NCCL_DDA_TMPBUFF_SIZE;
uint64_t NCCL_DDA_TMPBUFF_SIZE_DEFAULT;
std::string NCCL_DEBUG;
std::string NCCL_DEBUG_DEFAULT;
std::string NCCL_DEBUG_FILE;
std::string NCCL_DEBUG_FILE_DEFAULT;
bool NCCL_DEBUG_LOGGING_ASYNC;
bool NCCL_DEBUG_LOGGING_ASYNC_DEFAULT;
std::string NCCL_DEBUG_SUBSYS;
std::string NCCL_DEBUG_SUBSYS_DEFAULT;
std::string NCCL_DEBUG_TIMESTAMP_FORMAT;
std::string NCCL_DEBUG_TIMESTAMP_FORMAT_DEFAULT;
std::string NCCL_DEBUG_TIMESTAMP_LEVELS;
std::string NCCL_DEBUG_TIMESTAMP_LEVELS_DEFAULT;
int64_t NCCL_DMABUF_ENABLE;
int64_t NCCL_DMABUF_ENABLE_DEFAULT;
int NCCL_ENV_CTA_POLICY;
int NCCL_ENV_CTA_POLICY_DEFAULT;
enum NCCL_FASTINIT_MODE NCCL_FASTINIT_MODE;
enum NCCL_FASTINIT_MODE NCCL_FASTINIT_MODE_DEFAULT;
std::vector<std::string> NCCL_FILTER_ALGO_LOGGING_BY_RANKS;
std::vector<std::string> NCCL_FILTER_ALGO_LOGGING_BY_RANKS_DEFAULT;
std::vector<std::string> NCCL_FILTER_MEM_LOGGING_BY_RANKS;
std::vector<std::string> NCCL_FILTER_MEM_LOGGING_BY_RANKS_DEFAULT;
std::vector<std::string> NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS;
std::vector<std::string> NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS_DEFAULT;
bool NCCL_FIRST_COMM_AS_WORLD;
bool NCCL_FIRST_COMM_AS_WORLD_DEFAULT;
int64_t NCCL_GDRCOPY_ENABLE;
int64_t NCCL_GDRCOPY_ENABLE_DEFAULT;
int64_t NCCL_GDRCOPY_FIFO_ENABLE;
int64_t NCCL_GDRCOPY_FIFO_ENABLE_DEFAULT;
int64_t NCCL_GDRCOPY_FLUSH_ENABLE;
int64_t NCCL_GDRCOPY_FLUSH_ENABLE_DEFAULT;
int64_t NCCL_GDRCOPY_SYNC_ENABLE;
int64_t NCCL_GDRCOPY_SYNC_ENABLE_DEFAULT;
int64_t NCCL_GDR_FLUSH_DISABLE;
int64_t NCCL_GDR_FLUSH_DISABLE_DEFAULT;
std::string NCCL_GRAPH_DUMP_FILE;
std::string NCCL_GRAPH_DUMP_FILE_DEFAULT;
int64_t NCCL_GRAPH_DUMP_FILE_RANK;
int64_t NCCL_GRAPH_DUMP_FILE_RANK_DEFAULT;
std::string NCCL_GRAPH_FILE;
std::string NCCL_GRAPH_FILE_DEFAULT;
int64_t NCCL_GRAPH_HELPER_DISABLE;
int64_t NCCL_GRAPH_HELPER_DISABLE_DEFAULT;
int64_t NCCL_GRAPH_MIXING_SUPPORT;
int64_t NCCL_GRAPH_MIXING_SUPPORT_DEFAULT;
int64_t NCCL_GRAPH_REGISTER;
int64_t NCCL_GRAPH_REGISTER_DEFAULT;
int64_t NCCL_GROUP_CUDA_STREAM;
int64_t NCCL_GROUP_CUDA_STREAM_DEFAULT;
std::string NCCL_HOSTID;
std::string NCCL_HOSTID_DEFAULT;
std::vector<std::string> NCCL_HPC_JOB_IDS;
std::vector<std::string> NCCL_HPC_JOB_IDS_DEFAULT;
std::string NCCL_IBVERBS_PATH;
std::string NCCL_IBVERBS_PATH_DEFAULT;
int64_t NCCL_IB_ADAPTIVE_ROUTING;
int64_t NCCL_IB_ADAPTIVE_ROUTING_DEFAULT;
std::string NCCL_IB_ADDR_FAMILY;
std::string NCCL_IB_ADDR_FAMILY_DEFAULT;
std::string NCCL_IB_ADDR_RANGE;
std::string NCCL_IB_ADDR_RANGE_DEFAULT;
int64_t NCCL_IB_AR_THRESHOLD;
int64_t NCCL_IB_AR_THRESHOLD_DEFAULT;
enum NCCL_IB_ASYNC_EVENT_LOOP NCCL_IB_ASYNC_EVENT_LOOP;
enum NCCL_IB_ASYNC_EVENT_LOOP NCCL_IB_ASYNC_EVENT_LOOP_DEFAULT;
int NCCL_IB_DATA_DIRECT;
int NCCL_IB_DATA_DIRECT_DEFAULT;
int64_t NCCL_IB_DISABLE;
int64_t NCCL_IB_DISABLE_DEFAULT;
int64_t NCCL_IB_ECE_ENABLE;
int64_t NCCL_IB_ECE_ENABLE_DEFAULT;
int64_t NCCL_IB_FIFO_TC;
int64_t NCCL_IB_FIFO_TC_DEFAULT;
int64_t NCCL_IB_GID_INDEX;
int64_t NCCL_IB_GID_INDEX_DEFAULT;
std::string NCCL_IB_HCA_PREFIX;
std::string NCCL_IB_HCA_PREFIX_DEFAULT;
std::vector<std::string> NCCL_IB_HCA;
std::vector<std::string> NCCL_IB_HCA_DEFAULT;
int NCCL_IB_LINK_DOWN_TIMEOUT;
int NCCL_IB_LINK_DOWN_TIMEOUT_DEFAULT;
int64_t NCCL_IB_MERGE_NICS;
int64_t NCCL_IB_MERGE_NICS_DEFAULT;
int64_t NCCL_IB_MERGE_VFS;
int64_t NCCL_IB_MERGE_VFS_DEFAULT;
int64_t NCCL_IB_MQP_RETRY_ALL;
int64_t NCCL_IB_MQP_RETRY_ALL_DEFAULT;
int64_t NCCL_IB_MQP_RETRY_CNT;
int64_t NCCL_IB_MQP_RETRY_CNT_DEFAULT;
int64_t NCCL_IB_MQP_RETRY_SLEEP_MSEC;
int64_t NCCL_IB_MQP_RETRY_SLEEP_MSEC_DEFAULT;
int64_t NCCL_IB_PCI_RELAXED_ORDERING;
int64_t NCCL_IB_PCI_RELAXED_ORDERING_DEFAULT;
int64_t NCCL_IB_PKEY;
int64_t NCCL_IB_PKEY_DEFAULT;
int64_t NCCL_IB_QPS_PER_CONNECTION;
int64_t NCCL_IB_QPS_PER_CONNECTION_DEFAULT;
int64_t NCCL_IB_RETRY_CNT;
int64_t NCCL_IB_RETRY_CNT_DEFAULT;
int64_t NCCL_IB_RETURN_ASYNC_EVENTS;
int64_t NCCL_IB_RETURN_ASYNC_EVENTS_DEFAULT;
int64_t NCCL_IB_ROCE_VERSION_NUM;
int64_t NCCL_IB_ROCE_VERSION_NUM_DEFAULT;
int64_t NCCL_IB_ROUTABLE_FLID_GID_INDEX;
int64_t NCCL_IB_ROUTABLE_FLID_GID_INDEX_DEFAULT;
int64_t NCCL_IB_SL;
int64_t NCCL_IB_SL_DEFAULT;
int64_t NCCL_IB_SPLIT_DATA_ON_QPS;
int64_t NCCL_IB_SPLIT_DATA_ON_QPS_DEFAULT;
int64_t NCCL_IB_TC;
int64_t NCCL_IB_TC_DEFAULT;
int64_t NCCL_IB_TIMEOUT;
int64_t NCCL_IB_TIMEOUT_DEFAULT;
int64_t NCCL_IB_USE_INLINE;
int64_t NCCL_IB_USE_INLINE_DEFAULT;
int64_t NCCL_IB_WARN_RAIL_LOCAL;
int64_t NCCL_IB_WARN_RAIL_LOCAL_DEFAULT;
int64_t NCCL_IGNORE_CPU_AFFINITY;
int64_t NCCL_IGNORE_CPU_AFFINITY_DEFAULT;
int64_t NCCL_IGNORE_DISABLED_P2P;
int64_t NCCL_IGNORE_DISABLED_P2P_DEFAULT;
bool NCCL_IGNORE_TOPO_LOAD_FAILURE;
bool NCCL_IGNORE_TOPO_LOAD_FAILURE_DEFAULT;
int64_t NCCL_L1_SHARED_MEMORY_CARVEOUT;
int64_t NCCL_L1_SHARED_MEMORY_CARVEOUT_DEFAULT;
std::string NCCL_LAUNCH_MODE;
std::string NCCL_LAUNCH_MODE_DEFAULT;
bool NCCL_LAUNCH_ORDER_IMPLICIT;
bool NCCL_LAUNCH_ORDER_IMPLICIT_DEFAULT;
bool NCCL_LAUNCH_RACE_FATAL;
bool NCCL_LAUNCH_RACE_FATAL_DEFAULT;
bool NCCL_LAZY_SETUP_CHANNELS;
bool NCCL_LAZY_SETUP_CHANNELS_DEFAULT;
int64_t NCCL_LEGACY_CUDA_REGISTER;
int64_t NCCL_LEGACY_CUDA_REGISTER_DEFAULT;
int64_t NCCL_LL128_BUFFSIZE;
int64_t NCCL_LL128_BUFFSIZE_DEFAULT;
bool NCCL_LL128_C2C;
bool NCCL_LL128_C2C_DEFAULT;
int64_t NCCL_LL128_NTHREADS;
int64_t NCCL_LL128_NTHREADS_DEFAULT;
int64_t NCCL_LL_BUFFSIZE;
int64_t NCCL_LL_BUFFSIZE_DEFAULT;
int64_t NCCL_LOCAL_REGISTER;
int64_t NCCL_LOCAL_REGISTER_DEFAULT;
uint64_t NCCL_MAPPERTRACE_COLL_RECORD_MAX;
uint64_t NCCL_MAPPERTRACE_COLL_RECORD_MAX_DEFAULT;
bool NCCL_MAPPERTRACE_ENABLE;
bool NCCL_MAPPERTRACE_ENABLE_DEFAULT;
uint64_t NCCL_MAPPERTRACE_EVENT_RECORD_MAX;
uint64_t NCCL_MAPPERTRACE_EVENT_RECORD_MAX_DEFAULT;
std::string NCCL_MASTER_ADDR;
std::string NCCL_MASTER_ADDR_DEFAULT;
uint16_t NCCL_MASTER_PORT;
uint16_t NCCL_MASTER_PORT_DEFAULT;
int NCCL_MAX_CTAS;
int NCCL_MAX_CTAS_DEFAULT;
int64_t NCCL_MAX_NCHANNELS;
int64_t NCCL_MAX_NCHANNELS_DEFAULT;
int NCCL_MAX_NRINGS;
int NCCL_MAX_NRINGS_DEFAULT;
int64_t NCCL_MAX_P2P_NCHANNELS;
int64_t NCCL_MAX_P2P_NCHANNELS_DEFAULT;
std::string NCCL_MEMORY_EVENT_LOGGING;
std::string NCCL_MEMORY_EVENT_LOGGING_DEFAULT;
bool NCCL_MEM_ENABLE_MC_ALIGNMENT;
bool NCCL_MEM_ENABLE_MC_ALIGNMENT_DEFAULT;
size_t NCCL_MEM_POOL_SIZE;
size_t NCCL_MEM_POOL_SIZE_DEFAULT;
enum NCCL_MEM_SYNC_DOMAIN NCCL_MEM_SYNC_DOMAIN;
enum NCCL_MEM_SYNC_DOMAIN NCCL_MEM_SYNC_DOMAIN_DEFAULT;
bool NCCL_MEM_USE_SLAB_ALLOCATOR;
bool NCCL_MEM_USE_SLAB_ALLOCATOR_DEFAULT;
int NCCL_MIN_CTAS;
int NCCL_MIN_CTAS_DEFAULT;
int64_t NCCL_MIN_NCHANNELS;
int64_t NCCL_MIN_NCHANNELS_DEFAULT;
int NCCL_MIN_NRINGS;
int NCCL_MIN_NRINGS_DEFAULT;
int64_t NCCL_MIN_P2P_NCHANNELS;
int64_t NCCL_MIN_P2P_NCHANNELS_DEFAULT;
int64_t NCCL_MNNVL_CLIQUE_ID;
int64_t NCCL_MNNVL_CLIQUE_ID_DEFAULT;
int NCCL_MNNVL_CLIQUE_SIZE;
int NCCL_MNNVL_CLIQUE_SIZE_DEFAULT;
bool NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE;
bool NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE_DEFAULT;
int64_t NCCL_MNNVL_ENABLE;
int64_t NCCL_MNNVL_ENABLE_DEFAULT;
bool NCCL_MNNVL_SCATTER_NETS_ENABLE;
bool NCCL_MNNVL_SCATTER_NETS_ENABLE_DEFAULT;
bool NCCL_MNNVL_TRUNK_DISABLE;
bool NCCL_MNNVL_TRUNK_DISABLE_DEFAULT;
int64_t NCCL_MNNVL_UUID;
int64_t NCCL_MNNVL_UUID_DEFAULT;
int64_t NCCL_NCHANNELS_PER_NET_PEER;
int64_t NCCL_NCHANNELS_PER_NET_PEER_DEFAULT;
std::string NCCL_NETDEVS_POLICY;
std::string NCCL_NETDEVS_POLICY_DEFAULT;
std::string NCCL_NETWORK;
std::string NCCL_NETWORK_DEFAULT;
bool NCCL_NETWORK_PERF_MONITOR_ENABLE;
bool NCCL_NETWORK_PERF_MONITOR_ENABLE_DEFAULT;
bool NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE;
bool NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE_DEFAULT;
int64_t NCCL_NET_DISABLE_INTRA;
int64_t NCCL_NET_DISABLE_INTRA_DEFAULT;
int64_t NCCL_NET_FORCE_FLUSH;
int64_t NCCL_NET_FORCE_FLUSH_DEFAULT;
std::string NCCL_NET_FORCE_MERGE;
std::string NCCL_NET_FORCE_MERGE_DEFAULT;
bool NCCL_NET_GDR_C2C;
bool NCCL_NET_GDR_C2C_DEFAULT;
std::string NCCL_NET_GDR_LEVEL;
std::string NCCL_NET_GDR_LEVEL_DEFAULT;
int64_t NCCL_NET_GDR_READ;
int64_t NCCL_NET_GDR_READ_DEFAULT;
std::string NCCL_NET_MERGE_LEVEL;
std::string NCCL_NET_MERGE_LEVEL_DEFAULT;
int64_t NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR;
int64_t NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR_DEFAULT;
int64_t NCCL_NET_OVERHEAD;
int64_t NCCL_NET_OVERHEAD_DEFAULT;
std::string NCCL_NET_PLUGIN;
std::string NCCL_NET_PLUGIN_DEFAULT;
int NCCL_NET_PLUGIN_REF_COUNT;
int NCCL_NET_PLUGIN_REF_COUNT_DEFAULT;
int64_t NCCL_NET_SHARED_BUFFERS;
int64_t NCCL_NET_SHARED_BUFFERS_DEFAULT;
int64_t NCCL_NET_SHARED_COMMS;
int64_t NCCL_NET_SHARED_COMMS_DEFAULT;
int64_t NCCL_NSOCKS_PERTHREAD;
int64_t NCCL_NSOCKS_PERTHREAD_DEFAULT;
int64_t NCCL_NTHREADS;
int64_t NCCL_NTHREADS_DEFAULT;
int64_t NCCL_NVB_DISABLE;
int64_t NCCL_NVB_DISABLE_DEFAULT;
int64_t NCCL_NVB_PRECONNECT;
int64_t NCCL_NVB_PRECONNECT_DEFAULT;
bool NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE;
bool NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE_DEFAULT;
int64_t NCCL_NVLSTREE_MAX_CHUNKSIZE;
int64_t NCCL_NVLSTREE_MAX_CHUNKSIZE_DEFAULT;
int64_t NCCL_NVLS_CHUNKSIZE;
int64_t NCCL_NVLS_CHUNKSIZE_DEFAULT;
int64_t NCCL_NVLS_ENABLE;
int64_t NCCL_NVLS_ENABLE_DEFAULT;
int NCCL_NVLS_NCHANNELS;
int NCCL_NVLS_NCHANNELS_DEFAULT;
bool NCCL_NVTX_DISABLE;
bool NCCL_NVTX_DISABLE_DEFAULT;
int64_t NCCL_OOB_NET_ENABLE;
int64_t NCCL_OOB_NET_ENABLE_DEFAULT;
std::string NCCL_OOB_NET_IFNAME;
std::string NCCL_OOB_NET_IFNAME_DEFAULT;
int64_t NCCL_P2P_DIRECT_DISABLE;
int64_t NCCL_P2P_DIRECT_DISABLE_DEFAULT;
bool NCCL_P2P_DISABLE;
bool NCCL_P2P_DISABLE_DEFAULT;
std::string NCCL_P2P_LEVEL;
std::string NCCL_P2P_LEVEL_DEFAULT;
int64_t NCCL_P2P_LL_THRESHOLD;
int64_t NCCL_P2P_LL_THRESHOLD_DEFAULT;
int64_t NCCL_P2P_NET_CHUNKSIZE;
int64_t NCCL_P2P_NET_CHUNKSIZE_DEFAULT;
int64_t NCCL_P2P_NVL_CHUNKSIZE;
int64_t NCCL_P2P_NVL_CHUNKSIZE_DEFAULT;
int64_t NCCL_P2P_PCI_CHUNKSIZE;
int64_t NCCL_P2P_PCI_CHUNKSIZE_DEFAULT;
int64_t NCCL_P2P_PXN_LEVEL;
int64_t NCCL_P2P_PXN_LEVEL_DEFAULT;
int64_t NCCL_P2P_READ_ENABLE;
int64_t NCCL_P2P_READ_ENABLE_DEFAULT;
int64_t NCCL_P2P_USE_CUDA_MEMCPY;
int64_t NCCL_P2P_USE_CUDA_MEMCPY_DEFAULT;
int64_t NCCL_PAT_ENABLE;
int64_t NCCL_PAT_ENABLE_DEFAULT;
int NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES;
int NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES_DEFAULT;
std::string NCCL_PROFILER_PLUGIN;
std::string NCCL_PROFILER_PLUGIN_DEFAULT;
int64_t NCCL_PROGRESS_APPENDOP_FREQ;
int64_t NCCL_PROGRESS_APPENDOP_FREQ_DEFAULT;
std::string NCCL_PROTO;
std::string NCCL_PROTO_DEFAULT;
std::vector<std::string> NCCL_PROXYMOCK_NET_SEND_FAILURE;
std::vector<std::string> NCCL_PROXYMOCK_NET_SEND_FAILURE_DEFAULT;
std::vector<std::string> NCCL_PROXYTRACE;
std::vector<std::string> NCCL_PROXYTRACE_DEFAULT;
int NCCL_PROXYTRACE_RECORD_MAX;
int NCCL_PROXYTRACE_RECORD_MAX_DEFAULT;
int64_t NCCL_PROXY_APPEND_BATCH_SIZE;
int64_t NCCL_PROXY_APPEND_BATCH_SIZE_DEFAULT;
std::string NCCL_PROXY_CPUSET;
std::string NCCL_PROXY_CPUSET_DEFAULT;
int64_t NCCL_PROXY_DUMP_SIGNAL;
int64_t NCCL_PROXY_DUMP_SIGNAL_DEFAULT;
bool NCCL_PXN_C2C;
bool NCCL_PXN_C2C_DEFAULT;
int64_t NCCL_PXN_DISABLE;
int64_t NCCL_PXN_DISABLE_DEFAULT;
std::string NCCL_RAS_ADDR;
std::string NCCL_RAS_ADDR_DEFAULT;
int64_t NCCL_RAS_ENABLE;
int64_t NCCL_RAS_ENABLE_DEFAULT;
int64_t NCCL_RAS_TIMEOUT_FACTOR;
int64_t NCCL_RAS_TIMEOUT_FACTOR_DEFAULT;
enum NCCL_REDUCESCATTER_ALGO NCCL_REDUCESCATTER_ALGO;
enum NCCL_REDUCESCATTER_ALGO NCCL_REDUCESCATTER_ALGO_DEFAULT;
int64_t NCCL_REPORT_CONNECT_PROGRESS;
int64_t NCCL_REPORT_CONNECT_PROGRESS_DEFAULT;
int64_t NCCL_RUNTIME_CONNECT;
int64_t NCCL_RUNTIME_CONNECT_DEFAULT;
bool NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY;
bool NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY_DEFAULT;
std::string NCCL_SCUBA_LOG_FILE_PREFIX;
std::string NCCL_SCUBA_LOG_FILE_PREFIX_DEFAULT;
bool NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED;
bool NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED_DEFAULT;
enum NCCL_SENDRECV_ALGO NCCL_SENDRECV_ALGO;
enum NCCL_SENDRECV_ALGO NCCL_SENDRECV_ALGO_DEFAULT;
int NCCL_SET_CPU_STACK_SIZE;
int NCCL_SET_CPU_STACK_SIZE_DEFAULT;
int64_t NCCL_SET_STACK_SIZE;
int64_t NCCL_SET_STACK_SIZE_DEFAULT;
int64_t NCCL_SET_THREAD_NAME;
int64_t NCCL_SET_THREAD_NAME_DEFAULT;
int64_t NCCL_SHM_DISABLE;
int64_t NCCL_SHM_DISABLE_DEFAULT;
int64_t NCCL_SHM_LOCALITY;
int64_t NCCL_SHM_LOCALITY_DEFAULT;
int64_t NCCL_SHM_MEMCPY_MODE;
int64_t NCCL_SHM_MEMCPY_MODE_DEFAULT;
int64_t NCCL_SHM_USE_CUDA_MEMCPY;
int64_t NCCL_SHM_USE_CUDA_MEMCPY_DEFAULT;
int64_t NCCL_SINGLE_PROC_MEM_REG_ENABLE;
int64_t NCCL_SINGLE_PROC_MEM_REG_ENABLE_DEFAULT;
bool NCCL_SKIP_TCPFORM_RING;
bool NCCL_SKIP_TCPFORM_RING_DEFAULT;
std::string NCCL_SLOW_COLL_LOGGING;
std::string NCCL_SLOW_COLL_LOGGING_DEFAULT;
bool NCCL_SLOW_RANK_ENABLE;
bool NCCL_SLOW_RANK_ENABLE_DEFAULT;
std::string NCCL_SLOW_RANK_LOGGING;
std::string NCCL_SLOW_RANK_LOGGING_DEFAULT;
int NCCL_SLOW_RANK_LOG_NSAMPLES;
int NCCL_SLOW_RANK_LOG_NSAMPLES_DEFAULT;
int NCCL_SLOW_RANK_PERF_WINDOW_SIZE;
int NCCL_SLOW_RANK_PERF_WINDOW_SIZE_DEFAULT;
int NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC;
int NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC_DEFAULT;
int NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS;
int NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS_DEFAULT;
int NCCL_SLOW_RANK_VARIANCE_PERC;
int NCCL_SLOW_RANK_VARIANCE_PERC_DEFAULT;
int NCCL_SLOW_RANK_WQE_WINDOW_SIZE;
int NCCL_SLOW_RANK_WQE_WINDOW_SIZE_DEFAULT;
std::string NCCL_SOCKET_FAMILY;
std::string NCCL_SOCKET_FAMILY_DEFAULT;
std::string NCCL_SOCKET_IFNAME;
std::string NCCL_SOCKET_IFNAME_DEFAULT;
int NCCL_SOCKET_INLINE;
int NCCL_SOCKET_INLINE_DEFAULT;
std::string NCCL_SOCKET_IPADDR_PREFIX;
std::string NCCL_SOCKET_IPADDR_PREFIX_DEFAULT;
int NCCL_SOCKET_MIN_TASKSIZE;
int NCCL_SOCKET_MIN_TASKSIZE_DEFAULT;
int64_t NCCL_SOCKET_NTHREADS;
int64_t NCCL_SOCKET_NTHREADS_DEFAULT;
int NCCL_SOCKET_RCVBUF;
int NCCL_SOCKET_RCVBUF_DEFAULT;
int64_t NCCL_SOCKET_RETRY_CNT;
int64_t NCCL_SOCKET_RETRY_CNT_DEFAULT;
int64_t NCCL_SOCKET_RETRY_SLEEP_MSEC;
int64_t NCCL_SOCKET_RETRY_SLEEP_MSEC_DEFAULT;
int NCCL_SOCKET_SNDBUF;
int NCCL_SOCKET_SNDBUF_DEFAULT;
int NCCL_SOCKET_TOS_CONFIG;
int NCCL_SOCKET_TOS_CONFIG_DEFAULT;
int NCCL_SYM_CTAS;
int NCCL_SYM_CTAS_DEFAULT;
std::string NCCL_SYM_KERNEL;
std::string NCCL_SYM_KERNEL_DEFAULT;
int NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL;
int NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL_DEFAULT;
int NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL;
int NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL_DEFAULT;
double NCCL_TCPSTORE_BACKOFF_MULTIPLIER;
double NCCL_TCPSTORE_BACKOFF_MULTIPLIER_DEFAULT;
double NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR;
double NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR_DEFAULT;
int NCCL_TCPSTORE_CONNECT_TIMEOUT;
int NCCL_TCPSTORE_CONNECT_TIMEOUT_DEFAULT;
int NCCL_TCPSTORE_IO_TIMEOUT;
int NCCL_TCPSTORE_IO_TIMEOUT_DEFAULT;
std::string NCCL_THREAD_THRESHOLDS;
std::string NCCL_THREAD_THRESHOLDS_DEFAULT;
std::string NCCL_TOPO_DUMP_FILE;
std::string NCCL_TOPO_DUMP_FILE_DEFAULT;
int64_t NCCL_TOPO_DUMP_FILE_RANK;
int64_t NCCL_TOPO_DUMP_FILE_RANK_DEFAULT;
std::string NCCL_TOPO_FILE;
std::string NCCL_TOPO_FILE_DEFAULT;
std::string NCCL_TOPO_FILE_PATH;
std::string NCCL_TOPO_FILE_PATH_DEFAULT;
int64_t NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT;
int64_t NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT_DEFAULT;
uint64_t NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT;
uint64_t NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT_DEFAULT;
std::string NCCL_TUNER_PLUGIN;
std::string NCCL_TUNER_PLUGIN_DEFAULT;
int64_t NCCL_UID_STAGGER_RATE;
int64_t NCCL_UID_STAGGER_RATE_DEFAULT;
int64_t NCCL_UID_STAGGER_THRESHOLD;
int64_t NCCL_UID_STAGGER_THRESHOLD_DEFAULT;
int64_t NCCL_UNPACK_DOUBLE_NCHANNELS;
int64_t NCCL_UNPACK_DOUBLE_NCHANNELS_DEFAULT;
bool NCCL_USE_MEM_CACHE;
bool NCCL_USE_MEM_CACHE_DEFAULT;
bool NCCL_USE_SHARED_BUFFER_POOL;
bool NCCL_USE_SHARED_BUFFER_POOL_DEFAULT;
bool NCCL_USE_TRANSPORT_EXT;
bool NCCL_USE_TRANSPORT_EXT_DEFAULT;
enum NCCL_USE_TRANSPORT_PROXY NCCL_USE_TRANSPORT_PROXY;
enum NCCL_USE_TRANSPORT_PROXY NCCL_USE_TRANSPORT_PROXY_DEFAULT;
int64_t NCCL_WARN_ENABLE_DEBUG_INFO;
int64_t NCCL_WARN_ENABLE_DEBUG_INFO_DEFAULT;
bool NCCL_WIN_ENABLE;
bool NCCL_WIN_ENABLE_DEFAULT;
int NCCL_WIN_STRIDE;
int NCCL_WIN_STRIDE_DEFAULT;
int64_t NCCL_WORK_ARGS_BYTES;
int64_t NCCL_WORK_ARGS_BYTES_DEFAULT;
int64_t NCCL_WORK_FIFO_BYTES;
int64_t NCCL_WORK_FIFO_BYTES_DEFAULT;
std::string __NCCL_UNIT_TEST_STRING_CVAR__;
std::string __NCCL_UNIT_TEST_STRING_CVAR___DEFAULT;
bool __NCCL_UNIT_TEST_BOOL_CVAR__;
bool __NCCL_UNIT_TEST_BOOL_CVAR___DEFAULT;
int __NCCL_UNIT_TEST_INT_CVAR__;
int __NCCL_UNIT_TEST_INT_CVAR___DEFAULT;
int64_t __NCCL_UNIT_TEST_INT64_T_CVAR__;
int64_t __NCCL_UNIT_TEST_INT64_T_CVAR___DEFAULT;
uint16_t __NCCL_UNIT_TEST_UINT16_T_CVAR__;
uint16_t __NCCL_UNIT_TEST_UINT16_T_CVAR___DEFAULT;
size_t __NCCL_UNIT_TEST_SIZE_T_CVAR__;
size_t __NCCL_UNIT_TEST_SIZE_T_CVAR___DEFAULT;
double __NCCL_UNIT_TEST_DOUBLE_CVAR__;
double __NCCL_UNIT_TEST_DOUBLE_CVAR___DEFAULT;

namespace ncclx {
std::unordered_map<std::string, std::string*> env_string_values = {
    {"NCCL_ALGO", &NCCL_ALGO},
    {"NCCL_CLIENT_SOCKET_IFNAME", &NCCL_CLIENT_SOCKET_IFNAME},
    {"NCCL_COLL_EVENT_LOGGING", &NCCL_COLL_EVENT_LOGGING},
    {"NCCL_COLL_STATS_LOGGING", &NCCL_COLL_STATS_LOGGING},
    {"NCCL_COMM_EVENT_LOGGING", &NCCL_COMM_EVENT_LOGGING},
    {"NCCL_COMM_ID", &NCCL_COMM_ID},
    {"NCCL_CTRAN_ALGO_PROFILING_LOGGING", &NCCL_CTRAN_ALGO_PROFILING_LOGGING},
    {"NCCL_CTRAN_ALGO_PROFILING_OUTPUT", &NCCL_CTRAN_ALGO_PROFILING_OUTPUT},
    {"NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE",
     &NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE},
    {"NCCL_CTRAN_KINETO_PROFILE_DIR", &NCCL_CTRAN_KINETO_PROFILE_DIR},
    {"NCCL_CTRAN_QP_PROFILING_OUTPUT", &NCCL_CTRAN_QP_PROFILING_OUTPUT},
    {"NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR", &NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR},
    {"NCCL_DEBUG", &NCCL_DEBUG},
    {"NCCL_DEBUG_FILE", &NCCL_DEBUG_FILE},
    {"NCCL_DEBUG_SUBSYS", &NCCL_DEBUG_SUBSYS},
    {"NCCL_DEBUG_TIMESTAMP_FORMAT", &NCCL_DEBUG_TIMESTAMP_FORMAT},
    {"NCCL_DEBUG_TIMESTAMP_LEVELS", &NCCL_DEBUG_TIMESTAMP_LEVELS},
    {"NCCL_GRAPH_DUMP_FILE", &NCCL_GRAPH_DUMP_FILE},
    {"NCCL_GRAPH_FILE", &NCCL_GRAPH_FILE},
    {"NCCL_HOSTID", &NCCL_HOSTID},
    {"NCCL_IBVERBS_PATH", &NCCL_IBVERBS_PATH},
    {"NCCL_IB_ADDR_FAMILY", &NCCL_IB_ADDR_FAMILY},
    {"NCCL_IB_ADDR_RANGE", &NCCL_IB_ADDR_RANGE},
    {"NCCL_LAUNCH_MODE", &NCCL_LAUNCH_MODE},
    {"MASTER_ADDR", &NCCL_MASTER_ADDR},
    {"NCCL_MEMORY_EVENT_LOGGING", &NCCL_MEMORY_EVENT_LOGGING},
    {"NCCL_NETDEVS_POLICY", &NCCL_NETDEVS_POLICY},
    {"NCCL_NET", &NCCL_NETWORK},
    {"NCCL_NET_FORCE_MERGE", &NCCL_NET_FORCE_MERGE},
    {"NCCL_NET_GDR_LEVEL", &NCCL_NET_GDR_LEVEL},
    {"NCCL_NET_MERGE_LEVEL", &NCCL_NET_MERGE_LEVEL},
    {"NCCL_NET_PLUGIN", &NCCL_NET_PLUGIN},
    {"NCCL_OOB_NET_IFNAME", &NCCL_OOB_NET_IFNAME},
    {"NCCL_P2P_LEVEL", &NCCL_P2P_LEVEL},
    {"NCCL_PROFILER_PLUGIN", &NCCL_PROFILER_PLUGIN},
    {"NCCL_PROTO", &NCCL_PROTO},
    {"NCCL_PROXY_CPUSET", &NCCL_PROXY_CPUSET},
    {"NCCL_RAS_ADDR", &NCCL_RAS_ADDR},
    {"NCCL_SCUBA_LOG_FILE_PREFIX", &NCCL_SCUBA_LOG_FILE_PREFIX},
    {"NCCL_SLOW_COLL_LOGGING", &NCCL_SLOW_COLL_LOGGING},
    {"NCCL_SLOW_RANK_LOGGING", &NCCL_SLOW_RANK_LOGGING},
    {"NCCL_SOCKET_FAMILY", &NCCL_SOCKET_FAMILY},
    {"NCCL_SOCKET_IFNAME", &NCCL_SOCKET_IFNAME},
    {"NCCL_SOCKET_IPADDR_PREFIX", &NCCL_SOCKET_IPADDR_PREFIX},
    {"NCCL_SYM_KERNEL", &NCCL_SYM_KERNEL},
    {"NCCL_THREAD_THRESHOLDS", &NCCL_THREAD_THRESHOLDS},
    {"NCCL_TOPO_DUMP_FILE", &NCCL_TOPO_DUMP_FILE},
    {"NCCL_TOPO_FILE", &NCCL_TOPO_FILE},
    {"NCCL_TOPO_FILE_PATH", &NCCL_TOPO_FILE_PATH},
    {"NCCL_TUNER_PLUGIN", &NCCL_TUNER_PLUGIN},
    {"__NCCL_UNIT_TEST_STRING_CVAR__", &__NCCL_UNIT_TEST_STRING_CVAR__},
};
std::unordered_map<std::string, int64_t*> env_int64_values = {
    {"NCCL_ALLOC_P2P_NET_LL_BUFFERS", &NCCL_ALLOC_P2P_NET_LL_BUFFERS},
    {"NCCL_BUFFSIZE", &NCCL_BUFFSIZE},
    {"NCCL_CHECK_POINTERS", &NCCL_CHECK_POINTERS},
    {"NCCL_CHUNK_SIZE", &NCCL_CHUNK_SIZE},
    {"NCCL_COLLNET_NODE_THRESHOLD", &NCCL_COLLNET_NODE_THRESHOLD},
    {"NCCL_COLLTRACE_CHECK_INTERVAL_MS", &NCCL_COLLTRACE_CHECK_INTERVAL_MS},
    {"NCCL_COLLTRACE_REPORT_FIRST_N_COLL", &NCCL_COLLTRACE_REPORT_FIRST_N_COLL},
    {"NCCL_COLLTRACE_WAKEUP_INTERVAL_MS", &NCCL_COLLTRACE_WAKEUP_INTERVAL_MS},
    {"NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC",
     &NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC},
    {"NCCL_COMM_BLOCKING", &NCCL_COMM_BLOCKING},
    {"NCCL_CONNECT_ROUND_MAX_PEERS", &NCCL_CONNECT_ROUND_MAX_PEERS},
    {"NCCL_CREATE_THREAD_CONTEXT", &NCCL_CREATE_THREAD_CONTEXT},
    {"NCCL_CROSS_NIC", &NCCL_CROSS_NIC},
    {"NCCL_CUMEM_ENABLE", &NCCL_CUMEM_ENABLE},
    {"NCCL_CUMEM_HOST_ENABLE", &NCCL_CUMEM_HOST_ENABLE},
    {"NCCL_DMABUF_ENABLE", &NCCL_DMABUF_ENABLE},
    {"NCCL_GDRCOPY_ENABLE", &NCCL_GDRCOPY_ENABLE},
    {"NCCL_GDRCOPY_FIFO_ENABLE", &NCCL_GDRCOPY_FIFO_ENABLE},
    {"NCCL_GDRCOPY_FLUSH_ENABLE", &NCCL_GDRCOPY_FLUSH_ENABLE},
    {"NCCL_GDRCOPY_SYNC_ENABLE", &NCCL_GDRCOPY_SYNC_ENABLE},
    {"NCCL_GDR_FLUSH_DISABLE", &NCCL_GDR_FLUSH_DISABLE},
    {"NCCL_GRAPH_DUMP_FILE_RANK", &NCCL_GRAPH_DUMP_FILE_RANK},
    {"NCCL_GRAPH_HELPER_DISABLE", &NCCL_GRAPH_HELPER_DISABLE},
    {"NCCL_GRAPH_MIXING_SUPPORT", &NCCL_GRAPH_MIXING_SUPPORT},
    {"NCCL_GRAPH_REGISTER", &NCCL_GRAPH_REGISTER},
    {"NCCL_GROUP_CUDA_STREAM", &NCCL_GROUP_CUDA_STREAM},
    {"NCCL_IB_ADAPTIVE_ROUTING", &NCCL_IB_ADAPTIVE_ROUTING},
    {"NCCL_IB_AR_THRESHOLD", &NCCL_IB_AR_THRESHOLD},
    {"NCCL_IB_DISABLE", &NCCL_IB_DISABLE},
    {"NCCL_IB_ECE_ENABLE", &NCCL_IB_ECE_ENABLE},
    {"NCCL_IB_FIFO_TC", &NCCL_IB_FIFO_TC},
    {"NCCL_IB_GID_INDEX", &NCCL_IB_GID_INDEX},
    {"NCCL_IB_MERGE_NICS", &NCCL_IB_MERGE_NICS},
    {"NCCL_IB_MERGE_VFS", &NCCL_IB_MERGE_VFS},
    {"NCCL_IB_MQP_RETRY_ALL", &NCCL_IB_MQP_RETRY_ALL},
    {"NCCL_IB_MQP_RETRY_CNT", &NCCL_IB_MQP_RETRY_CNT},
    {"NCCL_IB_MQP_RETRY_SLEEP_MSEC", &NCCL_IB_MQP_RETRY_SLEEP_MSEC},
    {"NCCL_IB_PCI_RELAXED_ORDERING", &NCCL_IB_PCI_RELAXED_ORDERING},
    {"NCCL_IB_PKEY", &NCCL_IB_PKEY},
    {"NCCL_IB_QPS_PER_CONNECTION", &NCCL_IB_QPS_PER_CONNECTION},
    {"NCCL_IB_RETRY_CNT", &NCCL_IB_RETRY_CNT},
    {"NCCL_IB_RETURN_ASYNC_EVENTS", &NCCL_IB_RETURN_ASYNC_EVENTS},
    {"NCCL_IB_ROCE_VERSION_NUM", &NCCL_IB_ROCE_VERSION_NUM},
    {"NCCL_IB_ROUTABLE_FLID_GID_INDEX", &NCCL_IB_ROUTABLE_FLID_GID_INDEX},
    {"NCCL_IB_SL", &NCCL_IB_SL},
    {"NCCL_IB_SPLIT_DATA_ON_QPS", &NCCL_IB_SPLIT_DATA_ON_QPS},
    {"NCCL_IB_TC", &NCCL_IB_TC},
    {"NCCL_IB_TIMEOUT", &NCCL_IB_TIMEOUT},
    {"NCCL_IB_USE_INLINE", &NCCL_IB_USE_INLINE},
    {"NCCL_IB_WARN_RAIL_LOCAL", &NCCL_IB_WARN_RAIL_LOCAL},
    {"NCCL_IGNORE_CPU_AFFINITY", &NCCL_IGNORE_CPU_AFFINITY},
    {"NCCL_IGNORE_DISABLED_P2P", &NCCL_IGNORE_DISABLED_P2P},
    {"NCCL_L1_SHARED_MEMORY_CARVEOUT", &NCCL_L1_SHARED_MEMORY_CARVEOUT},
    {"NCCL_LEGACY_CUDA_REGISTER", &NCCL_LEGACY_CUDA_REGISTER},
    {"NCCL_LL128_BUFFSIZE", &NCCL_LL128_BUFFSIZE},
    {"NCCL_LL128_NTHREADS", &NCCL_LL128_NTHREADS},
    {"NCCL_LL_BUFFSIZE", &NCCL_LL_BUFFSIZE},
    {"NCCL_LOCAL_REGISTER", &NCCL_LOCAL_REGISTER},
    {"NCCL_MAX_NCHANNELS", &NCCL_MAX_NCHANNELS},
    {"NCCL_MAX_P2P_NCHANNELS", &NCCL_MAX_P2P_NCHANNELS},
    {"NCCL_MIN_NCHANNELS", &NCCL_MIN_NCHANNELS},
    {"NCCL_MIN_P2P_NCHANNELS", &NCCL_MIN_P2P_NCHANNELS},
    {"NCCL_MNNVL_CLIQUE_ID", &NCCL_MNNVL_CLIQUE_ID},
    {"NCCL_MNNVL_ENABLE", &NCCL_MNNVL_ENABLE},
    {"NCCL_MNNVL_UUID", &NCCL_MNNVL_UUID},
    {"NCCL_NCHANNELS_PER_NET_PEER", &NCCL_NCHANNELS_PER_NET_PEER},
    {"NCCL_NET_DISABLE_INTRA", &NCCL_NET_DISABLE_INTRA},
    {"NCCL_NET_FORCE_FLUSH", &NCCL_NET_FORCE_FLUSH},
    {"NCCL_NET_GDR_READ", &NCCL_NET_GDR_READ},
    {"NCCL_NET_OPTIONAL_RECV_COMPLETION",
     &NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR},
    {"NCCL_NET_OVERHEAD", &NCCL_NET_OVERHEAD},
    {"NCCL_NET_SHARED_BUFFERS", &NCCL_NET_SHARED_BUFFERS},
    {"NCCL_NET_SHARED_COMMS", &NCCL_NET_SHARED_COMMS},
    {"NCCL_NSOCKS_PERTHREAD", &NCCL_NSOCKS_PERTHREAD},
    {"NCCL_NTHREADS", &NCCL_NTHREADS},
    {"NCCL_NVB_DISABLE", &NCCL_NVB_DISABLE},
    {"NCCL_NVB_PRECONNECT", &NCCL_NVB_PRECONNECT},
    {"NCCL_NVLSTREE_MAX_CHUNKSIZE", &NCCL_NVLSTREE_MAX_CHUNKSIZE},
    {"NCCL_NVLS_CHUNKSIZE", &NCCL_NVLS_CHUNKSIZE},
    {"NCCL_NVLS_ENABLE", &NCCL_NVLS_ENABLE},
    {"NCCL_OOB_NET_ENABLE", &NCCL_OOB_NET_ENABLE},
    {"NCCL_P2P_DIRECT_DISABLE", &NCCL_P2P_DIRECT_DISABLE},
    {"NCCL_P2P_LL_THRESHOLD", &NCCL_P2P_LL_THRESHOLD},
    {"NCCL_P2P_NET_CHUNKSIZE", &NCCL_P2P_NET_CHUNKSIZE},
    {"NCCL_P2P_NVL_CHUNKSIZE", &NCCL_P2P_NVL_CHUNKSIZE},
    {"NCCL_P2P_PCI_CHUNKSIZE", &NCCL_P2P_PCI_CHUNKSIZE},
    {"NCCL_P2P_PXN_LEVEL", &NCCL_P2P_PXN_LEVEL},
    {"NCCL_P2P_READ_ENABLE", &NCCL_P2P_READ_ENABLE},
    {"NCCL_P2P_USE_CUDA_MEMCPY", &NCCL_P2P_USE_CUDA_MEMCPY},
    {"NCCL_PAT_ENABLE", &NCCL_PAT_ENABLE},
    {"NCCL_PROGRESS_APPENDOP_FREQ", &NCCL_PROGRESS_APPENDOP_FREQ},
    {"NCCL_PROXY_APPEND_BATCH_SIZE", &NCCL_PROXY_APPEND_BATCH_SIZE},
    {"NCCL_PROXY_DUMP_SIGNAL", &NCCL_PROXY_DUMP_SIGNAL},
    {"NCCL_PXN_DISABLE", &NCCL_PXN_DISABLE},
    {"NCCL_RAS_ENABLE", &NCCL_RAS_ENABLE},
    {"NCCL_RAS_TIMEOUT_FACTOR", &NCCL_RAS_TIMEOUT_FACTOR},
    {"NCCL_REPORT_CONNECT_PROGRESS", &NCCL_REPORT_CONNECT_PROGRESS},
    {"NCCL_RUNTIME_CONNECT", &NCCL_RUNTIME_CONNECT},
    {"NCCL_SET_STACK_SIZE", &NCCL_SET_STACK_SIZE},
    {"NCCL_SET_THREAD_NAME", &NCCL_SET_THREAD_NAME},
    {"NCCL_SHM_DISABLE", &NCCL_SHM_DISABLE},
    {"NCCL_SHM_LOCALITY", &NCCL_SHM_LOCALITY},
    {"NCCL_SHM_MEMCPY_MODE", &NCCL_SHM_MEMCPY_MODE},
    {"NCCL_SHM_USE_CUDA_MEMCPY", &NCCL_SHM_USE_CUDA_MEMCPY},
    {"NCCL_SINGLE_PROC_MEM_REG_ENABLE", &NCCL_SINGLE_PROC_MEM_REG_ENABLE},
    {"NCCL_SOCKET_NTHREADS", &NCCL_SOCKET_NTHREADS},
    {"NCCL_SOCKET_RETRY_CNT", &NCCL_SOCKET_RETRY_CNT},
    {"NCCL_SOCKET_RETRY_SLEEP_MSEC", &NCCL_SOCKET_RETRY_SLEEP_MSEC},
    {"NCCL_TOPO_DUMP_FILE_RANK", &NCCL_TOPO_DUMP_FILE_RANK},
    {"NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT",
     &NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT},
    {"NCCL_UID_STAGGER_RATE", &NCCL_UID_STAGGER_RATE},
    {"NCCL_UID_STAGGER_THRESHOLD", &NCCL_UID_STAGGER_THRESHOLD},
    {"NCCL_UNPACK_DOUBLE_NCHANNELS", &NCCL_UNPACK_DOUBLE_NCHANNELS},
    {"NCCL_WARN_ENABLE_DEBUG_INFO", &NCCL_WARN_ENABLE_DEBUG_INFO},
    {"NCCL_WORK_ARGS_BYTES", &NCCL_WORK_ARGS_BYTES},
    {"NCCL_WORK_FIFO_BYTES", &NCCL_WORK_FIFO_BYTES},
    {"__NCCL_UNIT_TEST_INT64_T_CVAR__", &__NCCL_UNIT_TEST_INT64_T_CVAR__},
};
std::unordered_map<std::string, int*> env_int_values = {
    {"NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS",
     &NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS},
    {"NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE",
     &NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE},
    {"NCCL_CGA_CLUSTER_SIZE", &NCCL_CGA_CLUSTER_SIZE},
    {"NCCL_COLLNET_ENABLE", &NCCL_COLLNET_ENABLE},
    {"NCCL_COLLSTAT_REPORT_INTERVAL", &NCCL_COLLSTAT_REPORT_INTERVAL},
    {"NCCL_COLLTRACE_PENDING_QUEUE_SIZE", &NCCL_COLLTRACE_PENDING_QUEUE_SIZE},
    {"NCCL_COLLTRACE_RECORD_MAX", &NCCL_COLLTRACE_RECORD_MAX},
    {"NCCL_COLLTRACE_RECORD_MAX_ITERATIONS",
     &NCCL_COLLTRACE_RECORD_MAX_ITERATIONS},
    {"NCCL_COLLTRACE_REPORT_INTERVAL_SEC", &NCCL_COLLTRACE_REPORT_INTERVAL_SEC},
    {"NCCL_COMM_SHRINK_SHARE_RESOURCES", &NCCL_COMM_SHRINK_SHARE_RESOURCES},
    {"NCCL_COMM_SPLIT_SHARE_RESOURCES", &NCCL_COMM_SPLIT_SHARE_RESOURCES},
    {"NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS",
     &NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS},
    {"NCCL_CTRAN_AG_RING_NUM_SPLIT", &NCCL_CTRAN_AG_RING_NUM_SPLIT},
    {"NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT",
     &NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT},
    {"NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE",
     &NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE},
    {"NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS},
    {"NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P",
     &NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P},
    {"NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_CGA_CLUSTER_SIZE", &NCCL_CTRAN_CGA_CLUSTER_SIZE},
    {"NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK",
     &NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK},
    {"NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT",
     &NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT},
    {"NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS",
     &NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS},
    {"NCCL_CTRAN_IB_DEVICES_PER_RANK", &NCCL_CTRAN_IB_DEVICES_PER_RANK},
    {"NCCL_CTRAN_IB_DEVICE_STRIDE", &NCCL_CTRAN_IB_DEVICE_STRIDE},
    {"NCCL_CTRAN_IB_MAX_QPS", &NCCL_CTRAN_IB_MAX_QPS},
    {"NCCL_CTRAN_NUM_CHECKSUMS", &NCCL_CTRAN_NUM_CHECKSUMS},
    {"NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS", &NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS},
    {"NCCL_CTRAN_NUM_KERNEL_ELEMS", &NCCL_CTRAN_NUM_KERNEL_ELEMS},
    {"NCCL_CTRAN_NUM_KERNEL_FLAGS", &NCCL_CTRAN_NUM_KERNEL_FLAGS},
    {"NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE",
     &NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE},
    {"NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE",
     &NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE},
    {"NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE", &NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE},
    {"NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_PROFILING_REPORT_COUNT", &NCCL_CTRAN_PROFILING_REPORT_COUNT},
    {"NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT",
     &NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT},
    {"NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK",
     &NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK},
    {"NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS",
     &NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS},
    {"NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE",
     &NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE},
    {"NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT",
     &NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT},
    {"NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE",
     &NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE},
    {"NCCL_DDA_ALLREDUCE_MAX_BLOCKS", &NCCL_DDA_ALLREDUCE_MAX_BLOCKS},
    {"NCCL_ENV_CTA_POLICY", &NCCL_ENV_CTA_POLICY},
    {"NCCL_IB_DATA_DIRECT", &NCCL_IB_DATA_DIRECT},
    {"NCCL_IB_LINK_DOWN_TIMEOUT", &NCCL_IB_LINK_DOWN_TIMEOUT},
    {"NCCL_MAX_CTAS", &NCCL_MAX_CTAS},
    {"NCCL_MAX_NRINGS", &NCCL_MAX_NRINGS},
    {"NCCL_MIN_CTAS", &NCCL_MIN_CTAS},
    {"NCCL_MIN_NRINGS", &NCCL_MIN_NRINGS},
    {"NCCL_MNNVL_CLIQUE_SIZE", &NCCL_MNNVL_CLIQUE_SIZE},
    {"NCCL_NET_PLUGIN_REF_COUNT", &NCCL_NET_PLUGIN_REF_COUNT},
    {"NCCL_NVLS_NCHANNELS", &NCCL_NVLS_NCHANNELS},
    {"NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES",
     &NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES},
    {"NCCL_PROXYTRACE_RECORD_MAX", &NCCL_PROXYTRACE_RECORD_MAX},
    {"NCCL_SET_CPU_STACK_SIZE", &NCCL_SET_CPU_STACK_SIZE},
    {"NCCL_SLOW_RANK_LOG_NSAMPLES", &NCCL_SLOW_RANK_LOG_NSAMPLES},
    {"NCCL_SLOW_RANK_PERF_WINDOW_SIZE", &NCCL_SLOW_RANK_PERF_WINDOW_SIZE},
    {"NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC",
     &NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC},
    {"NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS",
     &NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS},
    {"NCCL_SLOW_RANK_VARIANCE_PERC", &NCCL_SLOW_RANK_VARIANCE_PERC},
    {"NCCL_SLOW_RANK_WQE_WINDOW_SIZE", &NCCL_SLOW_RANK_WQE_WINDOW_SIZE},
    {"NCCL_SOCKET_INLINE", &NCCL_SOCKET_INLINE},
    {"NCCL_SOCKET_MIN_TASKSIZE", &NCCL_SOCKET_MIN_TASKSIZE},
    {"NCCL_SOCKET_RCVBUF", &NCCL_SOCKET_RCVBUF},
    {"NCCL_SOCKET_SNDBUF", &NCCL_SOCKET_SNDBUF},
    {"NCCL_SOCKET_TOS_CONFIG", &NCCL_SOCKET_TOS_CONFIG},
    {"NCCL_SYM_CTAS", &NCCL_SYM_CTAS},
    {"NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL",
     &NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL},
    {"NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL", &NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL},
    {"NCCL_TCPSTORE_CONNECT_TIMEOUT", &NCCL_TCPSTORE_CONNECT_TIMEOUT},
    {"NCCL_TCPSTORE_IO_TIMEOUT", &NCCL_TCPSTORE_IO_TIMEOUT},
    {"NCCL_WIN_STRIDE", &NCCL_WIN_STRIDE},
    {"__NCCL_UNIT_TEST_INT_CVAR__", &__NCCL_UNIT_TEST_INT_CVAR__},
};
std::unordered_map<std::string, bool*> env_bool_values = {
    {"CUDA_LAUNCH_BLOCKING", &CUDA_LAUNCH_BLOCKING},
    {"NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD",
     &NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD},
    {"NCCL_COLLTRACE_EVENT_BLOCKING_SYNC", &NCCL_COLLTRACE_EVENT_BLOCKING_SYNC},
    {"NCCL_COLLTRACE_TRACE_CUDA_GRAPH", &NCCL_COLLTRACE_TRACE_CUDA_GRAPH},
    {"NCCL_COLLTRACE_USE_NEW_COLLTRACE", &NCCL_COLLTRACE_USE_NEW_COLLTRACE},
    {"NCCL_COMMSMONITOR_ENABLE", &NCCL_COMMSMONITOR_ENABLE},
    {"NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS",
     &NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS},
    {"NCCL_COMM_REGISTER_LOG_ENABLE", &NCCL_COMM_REGISTER_LOG_ENABLE},
    {"NCCL_COMM_TRACING_SERVICE_ENABLE", &NCCL_COMM_TRACING_SERVICE_ENABLE},
    {"NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT",
     &NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT},
    {"NCCL_CTRAN_ABORT_ON_ERROR", &NCCL_CTRAN_ABORT_ON_ERROR},
    {"NCCL_CTRAN_AG_RD_RTR", &NCCL_CTRAN_AG_RD_RTR},
    {"NCCL_CTRAN_ALGO_PROFILING_ENABLE", &NCCL_CTRAN_ALGO_PROFILING_ENABLE},
    {"NCCL_CTRAN_ALLOW_CUDA_GRAPH", &NCCL_CTRAN_ALLOW_CUDA_GRAPH},
    {"NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE",
     &NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE},
    {"NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING",
     &NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING},
    {"NCCL_CTRAN_ENABLE", &NCCL_CTRAN_ENABLE},
    {"NCCL_CTRAN_ENABLE_DEV_TRACE_LOG", &NCCL_CTRAN_ENABLE_DEV_TRACE_LOG},
    {"NCCL_CTRAN_ENABLE_FAULT_TOLERANCE", &NCCL_CTRAN_ENABLE_FAULT_TOLERANCE},
    {"NCCL_CTRAN_ENABLE_PRECONNECT", &NCCL_CTRAN_ENABLE_PRECONNECT},
    {"NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS",
     &NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS},
    {"NCCL_CTRAN_ENABLE_TRACE_LOG", &NCCL_CTRAN_ENABLE_TRACE_LOG},
    {"NCCL_CTRAN_ENABLE_TRACE_LOGGER", &NCCL_CTRAN_ENABLE_TRACE_LOGGER},
    {"NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH",
     &NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH},
    {"NCCL_CTRAN_IB_DMABUF_ENABLE", &NCCL_CTRAN_IB_DMABUF_ENABLE},
    {"NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE", &NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE},
    {"NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK",
     &NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK},
    {"NCCL_CTRAN_NO_ERROR_CHECK", &NCCL_CTRAN_NO_ERROR_CHECK},
    {"NCCL_CTRAN_NVL_FABRIC_ENABLE", &NCCL_CTRAN_NVL_FABRIC_ENABLE},
    {"NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE",
     &NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE},
    {"NCCL_CTRAN_QP_PROFILING_ENABLE", &NCCL_CTRAN_QP_PROFILING_ENABLE},
    {"NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC",
     &NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC},
    {"NCCL_CTRAN_REGISTRATION_SIZE_CHECK", &NCCL_CTRAN_REGISTRATION_SIZE_CHECK},
    {"NCCL_CTRAN_TRANSPORT_PROFILER", &NCCL_CTRAN_TRANSPORT_PROFILER},
    {"NCCL_CVARS_LOG_INFO", &NCCL_CVARS_LOG_INFO},
    {"NCCL_DEBUG_LOGGING_ASYNC", &NCCL_DEBUG_LOGGING_ASYNC},
    {"NCCL_FIRST_COMM_AS_WORLD", &NCCL_FIRST_COMM_AS_WORLD},
    {"NCCL_IGNORE_TOPO_LOAD_FAILURE", &NCCL_IGNORE_TOPO_LOAD_FAILURE},
    {"NCCL_LAUNCH_ORDER_IMPLICIT", &NCCL_LAUNCH_ORDER_IMPLICIT},
    {"NCCL_LAUNCH_RACE_FATAL", &NCCL_LAUNCH_RACE_FATAL},
    {"NCCL_LAZY_SETUP_CHANNELS", &NCCL_LAZY_SETUP_CHANNELS},
    {"NCCL_LL128_C2C", &NCCL_LL128_C2C},
    {"NCCL_MAPPERTRACE_ENABLE", &NCCL_MAPPERTRACE_ENABLE},
    {"NCCL_MEM_ENABLE_MC_ALIGNMENT", &NCCL_MEM_ENABLE_MC_ALIGNMENT},
    {"NCCL_MEM_USE_SLAB_ALLOCATOR", &NCCL_MEM_USE_SLAB_ALLOCATOR},
    {"NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE",
     &NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE},
    {"NCCL_MNNVL_SCATTER_NETS_ENABLE", &NCCL_MNNVL_SCATTER_NETS_ENABLE},
    {"NCCL_MNNVL_TRUNK_DISABLE", &NCCL_MNNVL_TRUNK_DISABLE},
    {"NCCL_NETWORK_PERF_MONITOR_ENABLE", &NCCL_NETWORK_PERF_MONITOR_ENABLE},
    {"NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE",
     &NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE},
    {"NCCL_NET_GDR_C2C", &NCCL_NET_GDR_C2C},
    {"NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE",
     &NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE},
    {"NCCL_NVTX_DISABLE", &NCCL_NVTX_DISABLE},
    {"NCCL_P2P_DISABLE", &NCCL_P2P_DISABLE},
    {"NCCL_PXN_C2C", &NCCL_PXN_C2C},
    {"NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY",
     &NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY},
    {"NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED",
     &NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED},
    {"NCCL_SKIP_TCPFORM_RING", &NCCL_SKIP_TCPFORM_RING},
    {"NCCL_SLOW_RANK_ENABLE", &NCCL_SLOW_RANK_ENABLE},
    {"NCCL_USE_MEM_CACHE", &NCCL_USE_MEM_CACHE},
    {"NCCL_USE_SHARED_BUFFER_POOL", &NCCL_USE_SHARED_BUFFER_POOL},
    {"NCCL_USE_TRANSPORT_EXT", &NCCL_USE_TRANSPORT_EXT},
    {"NCCL_WIN_ENABLE", &NCCL_WIN_ENABLE},
    {"__NCCL_UNIT_TEST_BOOL_CVAR__", &__NCCL_UNIT_TEST_BOOL_CVAR__},
};

static void initEnvSet(std::unordered_set<std::string>& env) {
  env.insert("CUDA_LAUNCH_BLOCKING");
  env.insert("NCCL_ALGO");
  env.insert("NCCL_ALLGATHER_ALGO");
  env.insert("NCCL_ALLGATHER_P_ALGO");
  env.insert("NCCL_ALLOC_P2P_NET_LL_BUFFERS");
  env.insert("NCCL_ALLREDUCE_ALGO");
  env.insert("NCCL_ALLREDUCE_TYPE");
  env.insert("NCCL_ALLTOALLV_ALGO");
  env.insert("NCCL_ALLTOALL_ALGO");
  env.insert("NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS");
  env.insert("NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE");
  env.insert("NCCL_BROADCAST_ALGO");
  env.insert("NCCL_BUFFSIZE");
  env.insert("NCCL_CGA_CLUSTER_SIZE");
  env.insert("NCCL_CHANNEL_METADATA_LOCATION");
  env.insert("NCCL_CHECK_POINTERS");
  env.insert("NCCL_CHUNK_SIZE");
  env.insert("NCCL_CLIENT_SOCKET_IFNAME");
  env.insert("NCCL_COLLNET_ENABLE");
  env.insert("NCCL_COLLNET_NODE_THRESHOLD");
  env.insert("NCCL_COLLSTAT_REPORT_INTERVAL");
  env.insert("NCCL_COLLTRACE");
  env.insert("NCCL_COLLTRACE_CHECK_INTERVAL_MS");
  env.insert("NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD");
  env.insert("NCCL_COLLTRACE_EVENT_BLOCKING_SYNC");
  env.insert("NCCL_COLLTRACE_PENDING_QUEUE_SIZE");
  env.insert("NCCL_COLLTRACE_RECORD_MAX");
  env.insert("NCCL_COLLTRACE_RECORD_MAX_ITERATIONS");
  env.insert("NCCL_COLLTRACE_REPORT_FIRST_N_COLL");
  env.insert("NCCL_COLLTRACE_REPORT_INTERVAL_SEC");
  env.insert("NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG");
  env.insert("NCCL_COLLTRACE_TRACE_CUDA_GRAPH");
  env.insert("NCCL_COLLTRACE_USE_NEW_COLLTRACE");
  env.insert("NCCL_COLLTRACE_WAKEUP_INTERVAL_MS");
  env.insert("NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC");
  env.insert("NCCL_COLL_EVENT_LOGGING");
  env.insert("NCCL_COLL_STATS_LOGGING");
  env.insert("NCCL_COMMSMONITOR_ENABLE");
  env.insert("NCCL_COMMS_TRACING_SERVICE_PORTS");
  env.insert("NCCL_COMM_ABORT_SCOPE");
  env.insert("NCCL_COMM_BLOCKING");
  env.insert("NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS");
  env.insert("NCCL_COMM_EVENT_LOGGING");
  env.insert("NCCL_COMM_ID");
  env.insert("NCCL_COMM_REGISTER_LOG_ENABLE");
  env.insert("NCCL_COMM_SHRINK_SHARE_RESOURCES");
  env.insert("NCCL_COMM_SPLIT_SHARE_RESOURCES");
  env.insert("NCCL_COMM_STATE_DEBUG_TOPO");
  env.insert("NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS");
  env.insert("NCCL_COMM_TRACING_SERVICE_ENABLE");
  env.insert("NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT");
  env.insert("NCCL_CONNECT_ROUND_MAX_PEERS");
  env.insert("NCCL_CREATE_THREAD_CONTEXT");
  env.insert("NCCL_CROSS_NIC");
  env.insert("NCCL_CTRAN_ABORT_ON_ERROR");
  env.insert("NCCL_CTRAN_AG_RD_RTR");
  env.insert("NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE");
  env.insert("NCCL_CTRAN_AG_RING_NUM_SPLIT");
  env.insert("NCCL_CTRAN_ALGO_PROFILING_ENABLE");
  env.insert("NCCL_CTRAN_ALGO_PROFILING_LOGGING");
  env.insert("NCCL_CTRAN_ALGO_PROFILING_OUTPUT");
  env.insert("NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE");
  env.insert("NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT");
  env.insert("NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE");
  env.insert("NCCL_CTRAN_ALLGATHER_MIN_SIZE");
  env.insert("NCCL_CTRAN_ALLOW_CUDA_GRAPH");
  env.insert("NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE");
  env.insert("NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE");
  env.insert("NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE");
  env.insert("NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P");
  env.insert("NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_ALLTOALL_THRESHOLD");
  env.insert("NCCL_CTRAN_BACKENDS");
  env.insert("NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE");
  env.insert("NCCL_CTRAN_CGA_CLUSTER_SIZE");
  env.insert("NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK");
  env.insert("NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE");
  env.insert("NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING");
  env.insert("NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT");
  env.insert("NCCL_CTRAN_ENABLE");
  env.insert("NCCL_CTRAN_ENABLE_DEV_TRACE_LOG");
  env.insert("NCCL_CTRAN_ENABLE_FAULT_TOLERANCE");
  env.insert("NCCL_CTRAN_ENABLE_PRECONNECT");
  env.insert("NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS");
  env.insert("NCCL_CTRAN_ENABLE_TRACE_LOG");
  env.insert("NCCL_CTRAN_ENABLE_TRACE_LOGGER");
  env.insert("NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH");
  env.insert("NCCL_CTRAN_EX_IB_QP_CONFIG");
  env.insert("NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS");
  env.insert("NCCL_CTRAN_IB_CTRL_TC");
  env.insert("NCCL_CTRAN_IB_DEVICES_PER_RANK");
  env.insert("NCCL_CTRAN_IB_DEVICE_STRIDE");
  env.insert("NCCL_CTRAN_IB_DMABUF_ENABLE");
  env.insert("NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE");
  env.insert("NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK");
  env.insert("NCCL_CTRAN_IB_MAX_QPS");
  env.insert("NCCL_CTRAN_IB_PG_TRAFFIC_CLASS");
  env.insert("NCCL_CTRAN_IB_QP_CONFIG_ALGO");
  env.insert("NCCL_CTRAN_IB_QP_CONFIG_XDC");
  env.insert("NCCL_CTRAN_IB_QP_CONFIG_XRACK");
  env.insert("NCCL_CTRAN_IB_QP_CONFIG_XZONE");
  env.insert("NCCL_CTRAN_IB_QP_MAX_MSGS");
  env.insert("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD");
  env.insert("NCCL_CTRAN_IB_VC_MODE");
  env.insert("NCCL_CTRAN_INTERNODE_TMPBUF_SIZE");
  env.insert("NCCL_CTRAN_KINETO_PROFILE_DIR");
  env.insert("NCCL_CTRAN_NO_ERROR_CHECK");
  env.insert("NCCL_CTRAN_NUM_CHECKSUMS");
  env.insert("NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS");
  env.insert("NCCL_CTRAN_NUM_KERNEL_ELEMS");
  env.insert("NCCL_CTRAN_NUM_KERNEL_FLAGS");
  env.insert("NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE");
  env.insert("NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE");
  env.insert("NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_NVL_FABRIC_ENABLE");
  env.insert("NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE");
  env.insert("NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE");
  env.insert("NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE");
  env.insert("NCCL_CTRAN_PROFILING");
  env.insert("NCCL_CTRAN_PROFILING_REPORT_COUNT");
  env.insert("NCCL_CTRAN_QP_PROFILING_ENABLE");
  env.insert("NCCL_CTRAN_QP_PROFILING_OUTPUT");
  env.insert("NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT");
  env.insert("NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE");
  env.insert("NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK");
  env.insert("NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_REGISTER");
  env.insert("NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC");
  env.insert("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT");
  env.insert("NCCL_CTRAN_REGISTRATION_SIZE_CHECK");
  env.insert("NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE");
  env.insert("NCCL_CTRAN_SOCKET_POLL_TIMEOUT");
  env.insert("NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR");
  env.insert("NCCL_CTRAN_TRANSPORT_PROFILER");
  env.insert("NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS");
  env.insert("NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE");
  env.insert("NCCL_CTRAN_WIN_SIGNAL_SIZE");
  env.insert("NCCL_CUMEM_ENABLE");
  env.insert("NCCL_CUMEM_HOST_ENABLE");
  env.insert("NCCL_CVARS_LOG_INFO");
  env.insert("NCCL_DDA_ALLREDUCE_MAX_BLOCKS");
  env.insert("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD");
  env.insert("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD");
  env.insert("NCCL_DDA_TMPBUFF_SIZE");
  env.insert("NCCL_DEBUG");
  env.insert("NCCL_DEBUG_FILE");
  env.insert("NCCL_DEBUG_LOGGING_ASYNC");
  env.insert("NCCL_DEBUG_SUBSYS");
  env.insert("NCCL_DEBUG_TIMESTAMP_FORMAT");
  env.insert("NCCL_DEBUG_TIMESTAMP_LEVELS");
  env.insert("NCCL_DMABUF_ENABLE");
  env.insert("NCCL_ENV_CTA_POLICY");
  env.insert("NCCL_FASTINIT_MODE");
  env.insert("NCCL_FILTER_ALGO_LOGGING_BY_RANKS");
  env.insert("NCCL_FILTER_MEM_LOGGING_BY_RANKS");
  env.insert("NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS");
  env.insert("NCCL_FIRST_COMM_AS_WORLD");
  env.insert("NCCL_GDRCOPY_ENABLE");
  env.insert("NCCL_GDRCOPY_FIFO_ENABLE");
  env.insert("NCCL_GDRCOPY_FLUSH_ENABLE");
  env.insert("NCCL_GDRCOPY_SYNC_ENABLE");
  env.insert("NCCL_GDR_FLUSH_DISABLE");
  env.insert("NCCL_GRAPH_DUMP_FILE");
  env.insert("NCCL_GRAPH_DUMP_FILE_RANK");
  env.insert("NCCL_GRAPH_FILE");
  env.insert("NCCL_GRAPH_HELPER_DISABLE");
  env.insert("NCCL_GRAPH_MIXING_SUPPORT");
  env.insert("NCCL_GRAPH_REGISTER");
  env.insert("NCCL_GROUP_CUDA_STREAM");
  env.insert("NCCL_HOSTID");
  env.insert("NCCL_HPC_JOB_IDS");
  env.insert("NCCL_IBVERBS_PATH");
  env.insert("NCCL_IB_ADAPTIVE_ROUTING");
  env.insert("NCCL_IB_ADDR_FAMILY");
  env.insert("NCCL_IB_ADDR_RANGE");
  env.insert("NCCL_IB_AR_THRESHOLD");
  env.insert("NCCL_IB_ASYNC_EVENT_LOOP");
  env.insert("NCCL_IB_DATA_DIRECT");
  env.insert("NCCL_IB_DISABLE");
  env.insert("NCCL_IB_ECE_ENABLE");
  env.insert("NCCL_IB_FIFO_TC");
  env.insert("NCCL_IB_GID_INDEX");
  env.insert("NCCL_IB_HCA");
  env.insert("NCCL_IB_LINK_DOWN_TIMEOUT");
  env.insert("NCCL_IB_MERGE_NICS");
  env.insert("NCCL_IB_MERGE_VFS");
  env.insert("NCCL_IB_MQP_RETRY_ALL");
  env.insert("NCCL_IB_MQP_RETRY_CNT");
  env.insert("NCCL_IB_MQP_RETRY_SLEEP_MSEC");
  env.insert("NCCL_IB_PCI_RELAXED_ORDERING");
  env.insert("NCCL_IB_PKEY");
  env.insert("NCCL_IB_QPS_PER_CONNECTION");
  env.insert("NCCL_IB_RETRY_CNT");
  env.insert("NCCL_IB_RETURN_ASYNC_EVENTS");
  env.insert("NCCL_IB_ROCE_VERSION_NUM");
  env.insert("NCCL_IB_ROUTABLE_FLID_GID_INDEX");
  env.insert("NCCL_IB_SL");
  env.insert("NCCL_IB_SPLIT_DATA_ON_QPS");
  env.insert("NCCL_IB_TC");
  env.insert("NCCL_IB_TIMEOUT");
  env.insert("NCCL_IB_USE_INLINE");
  env.insert("NCCL_IB_WARN_RAIL_LOCAL");
  env.insert("NCCL_IGNORE_CPU_AFFINITY");
  env.insert("NCCL_IGNORE_DISABLED_P2P");
  env.insert("NCCL_IGNORE_TOPO_LOAD_FAILURE");
  env.insert("NCCL_L1_SHARED_MEMORY_CARVEOUT");
  env.insert("NCCL_LAUNCH_MODE");
  env.insert("NCCL_LAUNCH_ORDER_IMPLICIT");
  env.insert("NCCL_LAUNCH_RACE_FATAL");
  env.insert("NCCL_LAZY_SETUP_CHANNELS");
  env.insert("NCCL_LEGACY_CUDA_REGISTER");
  env.insert("NCCL_LL128_BUFFSIZE");
  env.insert("NCCL_LL128_C2C");
  env.insert("NCCL_LL128_NTHREADS");
  env.insert("NCCL_LL_BUFFSIZE");
  env.insert("NCCL_LOCAL_REGISTER");
  env.insert("NCCL_MAPPERTRACE_COLL_RECORD_MAX");
  env.insert("NCCL_MAPPERTRACE_ENABLE");
  env.insert("NCCL_MAPPERTRACE_EVENT_RECORD_MAX");
  env.insert("MASTER_ADDR");
  env.insert("MASTER_PORT");
  env.insert("NCCL_MAX_CTAS");
  env.insert("NCCL_MAX_NCHANNELS");
  env.insert("NCCL_MAX_NRINGS");
  env.insert("NCCL_MAX_P2P_NCHANNELS");
  env.insert("NCCL_MEMORY_EVENT_LOGGING");
  env.insert("NCCL_MEM_ENABLE_MC_ALIGNMENT");
  env.insert("NCCL_MEM_POOL_SIZE");
  env.insert("NCCL_MEM_SYNC_DOMAIN");
  env.insert("NCCL_MEM_USE_SLAB_ALLOCATOR");
  env.insert("NCCL_MIN_CTAS");
  env.insert("NCCL_MIN_NCHANNELS");
  env.insert("NCCL_MIN_NRINGS");
  env.insert("NCCL_MIN_P2P_NCHANNELS");
  env.insert("NCCL_MNNVL_CLIQUE_ID");
  env.insert("NCCL_MNNVL_CLIQUE_SIZE");
  env.insert("NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE");
  env.insert("NCCL_MNNVL_ENABLE");
  env.insert("NCCL_MNNVL_SCATTER_NETS_ENABLE");
  env.insert("NCCL_MNNVL_TRUNK_DISABLE");
  env.insert("NCCL_MNNVL_UUID");
  env.insert("NCCL_NCHANNELS_PER_NET_PEER");
  env.insert("NCCL_NETDEVS_POLICY");
  env.insert("NCCL_NET");
  env.insert("NCCL_NETWORK_PERF_MONITOR_ENABLE");
  env.insert("NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE");
  env.insert("NCCL_NET_DISABLE_INTRA");
  env.insert("NCCL_NET_FORCE_FLUSH");
  env.insert("NCCL_NET_FORCE_MERGE");
  env.insert("NCCL_NET_GDR_C2C");
  env.insert("NCCL_NET_GDR_LEVEL");
  env.insert("NCCL_NET_GDR_READ");
  env.insert("NCCL_NET_MERGE_LEVEL");
  env.insert("NCCL_NET_OPTIONAL_RECV_COMPLETION");
  env.insert("NCCL_NET_OVERHEAD");
  env.insert("NCCL_NET_PLUGIN");
  env.insert("NCCL_NET_PLUGIN_REF_COUNT");
  env.insert("NCCL_NET_SHARED_BUFFERS");
  env.insert("NCCL_NET_SHARED_COMMS");
  env.insert("NCCL_NSOCKS_PERTHREAD");
  env.insert("NCCL_NTHREADS");
  env.insert("NCCL_NVB_DISABLE");
  env.insert("NCCL_NVB_PRECONNECT");
  env.insert("NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE");
  env.insert("NCCL_NVLSTREE_MAX_CHUNKSIZE");
  env.insert("NCCL_NVLS_CHUNKSIZE");
  env.insert("NCCL_NVLS_ENABLE");
  env.insert("NCCL_NVLS_NCHANNELS");
  env.insert("NCCL_NVTX_DISABLE");
  env.insert("NCCL_OOB_NET_ENABLE");
  env.insert("NCCL_OOB_NET_IFNAME");
  env.insert("NCCL_P2P_DIRECT_DISABLE");
  env.insert("NCCL_P2P_DISABLE");
  env.insert("NCCL_P2P_LEVEL");
  env.insert("NCCL_P2P_LL_THRESHOLD");
  env.insert("NCCL_P2P_NET_CHUNKSIZE");
  env.insert("NCCL_P2P_NVL_CHUNKSIZE");
  env.insert("NCCL_P2P_PCI_CHUNKSIZE");
  env.insert("NCCL_P2P_PXN_LEVEL");
  env.insert("NCCL_P2P_READ_ENABLE");
  env.insert("NCCL_P2P_USE_CUDA_MEMCPY");
  env.insert("NCCL_PAT_ENABLE");
  env.insert("NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES");
  env.insert("NCCL_PROFILER_PLUGIN");
  env.insert("NCCL_PROGRESS_APPENDOP_FREQ");
  env.insert("NCCL_PROTO");
  env.insert("NCCL_PROXYMOCK_NET_SEND_FAILURE");
  env.insert("NCCL_PROXYTRACE");
  env.insert("NCCL_PROXYTRACE_RECORD_MAX");
  env.insert("NCCL_PROXY_APPEND_BATCH_SIZE");
  env.insert("NCCL_PROXY_CPUSET");
  env.insert("NCCL_PROXY_DUMP_SIGNAL");
  env.insert("NCCL_PXN_C2C");
  env.insert("NCCL_PXN_DISABLE");
  env.insert("NCCL_RAS_ADDR");
  env.insert("NCCL_RAS_ENABLE");
  env.insert("NCCL_RAS_TIMEOUT_FACTOR");
  env.insert("NCCL_REDUCESCATTER_ALGO");
  env.insert("NCCL_REPORT_CONNECT_PROGRESS");
  env.insert("NCCL_RUNTIME_CONNECT");
  env.insert("NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY");
  env.insert("NCCL_SCUBA_LOG_FILE_PREFIX");
  env.insert("NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED");
  env.insert("NCCL_SENDRECV_ALGO");
  env.insert("NCCL_SET_CPU_STACK_SIZE");
  env.insert("NCCL_SET_STACK_SIZE");
  env.insert("NCCL_SET_THREAD_NAME");
  env.insert("NCCL_SHM_DISABLE");
  env.insert("NCCL_SHM_LOCALITY");
  env.insert("NCCL_SHM_MEMCPY_MODE");
  env.insert("NCCL_SHM_USE_CUDA_MEMCPY");
  env.insert("NCCL_SINGLE_PROC_MEM_REG_ENABLE");
  env.insert("NCCL_SKIP_TCPFORM_RING");
  env.insert("NCCL_SLOW_COLL_LOGGING");
  env.insert("NCCL_SLOW_RANK_ENABLE");
  env.insert("NCCL_SLOW_RANK_LOGGING");
  env.insert("NCCL_SLOW_RANK_LOG_NSAMPLES");
  env.insert("NCCL_SLOW_RANK_PERF_WINDOW_SIZE");
  env.insert("NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC");
  env.insert("NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS");
  env.insert("NCCL_SLOW_RANK_VARIANCE_PERC");
  env.insert("NCCL_SLOW_RANK_WQE_WINDOW_SIZE");
  env.insert("NCCL_SOCKET_FAMILY");
  env.insert("NCCL_SOCKET_IFNAME");
  env.insert("NCCL_SOCKET_INLINE");
  env.insert("NCCL_SOCKET_IPADDR_PREFIX");
  env.insert("NCCL_SOCKET_MIN_TASKSIZE");
  env.insert("NCCL_SOCKET_NTHREADS");
  env.insert("NCCL_SOCKET_RCVBUF");
  env.insert("NCCL_SOCKET_RETRY_CNT");
  env.insert("NCCL_SOCKET_RETRY_SLEEP_MSEC");
  env.insert("NCCL_SOCKET_SNDBUF");
  env.insert("NCCL_SOCKET_TOS_CONFIG");
  env.insert("NCCL_SYM_CTAS");
  env.insert("NCCL_SYM_KERNEL");
  env.insert("NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL");
  env.insert("NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL");
  env.insert("NCCL_TCPSTORE_BACKOFF_MULTIPLIER");
  env.insert("NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR");
  env.insert("NCCL_TCPSTORE_CONNECT_TIMEOUT");
  env.insert("NCCL_TCPSTORE_IO_TIMEOUT");
  env.insert("NCCL_THREAD_THRESHOLDS");
  env.insert("NCCL_TOPO_DUMP_FILE");
  env.insert("NCCL_TOPO_DUMP_FILE_RANK");
  env.insert("NCCL_TOPO_FILE");
  env.insert("NCCL_TOPO_FILE_PATH");
  env.insert("NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT");
  env.insert("NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT");
  env.insert("NCCL_TUNER_PLUGIN");
  env.insert("NCCL_UID_STAGGER_RATE");
  env.insert("NCCL_UID_STAGGER_THRESHOLD");
  env.insert("NCCL_UNPACK_DOUBLE_NCHANNELS");
  env.insert("NCCL_USE_MEM_CACHE");
  env.insert("NCCL_USE_SHARED_BUFFER_POOL");
  env.insert("NCCL_USE_TRANSPORT_EXT");
  env.insert("NCCL_USE_TRANSPORT_PROXY");
  env.insert("NCCL_WARN_ENABLE_DEBUG_INFO");
  env.insert("NCCL_WIN_ENABLE");
  env.insert("NCCL_WIN_STRIDE");
  env.insert("NCCL_WORK_ARGS_BYTES");
  env.insert("NCCL_WORK_FIFO_BYTES");
  env.insert("__NCCL_UNIT_TEST_STRING_CVAR__");
  env.insert("__NCCL_UNIT_TEST_BOOL_CVAR__");
  env.insert("__NCCL_UNIT_TEST_INT_CVAR__");
  env.insert("__NCCL_UNIT_TEST_INT64_T_CVAR__");
  env.insert("__NCCL_UNIT_TEST_UINT16_T_CVAR__");
  env.insert("__NCCL_UNIT_TEST_SIZE_T_CVAR__");
  env.insert("__NCCL_UNIT_TEST_DOUBLE_CVAR__");
}

static void validateCvarEnv() {
  if (NCCL_SOCKET_IFNAME.find("beth") !=
      NCCL_CLIENT_SOCKET_IFNAME.find("beth")) {
    CVAR_ERROR(
        "CVAR incompatible: NCCL_SOCKET_IFNAME({}) vs NCCL_CLIENT_SOCKET_IFNAME({})",
        NCCL_SOCKET_IFNAME,
        NCCL_CLIENT_SOCKET_IFNAME);
  }
}

static void readCvarEnv() {
  CUDA_LAUNCH_BLOCKING = env2bool("CUDA_LAUNCH_BLOCKING", "False");
  CUDA_LAUNCH_BLOCKING_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (CUDA_LAUNCH_BLOCKING_DEFAULT != CUDA_LAUNCH_BLOCKING) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "CUDA_LAUNCH_BLOCKING");
  }
  NCCL_ALGO = env2str("NCCL_ALGO", "");
  NCCL_ALGO_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_ALGO_DEFAULT != NCCL_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALGO");
  }
  if (getenv("NCCL_ALLGATHER_ALGO") == nullptr) {
    NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_ALLGATHER_ALGO"));
    if (str == std::string("orig")) {
      NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::orig;
    } else if (str == std::string("ctran")) {
      NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::ctran;
    } else if (str == std::string("ctdirect")) {
      NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::ctdirect;
    } else if (str == std::string("ctring")) {
      NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::ctring;
    } else if (str == std::string("ctrd")) {
      NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::ctrd;
    } else if (str == std::string("ctbrucks")) {
      NCCL_ALLGATHER_ALGO = NCCL_ALLGATHER_ALGO::ctbrucks;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_ALLGATHER_ALGO", str.c_str());
    }
  }
  NCCL_ALLGATHER_ALGO_DEFAULT = NCCL_ALLGATHER_ALGO::orig;

  if (NCCL_ALLGATHER_ALGO_DEFAULT != NCCL_ALLGATHER_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALLGATHER_ALGO");
  }
  if (getenv("NCCL_ALLGATHER_P_ALGO") == nullptr) {
    NCCL_ALLGATHER_P_ALGO = NCCL_ALLGATHER_P_ALGO::ctpipeline;
  } else {
    std::string str(getenv("NCCL_ALLGATHER_P_ALGO"));
    if (str == std::string("ctdirect")) {
      NCCL_ALLGATHER_P_ALGO = NCCL_ALLGATHER_P_ALGO::ctdirect;
    } else if (str == std::string("ctpipeline")) {
      NCCL_ALLGATHER_P_ALGO = NCCL_ALLGATHER_P_ALGO::ctpipeline;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_ALLGATHER_P_ALGO", str.c_str());
    }
  }
  NCCL_ALLGATHER_P_ALGO_DEFAULT = NCCL_ALLGATHER_P_ALGO::ctpipeline;

  if (NCCL_ALLGATHER_P_ALGO_DEFAULT != NCCL_ALLGATHER_P_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALLGATHER_P_ALGO");
  }
  NCCL_ALLOC_P2P_NET_LL_BUFFERS =
      env2num<int64_t>("NCCL_ALLOC_P2P_NET_LL_BUFFERS", "0");
  NCCL_ALLOC_P2P_NET_LL_BUFFERS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_ALLOC_P2P_NET_LL_BUFFERS_DEFAULT != NCCL_ALLOC_P2P_NET_LL_BUFFERS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_ALLOC_P2P_NET_LL_BUFFERS");
  }
  if (getenv("NCCL_ALLREDUCE_ALGO") == nullptr) {
    NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_ALLREDUCE_ALGO"));
    if (str == std::string("orig")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::orig;
    } else if (str == std::string("dda")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::dda;
    } else if (str == std::string("ctran")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::ctran;
    } else if (str == std::string("ctdirect")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::ctdirect;
    } else if (str == std::string("ctarg")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::ctarg;
    } else if (str == std::string("ctring")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::ctring;
    } else if (str == std::string("ctmring")) {
      NCCL_ALLREDUCE_ALGO = NCCL_ALLREDUCE_ALGO::ctmring;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_ALLREDUCE_ALGO", str.c_str());
    }
  }
  NCCL_ALLREDUCE_ALGO_DEFAULT = NCCL_ALLREDUCE_ALGO::orig;

  if (NCCL_ALLREDUCE_ALGO_DEFAULT != NCCL_ALLREDUCE_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALLREDUCE_ALGO");
  }
  if (getenv("NCCL_ALLREDUCE_TYPE") == nullptr) {
    NCCL_ALLREDUCE_TYPE = NCCL_ALLREDUCE_TYPE::orig;
  } else {
    std::string str(getenv("NCCL_ALLREDUCE_TYPE"));
    if (str == std::string("orig")) {
      NCCL_ALLREDUCE_TYPE = NCCL_ALLREDUCE_TYPE::orig;
    } else if (str == std::string("ncclFloat32")) {
      NCCL_ALLREDUCE_TYPE = NCCL_ALLREDUCE_TYPE::ncclFloat32;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_ALLREDUCE_TYPE", str.c_str());
    }
  }
  NCCL_ALLREDUCE_TYPE_DEFAULT = NCCL_ALLREDUCE_TYPE::orig;

  if (NCCL_ALLREDUCE_TYPE_DEFAULT != NCCL_ALLREDUCE_TYPE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALLREDUCE_TYPE");
  }
  if (getenv("NCCL_ALLTOALLV_ALGO") == nullptr) {
    NCCL_ALLTOALLV_ALGO = NCCL_ALLTOALLV_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_ALLTOALLV_ALGO"));
    if (str == std::string("orig")) {
      NCCL_ALLTOALLV_ALGO = NCCL_ALLTOALLV_ALGO::orig;
    } else if (str == std::string("ctran")) {
      NCCL_ALLTOALLV_ALGO = NCCL_ALLTOALLV_ALGO::ctran;
    } else if (str == std::string("compCtran")) {
      NCCL_ALLTOALLV_ALGO = NCCL_ALLTOALLV_ALGO::compCtran;
    } else if (str == std::string("bsCompCtran")) {
      NCCL_ALLTOALLV_ALGO = NCCL_ALLTOALLV_ALGO::bsCompCtran;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_ALLTOALLV_ALGO", str.c_str());
    }
  }
  NCCL_ALLTOALLV_ALGO_DEFAULT = NCCL_ALLTOALLV_ALGO::orig;

  if (NCCL_ALLTOALLV_ALGO_DEFAULT != NCCL_ALLTOALLV_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALLTOALLV_ALGO");
  }
  if (getenv("NCCL_ALLTOALL_ALGO") == nullptr) {
    NCCL_ALLTOALL_ALGO = NCCL_ALLTOALL_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_ALLTOALL_ALGO"));
    if (str == std::string("orig")) {
      NCCL_ALLTOALL_ALGO = NCCL_ALLTOALL_ALGO::orig;
    } else if (str == std::string("ctran")) {
      NCCL_ALLTOALL_ALGO = NCCL_ALLTOALL_ALGO::ctran;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_ALLTOALL_ALGO", str.c_str());
    }
  }
  NCCL_ALLTOALL_ALGO_DEFAULT = NCCL_ALLTOALL_ALGO::orig;

  if (NCCL_ALLTOALL_ALGO_DEFAULT != NCCL_ALLTOALL_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ALLTOALL_ALGO");
  }
  NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS", "-1");
  NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_ALL_REDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS");
  }
  NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE", "-1");
  NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_ALL_REDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE");
  }
  if (getenv("NCCL_BROADCAST_ALGO") == nullptr) {
    NCCL_BROADCAST_ALGO = NCCL_BROADCAST_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_BROADCAST_ALGO"));
    if (str == std::string("orig")) {
      NCCL_BROADCAST_ALGO = NCCL_BROADCAST_ALGO::orig;
    } else if (str == std::string("ctran")) {
      NCCL_BROADCAST_ALGO = NCCL_BROADCAST_ALGO::ctran;
    } else if (str == std::string("ctdirect")) {
      NCCL_BROADCAST_ALGO = NCCL_BROADCAST_ALGO::ctdirect;
    } else if (str == std::string("ctbtree")) {
      NCCL_BROADCAST_ALGO = NCCL_BROADCAST_ALGO::ctbtree;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_BROADCAST_ALGO", str.c_str());
    }
  }
  NCCL_BROADCAST_ALGO_DEFAULT = NCCL_BROADCAST_ALGO::orig;

  if (NCCL_BROADCAST_ALGO_DEFAULT != NCCL_BROADCAST_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_BROADCAST_ALGO");
  }
  NCCL_BUFFSIZE = env2num<int64_t>("NCCL_BUFFSIZE", "-2");
  NCCL_BUFFSIZE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_BUFFSIZE_DEFAULT != NCCL_BUFFSIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_BUFFSIZE");
  }
  NCCL_CGA_CLUSTER_SIZE = env2num<int>("NCCL_CGA_CLUSTER_SIZE", "MIN");
  NCCL_CGA_CLUSTER_SIZE_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_CGA_CLUSTER_SIZE_DEFAULT != NCCL_CGA_CLUSTER_SIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CGA_CLUSTER_SIZE");
  }
  if (getenv("NCCL_CHANNEL_METADATA_LOCATION") == nullptr) {
    NCCL_CHANNEL_METADATA_LOCATION = NCCL_CHANNEL_METADATA_LOCATION::unset;
  } else {
    std::string str(getenv("NCCL_CHANNEL_METADATA_LOCATION"));
    if (str == std::string("unset")) {
      NCCL_CHANNEL_METADATA_LOCATION = NCCL_CHANNEL_METADATA_LOCATION::unset;
    } else if (str == std::string("host")) {
      NCCL_CHANNEL_METADATA_LOCATION = NCCL_CHANNEL_METADATA_LOCATION::host;
    } else if (str == std::string("device")) {
      NCCL_CHANNEL_METADATA_LOCATION = NCCL_CHANNEL_METADATA_LOCATION::device;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_CHANNEL_METADATA_LOCATION", str.c_str());
    }
  }
  NCCL_CHANNEL_METADATA_LOCATION_DEFAULT =
      NCCL_CHANNEL_METADATA_LOCATION::unset;

  if (NCCL_CHANNEL_METADATA_LOCATION_DEFAULT !=
      NCCL_CHANNEL_METADATA_LOCATION) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CHANNEL_METADATA_LOCATION");
  }
  NCCL_CHECK_POINTERS = env2num<int64_t>("NCCL_CHECK_POINTERS", "0");
  NCCL_CHECK_POINTERS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_CHECK_POINTERS_DEFAULT != NCCL_CHECK_POINTERS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CHECK_POINTERS");
  }
  NCCL_CHUNK_SIZE = env2num<int64_t>("NCCL_CHUNK_SIZE", "0");
  NCCL_CHUNK_SIZE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_CHUNK_SIZE_DEFAULT != NCCL_CHUNK_SIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CHUNK_SIZE");
  }
  NCCL_CLIENT_SOCKET_IFNAME = env2str("NCCL_CLIENT_SOCKET_IFNAME", "");
  NCCL_CLIENT_SOCKET_IFNAME_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_CLIENT_SOCKET_IFNAME_DEFAULT != NCCL_CLIENT_SOCKET_IFNAME) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CLIENT_SOCKET_IFNAME");
  }
  NCCL_COLLNET_ENABLE = env2num<int>("NCCL_COLLNET_ENABLE", "0");
  NCCL_COLLNET_ENABLE_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_COLLNET_ENABLE_DEFAULT != NCCL_COLLNET_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_COLLNET_ENABLE");
  }
  NCCL_COLLNET_NODE_THRESHOLD =
      env2num<int64_t>("NCCL_COLLNET_NODE_THRESHOLD", "2");
  NCCL_COLLNET_NODE_THRESHOLD_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_COLLNET_NODE_THRESHOLD_DEFAULT != NCCL_COLLNET_NODE_THRESHOLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COLLNET_NODE_THRESHOLD");
  }
  NCCL_COLLSTAT_REPORT_INTERVAL =
      env2num<int>("NCCL_COLLSTAT_REPORT_INTERVAL", "0");
  NCCL_COLLSTAT_REPORT_INTERVAL_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_COLLSTAT_REPORT_INTERVAL_DEFAULT != NCCL_COLLSTAT_REPORT_INTERVAL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLSTAT_REPORT_INTERVAL");
  }
  NCCL_COLLTRACE.clear();
  NCCL_COLLTRACE = env2strlist("NCCL_COLLTRACE", "");
  NCCL_COLLTRACE_DEFAULT.clear();
  NCCL_COLLTRACE_DEFAULT = env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_COLLTRACE_DEFAULT != NCCL_COLLTRACE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_COLLTRACE");
  }
  NCCL_COLLTRACE_CHECK_INTERVAL_MS =
      env2num<int64_t>("NCCL_COLLTRACE_CHECK_INTERVAL_MS", "10");
  NCCL_COLLTRACE_CHECK_INTERVAL_MS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "10");

  if (NCCL_COLLTRACE_CHECK_INTERVAL_MS_DEFAULT !=
      NCCL_COLLTRACE_CHECK_INTERVAL_MS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_CHECK_INTERVAL_MS");
  }
  NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD =
      env2bool("NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD", "True");
  NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD_DEFAULT !=
      NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_CTRAN_USE_CPU_RECORD");
  }
  NCCL_COLLTRACE_EVENT_BLOCKING_SYNC =
      env2bool("NCCL_COLLTRACE_EVENT_BLOCKING_SYNC", "False");
  NCCL_COLLTRACE_EVENT_BLOCKING_SYNC_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COLLTRACE_EVENT_BLOCKING_SYNC_DEFAULT !=
      NCCL_COLLTRACE_EVENT_BLOCKING_SYNC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_EVENT_BLOCKING_SYNC");
  }
  NCCL_COLLTRACE_PENDING_QUEUE_SIZE =
      env2num<int>("NCCL_COLLTRACE_PENDING_QUEUE_SIZE", "4096");
  NCCL_COLLTRACE_PENDING_QUEUE_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "4096");

  if (NCCL_COLLTRACE_PENDING_QUEUE_SIZE_DEFAULT !=
      NCCL_COLLTRACE_PENDING_QUEUE_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_PENDING_QUEUE_SIZE");
  }
  NCCL_COLLTRACE_RECORD_MAX = env2num<int>("NCCL_COLLTRACE_RECORD_MAX", "20");
  NCCL_COLLTRACE_RECORD_MAX_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_COLLTRACE_RECORD_MAX_DEFAULT != NCCL_COLLTRACE_RECORD_MAX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COLLTRACE_RECORD_MAX");
  }
  NCCL_COLLTRACE_RECORD_MAX_ITERATIONS =
      env2num<int>("NCCL_COLLTRACE_RECORD_MAX_ITERATIONS", "2");
  NCCL_COLLTRACE_RECORD_MAX_ITERATIONS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_COLLTRACE_RECORD_MAX_ITERATIONS_DEFAULT !=
      NCCL_COLLTRACE_RECORD_MAX_ITERATIONS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_RECORD_MAX_ITERATIONS");
  }
  NCCL_COLLTRACE_REPORT_FIRST_N_COLL =
      env2num<int64_t>("NCCL_COLLTRACE_REPORT_FIRST_N_COLL", "10");
  NCCL_COLLTRACE_REPORT_FIRST_N_COLL_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "10");

  if (NCCL_COLLTRACE_REPORT_FIRST_N_COLL_DEFAULT !=
      NCCL_COLLTRACE_REPORT_FIRST_N_COLL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_REPORT_FIRST_N_COLL");
  }
  NCCL_COLLTRACE_REPORT_INTERVAL_SEC =
      env2num<int>("NCCL_COLLTRACE_REPORT_INTERVAL_SEC", "0");
  NCCL_COLLTRACE_REPORT_INTERVAL_SEC_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_COLLTRACE_REPORT_INTERVAL_SEC_DEFAULT !=
      NCCL_COLLTRACE_REPORT_INTERVAL_SEC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_REPORT_INTERVAL_SEC");
  }
  NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG.clear();
  NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG =
      env2strlist("NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG", "");
  NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG_DEFAULT.clear();
  NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG_DEFAULT !=
      NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_SLOW_COLL_THRESHOLD_BY_PG");
  }
  NCCL_COLLTRACE_TRACE_CUDA_GRAPH =
      env2bool("NCCL_COLLTRACE_TRACE_CUDA_GRAPH", "False");
  NCCL_COLLTRACE_TRACE_CUDA_GRAPH_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COLLTRACE_TRACE_CUDA_GRAPH_DEFAULT !=
      NCCL_COLLTRACE_TRACE_CUDA_GRAPH) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_TRACE_CUDA_GRAPH");
  }
  NCCL_COLLTRACE_USE_NEW_COLLTRACE =
      env2bool("NCCL_COLLTRACE_USE_NEW_COLLTRACE", "False");
  NCCL_COLLTRACE_USE_NEW_COLLTRACE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COLLTRACE_USE_NEW_COLLTRACE_DEFAULT !=
      NCCL_COLLTRACE_USE_NEW_COLLTRACE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_USE_NEW_COLLTRACE");
  }
  NCCL_COLLTRACE_WAKEUP_INTERVAL_MS =
      env2num<int64_t>("NCCL_COLLTRACE_WAKEUP_INTERVAL_MS", "1000");
  NCCL_COLLTRACE_WAKEUP_INTERVAL_MS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1000");

  if (NCCL_COLLTRACE_WAKEUP_INTERVAL_MS_DEFAULT !=
      NCCL_COLLTRACE_WAKEUP_INTERVAL_MS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_WAKEUP_INTERVAL_MS");
  }
  NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC =
      env2num<int64_t>("NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC", "600");
  NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "600");

  if (NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC_DEFAULT !=
      NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COLLTRACE_WATCHDOG_DEFAULT_TIMEOUT_SEC");
  }
  NCCL_COLL_EVENT_LOGGING = env2str("NCCL_COLL_EVENT_LOGGING", "");
  NCCL_COLL_EVENT_LOGGING_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_COLL_EVENT_LOGGING_DEFAULT != NCCL_COLL_EVENT_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COLL_EVENT_LOGGING");
  }
  NCCL_COLL_STATS_LOGGING =
      env2str("NCCL_COLL_STATS_LOGGING", "pipe:nccl_collective_stats");
  NCCL_COLL_STATS_LOGGING_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "pipe:nccl_collective_stats");

  if (NCCL_COLL_STATS_LOGGING_DEFAULT != NCCL_COLL_STATS_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COLL_STATS_LOGGING");
  }
  NCCL_COMMSMONITOR_ENABLE = env2bool("NCCL_COMMSMONITOR_ENABLE", "False");
  NCCL_COMMSMONITOR_ENABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COMMSMONITOR_ENABLE_DEFAULT != NCCL_COMMSMONITOR_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COMMSMONITOR_ENABLE");
  }
  NCCL_COMMS_TRACING_SERVICE_PORTS.clear();
  NCCL_COMMS_TRACING_SERVICE_PORTS =
      env2strlist("NCCL_COMMS_TRACING_SERVICE_PORTS", "");
  NCCL_COMMS_TRACING_SERVICE_PORTS_DEFAULT.clear();
  NCCL_COMMS_TRACING_SERVICE_PORTS_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_COMMS_TRACING_SERVICE_PORTS_DEFAULT !=
      NCCL_COMMS_TRACING_SERVICE_PORTS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMMS_TRACING_SERVICE_PORTS");
  }
  if (getenv("NCCL_COMM_ABORT_SCOPE") == nullptr) {
    NCCL_COMM_ABORT_SCOPE = NCCL_COMM_ABORT_SCOPE::comm;
  } else {
    std::string str(getenv("NCCL_COMM_ABORT_SCOPE"));
    if (str == std::string("comm")) {
      NCCL_COMM_ABORT_SCOPE = NCCL_COMM_ABORT_SCOPE::comm;
    } else if (str == std::string("job")) {
      NCCL_COMM_ABORT_SCOPE = NCCL_COMM_ABORT_SCOPE::job;
    } else if (str == std::string("none")) {
      NCCL_COMM_ABORT_SCOPE = NCCL_COMM_ABORT_SCOPE::none;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_COMM_ABORT_SCOPE", str.c_str());
    }
  }
  NCCL_COMM_ABORT_SCOPE_DEFAULT = NCCL_COMM_ABORT_SCOPE::comm;

  if (NCCL_COMM_ABORT_SCOPE_DEFAULT != NCCL_COMM_ABORT_SCOPE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_COMM_ABORT_SCOPE");
  }
  NCCL_COMM_BLOCKING = env2num<int64_t>("NCCL_COMM_BLOCKING", "-1");
  NCCL_COMM_BLOCKING_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_COMM_BLOCKING_DEFAULT != NCCL_COMM_BLOCKING) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_COMM_BLOCKING");
  }
  NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS =
      env2bool("NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS", "False");
  NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS_DEFAULT !=
      NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_DUMP_ENABLE_PROCESS_GLOBAL_ERRORS");
  }
  NCCL_COMM_EVENT_LOGGING = env2str("NCCL_COMM_EVENT_LOGGING", "");
  NCCL_COMM_EVENT_LOGGING_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_COMM_EVENT_LOGGING_DEFAULT != NCCL_COMM_EVENT_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COMM_EVENT_LOGGING");
  }
  NCCL_COMM_ID = env2str("NCCL_COMM_ID", "");
  NCCL_COMM_ID_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_COMM_ID_DEFAULT != NCCL_COMM_ID) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_COMM_ID");
  }
  NCCL_COMM_REGISTER_LOG_ENABLE =
      env2bool("NCCL_COMM_REGISTER_LOG_ENABLE", "False");
  NCCL_COMM_REGISTER_LOG_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COMM_REGISTER_LOG_ENABLE_DEFAULT != NCCL_COMM_REGISTER_LOG_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_REGISTER_LOG_ENABLE");
  }
  NCCL_COMM_SHRINK_SHARE_RESOURCES =
      env2num<int>("NCCL_COMM_SHRINK_SHARE_RESOURCES", "MIN");
  NCCL_COMM_SHRINK_SHARE_RESOURCES_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_COMM_SHRINK_SHARE_RESOURCES_DEFAULT !=
      NCCL_COMM_SHRINK_SHARE_RESOURCES) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_SHRINK_SHARE_RESOURCES");
  }
  NCCL_COMM_SPLIT_SHARE_RESOURCES =
      env2num<int>("NCCL_COMM_SPLIT_SHARE_RESOURCES", "MIN");
  NCCL_COMM_SPLIT_SHARE_RESOURCES_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_COMM_SPLIT_SHARE_RESOURCES_DEFAULT !=
      NCCL_COMM_SPLIT_SHARE_RESOURCES) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_SPLIT_SHARE_RESOURCES");
  }
  if (getenv("NCCL_COMM_STATE_DEBUG_TOPO") == nullptr) {
    NCCL_COMM_STATE_DEBUG_TOPO = NCCL_COMM_STATE_DEBUG_TOPO::system;
  } else {
    std::string str(getenv("NCCL_COMM_STATE_DEBUG_TOPO"));
    if (str == std::string("system")) {
      NCCL_COMM_STATE_DEBUG_TOPO = NCCL_COMM_STATE_DEBUG_TOPO::system;
    } else if (str == std::string("nolocal")) {
      NCCL_COMM_STATE_DEBUG_TOPO = NCCL_COMM_STATE_DEBUG_TOPO::nolocal;
    } else if (str == std::string("vnode")) {
      NCCL_COMM_STATE_DEBUG_TOPO = NCCL_COMM_STATE_DEBUG_TOPO::vnode;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_COMM_STATE_DEBUG_TOPO", str.c_str());
    }
  }
  NCCL_COMM_STATE_DEBUG_TOPO_DEFAULT = NCCL_COMM_STATE_DEBUG_TOPO::system;

  if (NCCL_COMM_STATE_DEBUG_TOPO_DEFAULT != NCCL_COMM_STATE_DEBUG_TOPO) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_COMM_STATE_DEBUG_TOPO");
  }
  NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS =
      env2num<int>("NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS", "2");
  NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS_DEFAULT !=
      NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_STATE_DEBUG_TOPO_VNODE_NLOCALRANKS");
  }
  NCCL_COMM_TRACING_SERVICE_ENABLE =
      env2bool("NCCL_COMM_TRACING_SERVICE_ENABLE", "False");
  NCCL_COMM_TRACING_SERVICE_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COMM_TRACING_SERVICE_ENABLE_DEFAULT !=
      NCCL_COMM_TRACING_SERVICE_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_TRACING_SERVICE_ENABLE");
  }
  NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT =
      env2bool("NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT", "False");
  NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT_DEFAULT !=
      NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_COMM_TRACING_SERVICE_WARN_ON_PORT_CONFLICT");
  }
  NCCL_CONNECT_ROUND_MAX_PEERS =
      env2num<int64_t>("NCCL_CONNECT_ROUND_MAX_PEERS", "128");
  NCCL_CONNECT_ROUND_MAX_PEERS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "128");

  if (NCCL_CONNECT_ROUND_MAX_PEERS_DEFAULT != NCCL_CONNECT_ROUND_MAX_PEERS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CONNECT_ROUND_MAX_PEERS");
  }
  NCCL_CREATE_THREAD_CONTEXT =
      env2num<int64_t>("NCCL_CREATE_THREAD_CONTEXT", "0");
  NCCL_CREATE_THREAD_CONTEXT_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_CREATE_THREAD_CONTEXT_DEFAULT != NCCL_CREATE_THREAD_CONTEXT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CREATE_THREAD_CONTEXT");
  }
  NCCL_CROSS_NIC = env2num<int64_t>("NCCL_CROSS_NIC", "2");
  NCCL_CROSS_NIC_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_CROSS_NIC_DEFAULT != NCCL_CROSS_NIC) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CROSS_NIC");
  }
  NCCL_CTRAN_ABORT_ON_ERROR = env2bool("NCCL_CTRAN_ABORT_ON_ERROR", "False");
  NCCL_CTRAN_ABORT_ON_ERROR_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ABORT_ON_ERROR_DEFAULT != NCCL_CTRAN_ABORT_ON_ERROR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_ABORT_ON_ERROR");
  }
  NCCL_CTRAN_AG_RD_RTR = env2bool("NCCL_CTRAN_AG_RD_RTR", "True");
  NCCL_CTRAN_AG_RD_RTR_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_CTRAN_AG_RD_RTR_DEFAULT != NCCL_CTRAN_AG_RD_RTR) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_AG_RD_RTR");
  }
  NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE", "65536");
  NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "65536");

  if (NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE_DEFAULT !=
      NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_AG_RING_MIN_SPLIT_SIZE");
  }
  NCCL_CTRAN_AG_RING_NUM_SPLIT =
      env2num<int>("NCCL_CTRAN_AG_RING_NUM_SPLIT", "2");
  NCCL_CTRAN_AG_RING_NUM_SPLIT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_CTRAN_AG_RING_NUM_SPLIT_DEFAULT != NCCL_CTRAN_AG_RING_NUM_SPLIT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_AG_RING_NUM_SPLIT");
  }
  NCCL_CTRAN_ALGO_PROFILING_ENABLE =
      env2bool("NCCL_CTRAN_ALGO_PROFILING_ENABLE", "False");
  NCCL_CTRAN_ALGO_PROFILING_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ALGO_PROFILING_ENABLE_DEFAULT !=
      NCCL_CTRAN_ALGO_PROFILING_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALGO_PROFILING_ENABLE");
  }
  NCCL_CTRAN_ALGO_PROFILING_LOGGING =
      env2str("NCCL_CTRAN_ALGO_PROFILING_LOGGING", "scuba:nccl_profiler_algo");
  NCCL_CTRAN_ALGO_PROFILING_LOGGING_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "scuba:nccl_profiler_algo");

  if (NCCL_CTRAN_ALGO_PROFILING_LOGGING_DEFAULT !=
      NCCL_CTRAN_ALGO_PROFILING_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALGO_PROFILING_LOGGING");
  }
  NCCL_CTRAN_ALGO_PROFILING_OUTPUT =
      env2str("NCCL_CTRAN_ALGO_PROFILING_OUTPUT", "");
  NCCL_CTRAN_ALGO_PROFILING_OUTPUT_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_CTRAN_ALGO_PROFILING_OUTPUT_DEFAULT !=
      NCCL_CTRAN_ALGO_PROFILING_OUTPUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALGO_PROFILING_OUTPUT");
  }
  NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE =
      env2str("NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE", "opcount");
  NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "opcount");

  if (NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE_DEFAULT !=
      NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALGO_PROFILING_SAMPLING_MODE");
  }
  NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT =
      env2num<int>("NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT", "1");
  NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT_DEFAULT !=
      NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALGO_PROFILING_SAMPLING_WEIGHT");
  }
  NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE =
      env2num<int>("NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE", "0");
  NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE_DEFAULT !=
      NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLGATHER_CHECKSUM_SAMPLE_RATE");
  }
  NCCL_CTRAN_ALLGATHER_MIN_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_ALLGATHER_MIN_SIZE", "4096");
  NCCL_CTRAN_ALLGATHER_MIN_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "4096");

  if (NCCL_CTRAN_ALLGATHER_MIN_SIZE_DEFAULT != NCCL_CTRAN_ALLGATHER_MIN_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLGATHER_MIN_SIZE");
  }
  NCCL_CTRAN_ALLOW_CUDA_GRAPH =
      env2bool("NCCL_CTRAN_ALLOW_CUDA_GRAPH", "False");
  NCCL_CTRAN_ALLOW_CUDA_GRAPH_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ALLOW_CUDA_GRAPH_DEFAULT != NCCL_CTRAN_ALLOW_CUDA_GRAPH) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_ALLOW_CUDA_GRAPH");
  }
  NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_ARG_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE", "-1");
  NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_ARG_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_DIRECT_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE", "-1");
  NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_DIRECT_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS", "2");
  NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_RING_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE =
      env2num<uint32_t>("NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE", "16");
  NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE_DEFAULT =
      env2num<uint32_t>("NCCL_ENV_DO_NOT_SET", "16");

  if (NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_RING_MIN_SHARD_SIZE");
  }
  NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE", "512");
  NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "512");

  if (NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_RING_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE = env2num<uint64_t>(
      "NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE", "8388608");
  NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "8388608");

  if (NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_CHUNK_SIZE");
  }
  NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS =
      env2num<uint32_t>("NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS", "4");
  NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS_DEFAULT =
      env2num<uint32_t>("NCCL_ENV_DO_NOT_SET", "4");

  if (NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS_DEFAULT !=
      NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLREDUCE_RING_TMPBUF_NUM_CHUNKS");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE", "16777216");
  NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "16777216");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_CHUNK_SIZE");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCKS_PER_GROUP");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_FWD_NUM_THREAD_BLOCK_GROUPS");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS", "4");
  NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "4");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_NUM_CHUNKS");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_PREPARE_NUM_THREAD_BLOCK_GROUPS");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCKS_PER_GROUP");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_RECV_NUM_THREAD_BLOCK_GROUPS");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCKS_PER_GROUP");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS = env2num<int>(
      "NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS", "1");
  NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_SEND_NUM_THREAD_BLOCK_GROUPS");
  }
  NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE", "256");
  NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DEDUP_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS", "64");
  NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "64");

  if (NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DYNAMIC_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE", "256");
  NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_DYNAMIC_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS", "64");
  NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "64");

  if (NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE", "256");
  NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALLV_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE =
      env2bool("NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE", "False");
  NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE_DEFAULT !=
      NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALL_CUDAGRAPH_AWARE_ENABLE");
  }
  NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P = env2num<int>(
      "NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P", "16");
  NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "16");

  if (NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P_DEFAULT !=
      NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALL_DEDUP_NUM_THREAD_BLOCKS_PER_RAIL_P2P");
  }
  NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE", "256");
  NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALL_DEDUP_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS", "-1");
  NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALL_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE", "256");
  NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALL_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_ALLTOALL_THRESHOLD =
      env2num<uint64_t>("NCCL_CTRAN_ALLTOALL_THRESHOLD", "32768");
  NCCL_CTRAN_ALLTOALL_THRESHOLD_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "32768");

  if (NCCL_CTRAN_ALLTOALL_THRESHOLD_DEFAULT != NCCL_CTRAN_ALLTOALL_THRESHOLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ALLTOALL_THRESHOLD");
  }
  {
    NCCL_CTRAN_BACKENDS.clear();
    auto tokens = env2strlist("NCCL_CTRAN_BACKENDS", "ib, nvl, socket");
    for (auto token : tokens) {
      if (token == std::string("ib")) {
        NCCL_CTRAN_BACKENDS.emplace_back(NCCL_CTRAN_BACKENDS::ib);
      } else if (token == std::string("nvl")) {
        NCCL_CTRAN_BACKENDS.emplace_back(NCCL_CTRAN_BACKENDS::nvl);
      } else if (token == std::string("socket")) {
        NCCL_CTRAN_BACKENDS.emplace_back(NCCL_CTRAN_BACKENDS::socket);
      } else if (token == std::string("tcpdm")) {
        NCCL_CTRAN_BACKENDS.emplace_back(NCCL_CTRAN_BACKENDS::tcpdm);
      } else {
        CVAR_WARN_UNKNOWN_VALUE("NCCL_CTRAN_BACKENDS", token.c_str());
      }
    }
  }
  NCCL_CTRAN_BACKENDS_DEFAULT.clear();
  NCCL_CTRAN_BACKENDS_DEFAULT.emplace_back(NCCL_CTRAN_BACKENDS::ib);
  NCCL_CTRAN_BACKENDS_DEFAULT.emplace_back(NCCL_CTRAN_BACKENDS::nvl);
  NCCL_CTRAN_BACKENDS_DEFAULT.emplace_back(NCCL_CTRAN_BACKENDS::socket);

  if (NCCL_CTRAN_BACKENDS_DEFAULT != NCCL_CTRAN_BACKENDS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_BACKENDS");
  }
  NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE", "33554432");
  NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "33554432");

  if (NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE_DEFAULT !=
      NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_BCAST_NVL_SHARED_DEVBUF_SIZE");
  }
  NCCL_CTRAN_CGA_CLUSTER_SIZE =
      env2num<int>("NCCL_CTRAN_CGA_CLUSTER_SIZE", "4");
  NCCL_CTRAN_CGA_CLUSTER_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "4");

  if (NCCL_CTRAN_CGA_CLUSTER_SIZE_DEFAULT != NCCL_CTRAN_CGA_CLUSTER_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_CGA_CLUSTER_SIZE");
  }
  NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK =
      env2num<int>("NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK", "131072");
  NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK_DEFAULT !=
      NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_CHECKSUM_BYTES_PER_THREAD_BLOCK");
  }
  NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_CHECKSUM_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE = env2num<uint64_t>(
      "NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE", "16777216");
  NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "16777216");

  if (NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE_DEFAULT !=
      NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_COMPRESSED_ALLTOALLV_CHUNK_SIZE");
  }
  NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING =
      env2bool("NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING", "False");
  NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING_DEFAULT !=
      NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_COMPRESSED_ENABLE_LOGGING");
  }
  NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT =
      env2num<int>("NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT", "100");
  NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "100");

  if (NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT_DEFAULT !=
      NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_DEVICE_TRAFFIC_SAMPLING_WEIGHT");
  }
  NCCL_CTRAN_ENABLE = env2bool("NCCL_CTRAN_ENABLE", "False");
  NCCL_CTRAN_ENABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENABLE_DEFAULT != NCCL_CTRAN_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_ENABLE");
  }
  NCCL_CTRAN_ENABLE_DEV_TRACE_LOG =
      env2bool("NCCL_CTRAN_ENABLE_DEV_TRACE_LOG", "False");
  NCCL_CTRAN_ENABLE_DEV_TRACE_LOG_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENABLE_DEV_TRACE_LOG_DEFAULT !=
      NCCL_CTRAN_ENABLE_DEV_TRACE_LOG) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ENABLE_DEV_TRACE_LOG");
  }
  NCCL_CTRAN_ENABLE_FAULT_TOLERANCE =
      env2bool("NCCL_CTRAN_ENABLE_FAULT_TOLERANCE", "False");
  NCCL_CTRAN_ENABLE_FAULT_TOLERANCE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENABLE_FAULT_TOLERANCE_DEFAULT !=
      NCCL_CTRAN_ENABLE_FAULT_TOLERANCE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ENABLE_FAULT_TOLERANCE");
  }
  NCCL_CTRAN_ENABLE_PRECONNECT =
      env2bool("NCCL_CTRAN_ENABLE_PRECONNECT", "True");
  NCCL_CTRAN_ENABLE_PRECONNECT_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_CTRAN_ENABLE_PRECONNECT_DEFAULT != NCCL_CTRAN_ENABLE_PRECONNECT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ENABLE_PRECONNECT");
  }
  NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS =
      env2bool("NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS", "False");
  NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS_DEFAULT !=
      NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ENABLE_PUT_FAST_PATH_FOR_SMALL_MSGS");
  }
  NCCL_CTRAN_ENABLE_TRACE_LOG =
      env2bool("NCCL_CTRAN_ENABLE_TRACE_LOG", "False");
  NCCL_CTRAN_ENABLE_TRACE_LOG_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENABLE_TRACE_LOG_DEFAULT != NCCL_CTRAN_ENABLE_TRACE_LOG) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_ENABLE_TRACE_LOG");
  }
  NCCL_CTRAN_ENABLE_TRACE_LOGGER =
      env2bool("NCCL_CTRAN_ENABLE_TRACE_LOGGER", "False");
  NCCL_CTRAN_ENABLE_TRACE_LOGGER_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENABLE_TRACE_LOGGER_DEFAULT !=
      NCCL_CTRAN_ENABLE_TRACE_LOGGER) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ENABLE_TRACE_LOGGER");
  }
  NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH =
      env2bool("NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH", "False");
  NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH_DEFAULT !=
      NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_ENALBE_CLUSTER_KERNEL_LAUNCH");
  }
  NCCL_CTRAN_EX_IB_QP_CONFIG.clear();
  NCCL_CTRAN_EX_IB_QP_CONFIG = env2strlist("NCCL_CTRAN_EX_IB_QP_CONFIG", "");
  NCCL_CTRAN_EX_IB_QP_CONFIG_DEFAULT.clear();
  NCCL_CTRAN_EX_IB_QP_CONFIG_DEFAULT = env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_CTRAN_EX_IB_QP_CONFIG_DEFAULT != NCCL_CTRAN_EX_IB_QP_CONFIG) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_EX_IB_QP_CONFIG");
  }
  NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS =
      env2num<int>("NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS", "10");
  NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "10");

  if (NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS_DEFAULT !=
      NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_ASYNC_EVENT_POLL_INTERVAL_MS");
  }
  NCCL_CTRAN_IB_CTRL_TC = env2num<uint64_t>("NCCL_CTRAN_IB_CTRL_TC", "224");
  NCCL_CTRAN_IB_CTRL_TC_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "224");

  if (NCCL_CTRAN_IB_CTRL_TC_DEFAULT != NCCL_CTRAN_IB_CTRL_TC) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_CTRL_TC");
  }
  NCCL_CTRAN_IB_DEVICES_PER_RANK =
      env2num<int>("NCCL_CTRAN_IB_DEVICES_PER_RANK", "1");
  NCCL_CTRAN_IB_DEVICES_PER_RANK_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_IB_DEVICES_PER_RANK_DEFAULT !=
      NCCL_CTRAN_IB_DEVICES_PER_RANK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_DEVICES_PER_RANK");
  }
  NCCL_CTRAN_IB_DEVICE_STRIDE =
      env2num<int>("NCCL_CTRAN_IB_DEVICE_STRIDE", "1");
  NCCL_CTRAN_IB_DEVICE_STRIDE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_IB_DEVICE_STRIDE_DEFAULT != NCCL_CTRAN_IB_DEVICE_STRIDE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_DEVICE_STRIDE");
  }
  NCCL_CTRAN_IB_DMABUF_ENABLE = env2bool("NCCL_CTRAN_IB_DMABUF_ENABLE", "True");
  NCCL_CTRAN_IB_DMABUF_ENABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_CTRAN_IB_DMABUF_ENABLE_DEFAULT != NCCL_CTRAN_IB_DMABUF_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_DMABUF_ENABLE");
  }
  NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE =
      env2bool("NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE", "True");
  NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE_DEFAULT !=
      NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_EPOCH_LOCK_ENABLE");
  }
  NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK =
      env2bool("NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK", "False");
  NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK_DEFAULT !=
      NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_EPOCH_LOCK_ENFORCE_CHECK");
  }
  NCCL_CTRAN_IB_MAX_QPS = env2num<int>("NCCL_CTRAN_IB_MAX_QPS", "16");
  NCCL_CTRAN_IB_MAX_QPS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "16");

  if (NCCL_CTRAN_IB_MAX_QPS_DEFAULT != NCCL_CTRAN_IB_MAX_QPS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_MAX_QPS");
  }
  NCCL_CTRAN_IB_PG_TRAFFIC_CLASS.clear();
  NCCL_CTRAN_IB_PG_TRAFFIC_CLASS =
      env2strlist("NCCL_CTRAN_IB_PG_TRAFFIC_CLASS", "");
  NCCL_CTRAN_IB_PG_TRAFFIC_CLASS_DEFAULT.clear();
  NCCL_CTRAN_IB_PG_TRAFFIC_CLASS_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_CTRAN_IB_PG_TRAFFIC_CLASS_DEFAULT !=
      NCCL_CTRAN_IB_PG_TRAFFIC_CLASS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_PG_TRAFFIC_CLASS");
  }
  NCCL_CTRAN_IB_QP_CONFIG_ALGO.clear();
  NCCL_CTRAN_IB_QP_CONFIG_ALGO = env2dictlist(
      "NCCL_CTRAN_IB_QP_CONFIG_ALGO", "alltoall:1048576,16,dqplb,128,224");
  NCCL_CTRAN_IB_QP_CONFIG_ALGO_DEFAULT.clear();
  NCCL_CTRAN_IB_QP_CONFIG_ALGO_DEFAULT =
      env2dictlist("NCCL_ENV_DO_NOT_SET", "alltoall:1048576,16,dqplb,128,224");

  if (NCCL_CTRAN_IB_QP_CONFIG_ALGO_DEFAULT != NCCL_CTRAN_IB_QP_CONFIG_ALGO) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_QP_CONFIG_ALGO");
  }
  NCCL_CTRAN_IB_QP_CONFIG_XDC.clear();
  NCCL_CTRAN_IB_QP_CONFIG_XDC =
      env2strlist("NCCL_CTRAN_IB_QP_CONFIG_XDC", "1048576,16,spray,128");
  NCCL_CTRAN_IB_QP_CONFIG_XDC_DEFAULT.clear();
  NCCL_CTRAN_IB_QP_CONFIG_XDC_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "1048576,16,spray,128");

  if (NCCL_CTRAN_IB_QP_CONFIG_XDC_DEFAULT != NCCL_CTRAN_IB_QP_CONFIG_XDC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_QP_CONFIG_XDC");
  }
  NCCL_CTRAN_IB_QP_CONFIG_XRACK.clear();
  NCCL_CTRAN_IB_QP_CONFIG_XRACK =
      env2strlist("NCCL_CTRAN_IB_QP_CONFIG_XRACK", "1048576,16,spray,128");
  NCCL_CTRAN_IB_QP_CONFIG_XRACK_DEFAULT.clear();
  NCCL_CTRAN_IB_QP_CONFIG_XRACK_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "1048576,16,spray,128");

  if (NCCL_CTRAN_IB_QP_CONFIG_XRACK_DEFAULT != NCCL_CTRAN_IB_QP_CONFIG_XRACK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_QP_CONFIG_XRACK");
  }
  NCCL_CTRAN_IB_QP_CONFIG_XZONE.clear();
  NCCL_CTRAN_IB_QP_CONFIG_XZONE =
      env2strlist("NCCL_CTRAN_IB_QP_CONFIG_XZONE", "1048576,16,spray,128");
  NCCL_CTRAN_IB_QP_CONFIG_XZONE_DEFAULT.clear();
  NCCL_CTRAN_IB_QP_CONFIG_XZONE_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "1048576,16,spray,128");

  if (NCCL_CTRAN_IB_QP_CONFIG_XZONE_DEFAULT != NCCL_CTRAN_IB_QP_CONFIG_XZONE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_QP_CONFIG_XZONE");
  }
  NCCL_CTRAN_IB_QP_MAX_MSGS =
      env2num<uint64_t>("NCCL_CTRAN_IB_QP_MAX_MSGS", "128");
  NCCL_CTRAN_IB_QP_MAX_MSGS_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "128");

  if (NCCL_CTRAN_IB_QP_MAX_MSGS_DEFAULT != NCCL_CTRAN_IB_QP_MAX_MSGS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_QP_MAX_MSGS");
  }
  NCCL_CTRAN_IB_QP_SCALING_THRESHOLD =
      env2num<uint64_t>("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD", "524288");
  NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "524288");

  if (NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_DEFAULT !=
      NCCL_CTRAN_IB_QP_SCALING_THRESHOLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_IB_QP_SCALING_THRESHOLD");
  }
  if (getenv("NCCL_CTRAN_IB_VC_MODE") == nullptr) {
    NCCL_CTRAN_IB_VC_MODE = NCCL_CTRAN_IB_VC_MODE::dqplb;
  } else {
    std::string str(getenv("NCCL_CTRAN_IB_VC_MODE"));
    if (str == std::string("spray")) {
      NCCL_CTRAN_IB_VC_MODE = NCCL_CTRAN_IB_VC_MODE::spray;
    } else if (str == std::string("dqplb")) {
      NCCL_CTRAN_IB_VC_MODE = NCCL_CTRAN_IB_VC_MODE::dqplb;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_CTRAN_IB_VC_MODE", str.c_str());
    }
  }
  NCCL_CTRAN_IB_VC_MODE_DEFAULT = NCCL_CTRAN_IB_VC_MODE::dqplb;

  if (NCCL_CTRAN_IB_VC_MODE_DEFAULT != NCCL_CTRAN_IB_VC_MODE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_IB_VC_MODE");
  }
  NCCL_CTRAN_INTERNODE_TMPBUF_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_INTERNODE_TMPBUF_SIZE", "33554432");
  NCCL_CTRAN_INTERNODE_TMPBUF_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "33554432");

  if (NCCL_CTRAN_INTERNODE_TMPBUF_SIZE_DEFAULT !=
      NCCL_CTRAN_INTERNODE_TMPBUF_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_INTERNODE_TMPBUF_SIZE");
  }
  NCCL_CTRAN_KINETO_PROFILE_DIR =
      env2str("NCCL_CTRAN_KINETO_PROFILE_DIR", "/tmp");
  NCCL_CTRAN_KINETO_PROFILE_DIR_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "/tmp");

  if (NCCL_CTRAN_KINETO_PROFILE_DIR_DEFAULT != NCCL_CTRAN_KINETO_PROFILE_DIR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_KINETO_PROFILE_DIR");
  }
  NCCL_CTRAN_NO_ERROR_CHECK = env2bool("NCCL_CTRAN_NO_ERROR_CHECK", "False");
  NCCL_CTRAN_NO_ERROR_CHECK_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_NO_ERROR_CHECK_DEFAULT != NCCL_CTRAN_NO_ERROR_CHECK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_NO_ERROR_CHECK");
  }
  NCCL_CTRAN_NUM_CHECKSUMS = env2num<int>("NCCL_CTRAN_NUM_CHECKSUMS", "8192");
  NCCL_CTRAN_NUM_CHECKSUMS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "8192");

  if (NCCL_CTRAN_NUM_CHECKSUMS_DEFAULT != NCCL_CTRAN_NUM_CHECKSUMS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_NUM_CHECKSUMS");
  }
  NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS =
      env2num<int>("NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS", "1024");
  NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1024");

  if (NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS_DEFAULT !=
      NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NUM_GPE_KERNEL_SYNCS");
  }
  NCCL_CTRAN_NUM_KERNEL_ELEMS =
      env2num<int>("NCCL_CTRAN_NUM_KERNEL_ELEMS", "65536");
  NCCL_CTRAN_NUM_KERNEL_ELEMS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "65536");

  if (NCCL_CTRAN_NUM_KERNEL_ELEMS_DEFAULT != NCCL_CTRAN_NUM_KERNEL_ELEMS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_NUM_KERNEL_ELEMS");
  }
  NCCL_CTRAN_NUM_KERNEL_FLAGS =
      env2num<int>("NCCL_CTRAN_NUM_KERNEL_FLAGS", "8192");
  NCCL_CTRAN_NUM_KERNEL_FLAGS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "8192");

  if (NCCL_CTRAN_NUM_KERNEL_FLAGS_DEFAULT != NCCL_CTRAN_NUM_KERNEL_FLAGS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_NUM_KERNEL_FLAGS");
  }
  NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE =
      env2num<int>("NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE", "131072");
  NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE_DEFAULT !=
      NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_ALLGATHERDIRECT_CHUNK_SIZE");
  }
  NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS = env2num<int>(
      "NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_ALLGATHERDIRECT_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE", "640");
  NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "640");

  if (NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_ALLGATHERDIRECT_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE =
      env2num<int>("NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE", "131072");
  NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE_DEFAULT !=
      NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_BROADCAST_CHUNK_SIZE");
  }
  NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_BROADCAST_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE", "-1");
  NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_BROADCAST_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_NVL_FABRIC_ENABLE =
      env2bool("NCCL_CTRAN_NVL_FABRIC_ENABLE", "False");
  NCCL_CTRAN_NVL_FABRIC_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_NVL_FABRIC_ENABLE_DEFAULT != NCCL_CTRAN_NVL_FABRIC_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_FABRIC_ENABLE");
  }
  NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE =
      env2num<int>("NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE", "131072");
  NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE_DEFAULT !=
      NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_SENDRECV_CHUNK_SIZE");
  }
  NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE =
      env2bool("NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE", "False");
  NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE_DEFAULT !=
      NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_SENDRECV_COPY_ENGINE_ENABLE");
  }
  NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_SENDRECV_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE", "-1");
  NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_NVL_SENDRECV_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE", "8388608");
  NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "8388608");

  if (NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE_DEFAULT !=
      NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_P2P_NVL_SHARED_DEVBUF_SIZE");
  }
  if (getenv("NCCL_CTRAN_PROFILING") == nullptr) {
    NCCL_CTRAN_PROFILING = NCCL_CTRAN_PROFILING::none;
  } else {
    std::string str(getenv("NCCL_CTRAN_PROFILING"));
    if (str == std::string("none")) {
      NCCL_CTRAN_PROFILING = NCCL_CTRAN_PROFILING::none;
    } else if (str == std::string("stdout")) {
      NCCL_CTRAN_PROFILING = NCCL_CTRAN_PROFILING::stdout;
    } else if (str == std::string("info")) {
      NCCL_CTRAN_PROFILING = NCCL_CTRAN_PROFILING::info;
    } else if (str == std::string("kineto")) {
      NCCL_CTRAN_PROFILING = NCCL_CTRAN_PROFILING::kineto;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_CTRAN_PROFILING", str.c_str());
    }
  }
  NCCL_CTRAN_PROFILING_DEFAULT = NCCL_CTRAN_PROFILING::none;

  if (NCCL_CTRAN_PROFILING_DEFAULT != NCCL_CTRAN_PROFILING) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_PROFILING");
  }
  NCCL_CTRAN_PROFILING_REPORT_COUNT =
      env2num<int>("NCCL_CTRAN_PROFILING_REPORT_COUNT", "100");
  NCCL_CTRAN_PROFILING_REPORT_COUNT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "100");

  if (NCCL_CTRAN_PROFILING_REPORT_COUNT_DEFAULT !=
      NCCL_CTRAN_PROFILING_REPORT_COUNT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_PROFILING_REPORT_COUNT");
  }
  NCCL_CTRAN_QP_PROFILING_ENABLE =
      env2bool("NCCL_CTRAN_QP_PROFILING_ENABLE", "False");
  NCCL_CTRAN_QP_PROFILING_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_QP_PROFILING_ENABLE_DEFAULT !=
      NCCL_CTRAN_QP_PROFILING_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_QP_PROFILING_ENABLE");
  }
  NCCL_CTRAN_QP_PROFILING_OUTPUT =
      env2str("NCCL_CTRAN_QP_PROFILING_OUTPUT", "");
  NCCL_CTRAN_QP_PROFILING_OUTPUT_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_CTRAN_QP_PROFILING_OUTPUT_DEFAULT !=
      NCCL_CTRAN_QP_PROFILING_OUTPUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_QP_PROFILING_OUTPUT");
  }
  NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT =
      env2num<int>("NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT", "1");
  NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT_DEFAULT !=
      NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_QP_PROFILING_SAMPLING_WEIGHT");
  }
  NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS = env2num<int>(
      "NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS", "32");
  NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "32");

  if (NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REDUCESCATTER_DIRECT_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE", "33554432");
  NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "33554432");

  if (NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE_DEFAULT !=
      NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REDUCESCATTER_DIRECT_MIN_SIZE");
  }
  NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK = env2num<int>(
      "NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK", "131072");
  NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK_DEFAULT !=
      NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REDUCESCATTER_REDUCE_NELEM_PER_THREAD_BLOCK");
  }
  NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS", "4");
  NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "4");

  if (NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REDUCESCATTER_RHD_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS =
      env2num<int>("NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS", "4");
  NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "4");

  if (NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REDUCESCATTER_RING_MAX_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE =
      env2num<int>("NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE", "640");
  NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "640");

  if (NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REDUCESCATTER_THREAD_BLOCK_SIZE");
  }
  if (getenv("NCCL_CTRAN_REGISTER") == nullptr) {
    NCCL_CTRAN_REGISTER = NCCL_CTRAN_REGISTER::lazy;
  } else {
    std::string str(getenv("NCCL_CTRAN_REGISTER"));
    if (str == std::string("none")) {
      NCCL_CTRAN_REGISTER = NCCL_CTRAN_REGISTER::none;
    } else if (str == std::string("lazy")) {
      NCCL_CTRAN_REGISTER = NCCL_CTRAN_REGISTER::lazy;
    } else if (str == std::string("eager")) {
      NCCL_CTRAN_REGISTER = NCCL_CTRAN_REGISTER::eager;
    } else if (str == std::string("async")) {
      NCCL_CTRAN_REGISTER = NCCL_CTRAN_REGISTER::async;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_CTRAN_REGISTER", str.c_str());
    }
  }
  NCCL_CTRAN_REGISTER_DEFAULT = NCCL_CTRAN_REGISTER::lazy;

  if (NCCL_CTRAN_REGISTER_DEFAULT != NCCL_CTRAN_REGISTER) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CTRAN_REGISTER");
  }
  NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC =
      env2bool("NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC", "False");
  NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC_DEFAULT !=
      NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REGISTER_ERROR_ON_DYNAMIC");
  }
  NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT =
      env2num<int>("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT", "-1");
  NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_DEFAULT !=
      NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT");
  }
  NCCL_CTRAN_REGISTRATION_SIZE_CHECK =
      env2bool("NCCL_CTRAN_REGISTRATION_SIZE_CHECK", "False");
  NCCL_CTRAN_REGISTRATION_SIZE_CHECK_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_REGISTRATION_SIZE_CHECK_DEFAULT !=
      NCCL_CTRAN_REGISTRATION_SIZE_CHECK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_REGISTRATION_SIZE_CHECK");
  }
  NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE =
      env2num<int>("NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE", "0");
  NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE_DEFAULT !=
      NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_SENDRECV_CHECKSUM_SAMPLE_RATE");
  }
  NCCL_CTRAN_SOCKET_POLL_TIMEOUT =
      env2num<int32_t>("NCCL_CTRAN_SOCKET_POLL_TIMEOUT", "20");
  NCCL_CTRAN_SOCKET_POLL_TIMEOUT_DEFAULT =
      env2num<int32_t>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_CTRAN_SOCKET_POLL_TIMEOUT_DEFAULT !=
      NCCL_CTRAN_SOCKET_POLL_TIMEOUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_SOCKET_POLL_TIMEOUT");
  }
  NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR =
      env2str("NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR", "/tmp/");
  NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "/tmp/");

  if (NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR_DEFAULT !=
      NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_TRACE_LOGGER_LOCAL_DIR");
  }
  NCCL_CTRAN_TRANSPORT_PROFILER =
      env2bool("NCCL_CTRAN_TRANSPORT_PROFILER", "False");
  NCCL_CTRAN_TRANSPORT_PROFILER_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CTRAN_TRANSPORT_PROFILER_DEFAULT != NCCL_CTRAN_TRANSPORT_PROFILER) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_TRANSPORT_PROFILER");
  }
  NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS =
      env2num<uint64_t>("NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS", "8");
  NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "8");

  if (NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS_DEFAULT !=
      NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_UNPACK_NUM_THREAD_BLOCKS");
  }
  NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE =
      env2num<uint64_t>("NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE", "256");
  NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE_DEFAULT !=
      NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_CTRAN_UNPACK_THREAD_BLOCK_SIZE");
  }
  NCCL_CTRAN_WIN_SIGNAL_SIZE =
      env2num<int32_t>("NCCL_CTRAN_WIN_SIGNAL_SIZE", "256");
  NCCL_CTRAN_WIN_SIGNAL_SIZE_DEFAULT =
      env2num<int32_t>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_CTRAN_WIN_SIGNAL_SIZE_DEFAULT != NCCL_CTRAN_WIN_SIGNAL_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CTRAN_WIN_SIGNAL_SIZE");
  }
  NCCL_CUMEM_ENABLE = env2num<int64_t>("NCCL_CUMEM_ENABLE", "-2");
  NCCL_CUMEM_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_CUMEM_ENABLE_DEFAULT != NCCL_CUMEM_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CUMEM_ENABLE");
  }
  NCCL_CUMEM_HOST_ENABLE = env2num<int64_t>("NCCL_CUMEM_HOST_ENABLE", "-1");
  NCCL_CUMEM_HOST_ENABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_CUMEM_HOST_ENABLE_DEFAULT != NCCL_CUMEM_HOST_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_CUMEM_HOST_ENABLE");
  }
  NCCL_CVARS_LOG_INFO = env2bool("NCCL_CVARS_LOG_INFO", "False");
  NCCL_CVARS_LOG_INFO_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_CVARS_LOG_INFO_DEFAULT != NCCL_CVARS_LOG_INFO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_CVARS_LOG_INFO");
  }
  NCCL_DDA_ALLREDUCE_MAX_BLOCKS =
      env2num<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", "24");
  NCCL_DDA_ALLREDUCE_MAX_BLOCKS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "24");

  if (NCCL_DDA_ALLREDUCE_MAX_BLOCKS_DEFAULT != NCCL_DDA_ALLREDUCE_MAX_BLOCKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_DDA_ALLREDUCE_MAX_BLOCKS");
  }
  NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD =
      env2num<uint64_t>("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD", "1048576");
  NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "1048576");

  if (NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_DEFAULT !=
      NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD");
  }
  NCCL_DDA_ALLREDUCE_TREE_THRESHOLD =
      env2num<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD", "262144");
  NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "262144");

  if (NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_DEFAULT !=
      NCCL_DDA_ALLREDUCE_TREE_THRESHOLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_DDA_ALLREDUCE_TREE_THRESHOLD");
  }
  NCCL_DDA_TMPBUFF_SIZE =
      env2num<uint64_t>("NCCL_DDA_TMPBUFF_SIZE", "33554432");
  NCCL_DDA_TMPBUFF_SIZE_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "33554432");

  if (NCCL_DDA_TMPBUFF_SIZE_DEFAULT != NCCL_DDA_TMPBUFF_SIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_DDA_TMPBUFF_SIZE");
  }
  NCCL_DEBUG = env2str("NCCL_DEBUG", "");
  NCCL_DEBUG_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_DEBUG_DEFAULT != NCCL_DEBUG) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_DEBUG");
  }
  NCCL_DEBUG_FILE = env2str("NCCL_DEBUG_FILE", "");
  NCCL_DEBUG_FILE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_DEBUG_FILE_DEFAULT != NCCL_DEBUG_FILE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_DEBUG_FILE");
  }
  NCCL_DEBUG_LOGGING_ASYNC = env2bool("NCCL_DEBUG_LOGGING_ASYNC", "True");
  NCCL_DEBUG_LOGGING_ASYNC_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_DEBUG_LOGGING_ASYNC_DEFAULT != NCCL_DEBUG_LOGGING_ASYNC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_DEBUG_LOGGING_ASYNC");
  }
  NCCL_DEBUG_SUBSYS = env2str("NCCL_DEBUG_SUBSYS", "");
  NCCL_DEBUG_SUBSYS_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_DEBUG_SUBSYS_DEFAULT != NCCL_DEBUG_SUBSYS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_DEBUG_SUBSYS");
  }
  NCCL_DEBUG_TIMESTAMP_FORMAT = env2str("NCCL_DEBUG_TIMESTAMP_FORMAT", "");
  NCCL_DEBUG_TIMESTAMP_FORMAT_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_DEBUG_TIMESTAMP_FORMAT_DEFAULT != NCCL_DEBUG_TIMESTAMP_FORMAT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_DEBUG_TIMESTAMP_FORMAT");
  }
  NCCL_DEBUG_TIMESTAMP_LEVELS = env2str("NCCL_DEBUG_TIMESTAMP_LEVELS", "WARN");
  NCCL_DEBUG_TIMESTAMP_LEVELS_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "WARN");

  if (NCCL_DEBUG_TIMESTAMP_LEVELS_DEFAULT != NCCL_DEBUG_TIMESTAMP_LEVELS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_DEBUG_TIMESTAMP_LEVELS");
  }
  NCCL_DMABUF_ENABLE = env2num<int64_t>("NCCL_DMABUF_ENABLE", "1");
  NCCL_DMABUF_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_DMABUF_ENABLE_DEFAULT != NCCL_DMABUF_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_DMABUF_ENABLE");
  }
  NCCL_ENV_CTA_POLICY = env2num<int>("NCCL_ENV_CTA_POLICY", "MIN");
  NCCL_ENV_CTA_POLICY_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_ENV_CTA_POLICY_DEFAULT != NCCL_ENV_CTA_POLICY) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_ENV_CTA_POLICY");
  }
  if (getenv("NCCL_FASTINIT_MODE") == nullptr) {
    NCCL_FASTINIT_MODE = NCCL_FASTINIT_MODE::none;
  } else {
    std::string str(getenv("NCCL_FASTINIT_MODE"));
    if (str == std::string("none")) {
      NCCL_FASTINIT_MODE = NCCL_FASTINIT_MODE::none;
    } else if (str == std::string("ring_hybrid")) {
      NCCL_FASTINIT_MODE = NCCL_FASTINIT_MODE::ring_hybrid;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_FASTINIT_MODE", str.c_str());
    }
  }
  NCCL_FASTINIT_MODE_DEFAULT = NCCL_FASTINIT_MODE::none;

  if (NCCL_FASTINIT_MODE_DEFAULT != NCCL_FASTINIT_MODE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_FASTINIT_MODE");
  }
  NCCL_FILTER_ALGO_LOGGING_BY_RANKS.clear();
  NCCL_FILTER_ALGO_LOGGING_BY_RANKS =
      env2strlist("NCCL_FILTER_ALGO_LOGGING_BY_RANKS", "");
  NCCL_FILTER_ALGO_LOGGING_BY_RANKS_DEFAULT.clear();
  NCCL_FILTER_ALGO_LOGGING_BY_RANKS_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_FILTER_ALGO_LOGGING_BY_RANKS_DEFAULT !=
      NCCL_FILTER_ALGO_LOGGING_BY_RANKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_FILTER_ALGO_LOGGING_BY_RANKS");
  }
  NCCL_FILTER_MEM_LOGGING_BY_RANKS.clear();
  NCCL_FILTER_MEM_LOGGING_BY_RANKS =
      env2strlist("NCCL_FILTER_MEM_LOGGING_BY_RANKS", "0");
  NCCL_FILTER_MEM_LOGGING_BY_RANKS_DEFAULT.clear();
  NCCL_FILTER_MEM_LOGGING_BY_RANKS_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_FILTER_MEM_LOGGING_BY_RANKS_DEFAULT !=
      NCCL_FILTER_MEM_LOGGING_BY_RANKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_FILTER_MEM_LOGGING_BY_RANKS");
  }
  NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS.clear();
  NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS =
      env2strlist("NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS", "");
  NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS_DEFAULT.clear();
  NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS_DEFAULT !=
      NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_FILTER_MEM_REG_LOGGING_BY_RANKS");
  }
  NCCL_FIRST_COMM_AS_WORLD = env2bool("NCCL_FIRST_COMM_AS_WORLD", "False");
  NCCL_FIRST_COMM_AS_WORLD_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_FIRST_COMM_AS_WORLD_DEFAULT != NCCL_FIRST_COMM_AS_WORLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_FIRST_COMM_AS_WORLD");
  }
  NCCL_GDRCOPY_ENABLE = env2num<int64_t>("NCCL_GDRCOPY_ENABLE", "0");
  NCCL_GDRCOPY_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_GDRCOPY_ENABLE_DEFAULT != NCCL_GDRCOPY_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_GDRCOPY_ENABLE");
  }
  NCCL_GDRCOPY_FIFO_ENABLE = env2num<int64_t>("NCCL_GDRCOPY_FIFO_ENABLE", "1");
  NCCL_GDRCOPY_FIFO_ENABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_GDRCOPY_FIFO_ENABLE_DEFAULT != NCCL_GDRCOPY_FIFO_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GDRCOPY_FIFO_ENABLE");
  }
  NCCL_GDRCOPY_FLUSH_ENABLE =
      env2num<int64_t>("NCCL_GDRCOPY_FLUSH_ENABLE", "0");
  NCCL_GDRCOPY_FLUSH_ENABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_GDRCOPY_FLUSH_ENABLE_DEFAULT != NCCL_GDRCOPY_FLUSH_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GDRCOPY_FLUSH_ENABLE");
  }
  NCCL_GDRCOPY_SYNC_ENABLE = env2num<int64_t>("NCCL_GDRCOPY_SYNC_ENABLE", "1");
  NCCL_GDRCOPY_SYNC_ENABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_GDRCOPY_SYNC_ENABLE_DEFAULT != NCCL_GDRCOPY_SYNC_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GDRCOPY_SYNC_ENABLE");
  }
  NCCL_GDR_FLUSH_DISABLE = env2num<int64_t>("NCCL_GDR_FLUSH_DISABLE", "0");
  NCCL_GDR_FLUSH_DISABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_GDR_FLUSH_DISABLE_DEFAULT != NCCL_GDR_FLUSH_DISABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GDR_FLUSH_DISABLE");
  }
  NCCL_GRAPH_DUMP_FILE = env2str("NCCL_GRAPH_DUMP_FILE", "");
  NCCL_GRAPH_DUMP_FILE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_GRAPH_DUMP_FILE_DEFAULT != NCCL_GRAPH_DUMP_FILE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_GRAPH_DUMP_FILE");
  }
  NCCL_GRAPH_DUMP_FILE_RANK =
      env2num<int64_t>("NCCL_GRAPH_DUMP_FILE_RANK", "0");
  NCCL_GRAPH_DUMP_FILE_RANK_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_GRAPH_DUMP_FILE_RANK_DEFAULT != NCCL_GRAPH_DUMP_FILE_RANK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GRAPH_DUMP_FILE_RANK");
  }
  NCCL_GRAPH_FILE = env2str("NCCL_GRAPH_FILE", "");
  NCCL_GRAPH_FILE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_GRAPH_FILE_DEFAULT != NCCL_GRAPH_FILE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_GRAPH_FILE");
  }
  NCCL_GRAPH_HELPER_DISABLE =
      env2num<int64_t>("NCCL_GRAPH_HELPER_DISABLE", "0");
  NCCL_GRAPH_HELPER_DISABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_GRAPH_HELPER_DISABLE_DEFAULT != NCCL_GRAPH_HELPER_DISABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GRAPH_HELPER_DISABLE");
  }
  NCCL_GRAPH_MIXING_SUPPORT =
      env2num<int64_t>("NCCL_GRAPH_MIXING_SUPPORT", "1");
  NCCL_GRAPH_MIXING_SUPPORT_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_GRAPH_MIXING_SUPPORT_DEFAULT != NCCL_GRAPH_MIXING_SUPPORT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GRAPH_MIXING_SUPPORT");
  }
  NCCL_GRAPH_REGISTER = env2num<int64_t>("NCCL_GRAPH_REGISTER", "1");
  NCCL_GRAPH_REGISTER_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_GRAPH_REGISTER_DEFAULT != NCCL_GRAPH_REGISTER) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_GRAPH_REGISTER");
  }
  NCCL_GROUP_CUDA_STREAM = env2num<int64_t>("NCCL_GROUP_CUDA_STREAM", "0");
  NCCL_GROUP_CUDA_STREAM_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_GROUP_CUDA_STREAM_DEFAULT != NCCL_GROUP_CUDA_STREAM) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_GROUP_CUDA_STREAM");
  }
  NCCL_HOSTID = env2str("NCCL_HOSTID", "");
  NCCL_HOSTID_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_HOSTID_DEFAULT != NCCL_HOSTID) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_HOSTID");
  }
  NCCL_HPC_JOB_IDS.clear();
  NCCL_HPC_JOB_IDS = env2strlist("NCCL_HPC_JOB_IDS", "");
  NCCL_HPC_JOB_IDS_DEFAULT.clear();
  NCCL_HPC_JOB_IDS_DEFAULT = env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_HPC_JOB_IDS_DEFAULT != NCCL_HPC_JOB_IDS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_HPC_JOB_IDS");
  }
  NCCL_IBVERBS_PATH = env2str("NCCL_IBVERBS_PATH", "libibverbs.so");
  NCCL_IBVERBS_PATH_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "libibverbs.so");

  if (NCCL_IBVERBS_PATH_DEFAULT != NCCL_IBVERBS_PATH) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IBVERBS_PATH");
  }
  NCCL_IB_ADAPTIVE_ROUTING = env2num<int64_t>("NCCL_IB_ADAPTIVE_ROUTING", "-2");
  NCCL_IB_ADAPTIVE_ROUTING_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_IB_ADAPTIVE_ROUTING_DEFAULT != NCCL_IB_ADAPTIVE_ROUTING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_ADAPTIVE_ROUTING");
  }
  NCCL_IB_ADDR_FAMILY = env2str("NCCL_IB_ADDR_FAMILY", "");
  NCCL_IB_ADDR_FAMILY_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_IB_ADDR_FAMILY_DEFAULT != NCCL_IB_ADDR_FAMILY) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_ADDR_FAMILY");
  }
  NCCL_IB_ADDR_RANGE = env2str("NCCL_IB_ADDR_RANGE", "");
  NCCL_IB_ADDR_RANGE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_IB_ADDR_RANGE_DEFAULT != NCCL_IB_ADDR_RANGE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_ADDR_RANGE");
  }
  NCCL_IB_AR_THRESHOLD = env2num<int64_t>("NCCL_IB_AR_THRESHOLD", "8192");
  NCCL_IB_AR_THRESHOLD_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "8192");

  if (NCCL_IB_AR_THRESHOLD_DEFAULT != NCCL_IB_AR_THRESHOLD) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_AR_THRESHOLD");
  }
  if (getenv("NCCL_IB_ASYNC_EVENT_LOOP") == nullptr) {
    NCCL_IB_ASYNC_EVENT_LOOP = NCCL_IB_ASYNC_EVENT_LOOP::baseline;
  } else {
    std::string str(getenv("NCCL_IB_ASYNC_EVENT_LOOP"));
    if (str == std::string("baseline")) {
      NCCL_IB_ASYNC_EVENT_LOOP = NCCL_IB_ASYNC_EVENT_LOOP::baseline;
    } else if (str == std::string("ctran")) {
      NCCL_IB_ASYNC_EVENT_LOOP = NCCL_IB_ASYNC_EVENT_LOOP::ctran;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_IB_ASYNC_EVENT_LOOP", str.c_str());
    }
  }
  NCCL_IB_ASYNC_EVENT_LOOP_DEFAULT = NCCL_IB_ASYNC_EVENT_LOOP::baseline;

  if (NCCL_IB_ASYNC_EVENT_LOOP_DEFAULT != NCCL_IB_ASYNC_EVENT_LOOP) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_ASYNC_EVENT_LOOP");
  }
  NCCL_IB_DATA_DIRECT = env2num<int>("NCCL_IB_DATA_DIRECT", "1");
  NCCL_IB_DATA_DIRECT_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_DATA_DIRECT_DEFAULT != NCCL_IB_DATA_DIRECT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_DATA_DIRECT");
  }
  NCCL_IB_DISABLE = env2num<int64_t>("NCCL_IB_DISABLE", "0");
  NCCL_IB_DISABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_DISABLE_DEFAULT != NCCL_IB_DISABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_DISABLE");
  }
  NCCL_IB_ECE_ENABLE = env2num<int64_t>("NCCL_IB_ECE_ENABLE", "1");
  NCCL_IB_ECE_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_ECE_ENABLE_DEFAULT != NCCL_IB_ECE_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_ECE_ENABLE");
  }
  NCCL_IB_FIFO_TC = env2num<int64_t>("NCCL_IB_FIFO_TC", "-1");
  NCCL_IB_FIFO_TC_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_IB_FIFO_TC_DEFAULT != NCCL_IB_FIFO_TC) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_FIFO_TC");
  }
  NCCL_IB_GID_INDEX = env2num<int64_t>("NCCL_IB_GID_INDEX", "-1");
  NCCL_IB_GID_INDEX_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_IB_GID_INDEX_DEFAULT != NCCL_IB_GID_INDEX) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_GID_INDEX");
  }
  std::vector<std::string> NCCL_IB_HCA_allPrefixes{"^", "="};
  NCCL_IB_HCA.clear();
  std::tie(NCCL_IB_HCA_PREFIX, NCCL_IB_HCA) =
      env2prefixedStrlist("NCCL_IB_HCA", "", NCCL_IB_HCA_allPrefixes);
  NCCL_IB_HCA_DEFAULT.clear();
  std::tie(NCCL_IB_HCA_PREFIX_DEFAULT, NCCL_IB_HCA_DEFAULT) =
      env2prefixedStrlist("NCCL_ENV_DO_NOT_SET", "", NCCL_IB_HCA_allPrefixes);

  if (NCCL_IB_HCA_DEFAULT != NCCL_IB_HCA) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_HCA");
  }
  NCCL_IB_LINK_DOWN_TIMEOUT = env2num<int>("NCCL_IB_LINK_DOWN_TIMEOUT", "0");
  NCCL_IB_LINK_DOWN_TIMEOUT_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_LINK_DOWN_TIMEOUT_DEFAULT != NCCL_IB_LINK_DOWN_TIMEOUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_LINK_DOWN_TIMEOUT");
  }
  NCCL_IB_MERGE_NICS = env2num<int64_t>("NCCL_IB_MERGE_NICS", "1");
  NCCL_IB_MERGE_NICS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_MERGE_NICS_DEFAULT != NCCL_IB_MERGE_NICS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_MERGE_NICS");
  }
  NCCL_IB_MERGE_VFS = env2num<int64_t>("NCCL_IB_MERGE_VFS", "1");
  NCCL_IB_MERGE_VFS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_MERGE_VFS_DEFAULT != NCCL_IB_MERGE_VFS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_MERGE_VFS");
  }
  NCCL_IB_MQP_RETRY_ALL = env2num<int64_t>("NCCL_IB_MQP_RETRY_ALL", "0");
  NCCL_IB_MQP_RETRY_ALL_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_MQP_RETRY_ALL_DEFAULT != NCCL_IB_MQP_RETRY_ALL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_MQP_RETRY_ALL");
  }
  NCCL_IB_MQP_RETRY_CNT = env2num<int64_t>("NCCL_IB_MQP_RETRY_CNT", "34");
  NCCL_IB_MQP_RETRY_CNT_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "34");

  if (NCCL_IB_MQP_RETRY_CNT_DEFAULT != NCCL_IB_MQP_RETRY_CNT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_MQP_RETRY_CNT");
  }
  NCCL_IB_MQP_RETRY_SLEEP_MSEC =
      env2num<int64_t>("NCCL_IB_MQP_RETRY_SLEEP_MSEC", "100");
  NCCL_IB_MQP_RETRY_SLEEP_MSEC_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "100");

  if (NCCL_IB_MQP_RETRY_SLEEP_MSEC_DEFAULT != NCCL_IB_MQP_RETRY_SLEEP_MSEC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_IB_MQP_RETRY_SLEEP_MSEC");
  }
  NCCL_IB_PCI_RELAXED_ORDERING =
      env2num<int64_t>("NCCL_IB_PCI_RELAXED_ORDERING", "2");
  NCCL_IB_PCI_RELAXED_ORDERING_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_IB_PCI_RELAXED_ORDERING_DEFAULT != NCCL_IB_PCI_RELAXED_ORDERING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_IB_PCI_RELAXED_ORDERING");
  }
  NCCL_IB_PKEY = env2num<int64_t>("NCCL_IB_PKEY", "0");
  NCCL_IB_PKEY_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_PKEY_DEFAULT != NCCL_IB_PKEY) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_PKEY");
  }
  NCCL_IB_QPS_PER_CONNECTION =
      env2num<int64_t>("NCCL_IB_QPS_PER_CONNECTION", "1");
  NCCL_IB_QPS_PER_CONNECTION_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_QPS_PER_CONNECTION_DEFAULT != NCCL_IB_QPS_PER_CONNECTION) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_QPS_PER_CONNECTION");
  }
  NCCL_IB_RETRY_CNT = env2num<int64_t>("NCCL_IB_RETRY_CNT", "7");
  NCCL_IB_RETRY_CNT_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "7");

  if (NCCL_IB_RETRY_CNT_DEFAULT != NCCL_IB_RETRY_CNT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_RETRY_CNT");
  }
  NCCL_IB_RETURN_ASYNC_EVENTS =
      env2num<int64_t>("NCCL_IB_RETURN_ASYNC_EVENTS", "1");
  NCCL_IB_RETURN_ASYNC_EVENTS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_RETURN_ASYNC_EVENTS_DEFAULT != NCCL_IB_RETURN_ASYNC_EVENTS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_RETURN_ASYNC_EVENTS");
  }
  NCCL_IB_ROCE_VERSION_NUM = env2num<int64_t>("NCCL_IB_ROCE_VERSION_NUM", "2");
  NCCL_IB_ROCE_VERSION_NUM_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_IB_ROCE_VERSION_NUM_DEFAULT != NCCL_IB_ROCE_VERSION_NUM) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_ROCE_VERSION_NUM");
  }
  NCCL_IB_ROUTABLE_FLID_GID_INDEX =
      env2num<int64_t>("NCCL_IB_ROUTABLE_FLID_GID_INDEX", "1");
  NCCL_IB_ROUTABLE_FLID_GID_INDEX_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_IB_ROUTABLE_FLID_GID_INDEX_DEFAULT !=
      NCCL_IB_ROUTABLE_FLID_GID_INDEX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_IB_ROUTABLE_FLID_GID_INDEX");
  }
  NCCL_IB_SL = env2num<int64_t>("NCCL_IB_SL", "0");
  NCCL_IB_SL_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_SL_DEFAULT != NCCL_IB_SL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_SL");
  }
  NCCL_IB_SPLIT_DATA_ON_QPS =
      env2num<int64_t>("NCCL_IB_SPLIT_DATA_ON_QPS", "0");
  NCCL_IB_SPLIT_DATA_ON_QPS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_SPLIT_DATA_ON_QPS_DEFAULT != NCCL_IB_SPLIT_DATA_ON_QPS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_SPLIT_DATA_ON_QPS");
  }
  NCCL_IB_TC = env2num<int64_t>("NCCL_IB_TC", "0");
  NCCL_IB_TC_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_TC_DEFAULT != NCCL_IB_TC) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_TC");
  }
  NCCL_IB_TIMEOUT = env2num<int64_t>("NCCL_IB_TIMEOUT", "20");
  NCCL_IB_TIMEOUT_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_IB_TIMEOUT_DEFAULT != NCCL_IB_TIMEOUT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_TIMEOUT");
  }
  NCCL_IB_USE_INLINE = env2num<int64_t>("NCCL_IB_USE_INLINE", "0");
  NCCL_IB_USE_INLINE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_USE_INLINE_DEFAULT != NCCL_IB_USE_INLINE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_IB_USE_INLINE");
  }
  NCCL_IB_WARN_RAIL_LOCAL = env2num<int64_t>("NCCL_IB_WARN_RAIL_LOCAL", "0");
  NCCL_IB_WARN_RAIL_LOCAL_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IB_WARN_RAIL_LOCAL_DEFAULT != NCCL_IB_WARN_RAIL_LOCAL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IB_WARN_RAIL_LOCAL");
  }
  NCCL_IGNORE_CPU_AFFINITY = env2num<int64_t>("NCCL_IGNORE_CPU_AFFINITY", "0");
  NCCL_IGNORE_CPU_AFFINITY_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IGNORE_CPU_AFFINITY_DEFAULT != NCCL_IGNORE_CPU_AFFINITY) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IGNORE_CPU_AFFINITY");
  }
  NCCL_IGNORE_DISABLED_P2P = env2num<int64_t>("NCCL_IGNORE_DISABLED_P2P", "0");
  NCCL_IGNORE_DISABLED_P2P_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_IGNORE_DISABLED_P2P_DEFAULT != NCCL_IGNORE_DISABLED_P2P) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_IGNORE_DISABLED_P2P");
  }
  NCCL_IGNORE_TOPO_LOAD_FAILURE =
      env2bool("NCCL_IGNORE_TOPO_LOAD_FAILURE", "False");
  NCCL_IGNORE_TOPO_LOAD_FAILURE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_IGNORE_TOPO_LOAD_FAILURE_DEFAULT != NCCL_IGNORE_TOPO_LOAD_FAILURE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_IGNORE_TOPO_LOAD_FAILURE");
  }
  NCCL_L1_SHARED_MEMORY_CARVEOUT =
      env2num<int64_t>("NCCL_L1_SHARED_MEMORY_CARVEOUT", "0");
  NCCL_L1_SHARED_MEMORY_CARVEOUT_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_L1_SHARED_MEMORY_CARVEOUT_DEFAULT !=
      NCCL_L1_SHARED_MEMORY_CARVEOUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_L1_SHARED_MEMORY_CARVEOUT");
  }
  NCCL_LAUNCH_MODE = env2str("NCCL_LAUNCH_MODE", "");
  NCCL_LAUNCH_MODE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_LAUNCH_MODE_DEFAULT != NCCL_LAUNCH_MODE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_LAUNCH_MODE");
  }
  NCCL_LAUNCH_ORDER_IMPLICIT = env2bool("NCCL_LAUNCH_ORDER_IMPLICIT", "False");
  NCCL_LAUNCH_ORDER_IMPLICIT_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_LAUNCH_ORDER_IMPLICIT_DEFAULT != NCCL_LAUNCH_ORDER_IMPLICIT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_LAUNCH_ORDER_IMPLICIT");
  }
  NCCL_LAUNCH_RACE_FATAL = env2bool("NCCL_LAUNCH_RACE_FATAL", "True");
  NCCL_LAUNCH_RACE_FATAL_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_LAUNCH_RACE_FATAL_DEFAULT != NCCL_LAUNCH_RACE_FATAL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_LAUNCH_RACE_FATAL");
  }
  NCCL_LAZY_SETUP_CHANNELS = env2bool("NCCL_LAZY_SETUP_CHANNELS", "False");
  NCCL_LAZY_SETUP_CHANNELS_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_LAZY_SETUP_CHANNELS_DEFAULT != NCCL_LAZY_SETUP_CHANNELS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_LAZY_SETUP_CHANNELS");
  }
  NCCL_LEGACY_CUDA_REGISTER =
      env2num<int64_t>("NCCL_LEGACY_CUDA_REGISTER", "0");
  NCCL_LEGACY_CUDA_REGISTER_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_LEGACY_CUDA_REGISTER_DEFAULT != NCCL_LEGACY_CUDA_REGISTER) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_LEGACY_CUDA_REGISTER");
  }
  NCCL_LL128_BUFFSIZE = env2num<int64_t>("NCCL_LL128_BUFFSIZE", "-2");
  NCCL_LL128_BUFFSIZE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_LL128_BUFFSIZE_DEFAULT != NCCL_LL128_BUFFSIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_LL128_BUFFSIZE");
  }
  NCCL_LL128_C2C = env2bool("NCCL_LL128_C2C", "True");
  NCCL_LL128_C2C_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_LL128_C2C_DEFAULT != NCCL_LL128_C2C) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_LL128_C2C");
  }
  NCCL_LL128_NTHREADS = env2num<int64_t>("NCCL_LL128_NTHREADS", "-2");
  NCCL_LL128_NTHREADS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_LL128_NTHREADS_DEFAULT != NCCL_LL128_NTHREADS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_LL128_NTHREADS");
  }
  NCCL_LL_BUFFSIZE = env2num<int64_t>("NCCL_LL_BUFFSIZE", "-2");
  NCCL_LL_BUFFSIZE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_LL_BUFFSIZE_DEFAULT != NCCL_LL_BUFFSIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_LL_BUFFSIZE");
  }
  NCCL_LOCAL_REGISTER = env2num<int64_t>("NCCL_LOCAL_REGISTER", "0");
  NCCL_LOCAL_REGISTER_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_LOCAL_REGISTER_DEFAULT != NCCL_LOCAL_REGISTER) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_LOCAL_REGISTER");
  }
  NCCL_MAPPERTRACE_COLL_RECORD_MAX =
      env2num<uint64_t>("NCCL_MAPPERTRACE_COLL_RECORD_MAX", "20");
  NCCL_MAPPERTRACE_COLL_RECORD_MAX_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_MAPPERTRACE_COLL_RECORD_MAX_DEFAULT !=
      NCCL_MAPPERTRACE_COLL_RECORD_MAX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_MAPPERTRACE_COLL_RECORD_MAX");
  }
  NCCL_MAPPERTRACE_ENABLE = env2bool("NCCL_MAPPERTRACE_ENABLE", "True");
  NCCL_MAPPERTRACE_ENABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_MAPPERTRACE_ENABLE_DEFAULT != NCCL_MAPPERTRACE_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MAPPERTRACE_ENABLE");
  }
  NCCL_MAPPERTRACE_EVENT_RECORD_MAX =
      env2num<uint64_t>("NCCL_MAPPERTRACE_EVENT_RECORD_MAX", "100000");
  NCCL_MAPPERTRACE_EVENT_RECORD_MAX_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "100000");

  if (NCCL_MAPPERTRACE_EVENT_RECORD_MAX_DEFAULT !=
      NCCL_MAPPERTRACE_EVENT_RECORD_MAX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_MAPPERTRACE_EVENT_RECORD_MAX");
  }
  NCCL_MASTER_ADDR = env2str("MASTER_ADDR", "");
  NCCL_MASTER_ADDR_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_MASTER_ADDR_DEFAULT != NCCL_MASTER_ADDR) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MASTER_ADDR");
  }
  NCCL_MASTER_PORT = env2num<uint16_t>("MASTER_PORT", "0");
  NCCL_MASTER_PORT_DEFAULT = env2num<uint16_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_MASTER_PORT_DEFAULT != NCCL_MASTER_PORT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MASTER_PORT");
  }
  NCCL_MAX_CTAS = env2num<int>("NCCL_MAX_CTAS", "MIN");
  NCCL_MAX_CTAS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_MAX_CTAS_DEFAULT != NCCL_MAX_CTAS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MAX_CTAS");
  }
  NCCL_MAX_NCHANNELS = env2num<int64_t>("NCCL_MAX_NCHANNELS", "-2");
  NCCL_MAX_NCHANNELS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_MAX_NCHANNELS_DEFAULT != NCCL_MAX_NCHANNELS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MAX_NCHANNELS");
  }
  NCCL_MAX_NRINGS = env2num<int>("NCCL_MAX_NRINGS", "-2");
  NCCL_MAX_NRINGS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_MAX_NRINGS_DEFAULT != NCCL_MAX_NRINGS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MAX_NRINGS");
  }
  NCCL_MAX_P2P_NCHANNELS = env2num<int64_t>("NCCL_MAX_P2P_NCHANNELS", "64");
  NCCL_MAX_P2P_NCHANNELS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "64");

  if (NCCL_MAX_P2P_NCHANNELS_DEFAULT != NCCL_MAX_P2P_NCHANNELS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MAX_P2P_NCHANNELS");
  }
  NCCL_MEMORY_EVENT_LOGGING = env2str("NCCL_MEMORY_EVENT_LOGGING", "");
  NCCL_MEMORY_EVENT_LOGGING_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_MEMORY_EVENT_LOGGING_DEFAULT != NCCL_MEMORY_EVENT_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MEMORY_EVENT_LOGGING");
  }
  NCCL_MEM_ENABLE_MC_ALIGNMENT =
      env2bool("NCCL_MEM_ENABLE_MC_ALIGNMENT", "False");
  NCCL_MEM_ENABLE_MC_ALIGNMENT_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_MEM_ENABLE_MC_ALIGNMENT_DEFAULT != NCCL_MEM_ENABLE_MC_ALIGNMENT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_MEM_ENABLE_MC_ALIGNMENT");
  }
  NCCL_MEM_POOL_SIZE = env2num<size_t>("NCCL_MEM_POOL_SIZE", "0");
  NCCL_MEM_POOL_SIZE_DEFAULT = env2num<size_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_MEM_POOL_SIZE_DEFAULT != NCCL_MEM_POOL_SIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MEM_POOL_SIZE");
  }
  if (getenv("NCCL_MEM_SYNC_DOMAIN") == nullptr) {
    NCCL_MEM_SYNC_DOMAIN = NCCL_MEM_SYNC_DOMAIN::remote;
  } else {
    std::string str(getenv("NCCL_MEM_SYNC_DOMAIN"));
    if (str == std::string("local")) {
      NCCL_MEM_SYNC_DOMAIN = NCCL_MEM_SYNC_DOMAIN::local;
    } else if (str == std::string("remote")) {
      NCCL_MEM_SYNC_DOMAIN = NCCL_MEM_SYNC_DOMAIN::remote;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_MEM_SYNC_DOMAIN", str.c_str());
    }
  }
  NCCL_MEM_SYNC_DOMAIN_DEFAULT = NCCL_MEM_SYNC_DOMAIN::remote;

  if (NCCL_MEM_SYNC_DOMAIN_DEFAULT != NCCL_MEM_SYNC_DOMAIN) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MEM_SYNC_DOMAIN");
  }
  NCCL_MEM_USE_SLAB_ALLOCATOR =
      env2bool("NCCL_MEM_USE_SLAB_ALLOCATOR", "False");
  NCCL_MEM_USE_SLAB_ALLOCATOR_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_MEM_USE_SLAB_ALLOCATOR_DEFAULT != NCCL_MEM_USE_SLAB_ALLOCATOR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MEM_USE_SLAB_ALLOCATOR");
  }
  NCCL_MIN_CTAS = env2num<int>("NCCL_MIN_CTAS", "MIN");
  NCCL_MIN_CTAS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_MIN_CTAS_DEFAULT != NCCL_MIN_CTAS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MIN_CTAS");
  }
  NCCL_MIN_NCHANNELS = env2num<int64_t>("NCCL_MIN_NCHANNELS", "-2");
  NCCL_MIN_NCHANNELS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_MIN_NCHANNELS_DEFAULT != NCCL_MIN_NCHANNELS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MIN_NCHANNELS");
  }
  NCCL_MIN_NRINGS = env2num<int>("NCCL_MIN_NRINGS", "-2");
  NCCL_MIN_NRINGS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_MIN_NRINGS_DEFAULT != NCCL_MIN_NRINGS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MIN_NRINGS");
  }
  NCCL_MIN_P2P_NCHANNELS = env2num<int64_t>("NCCL_MIN_P2P_NCHANNELS", "1");
  NCCL_MIN_P2P_NCHANNELS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_MIN_P2P_NCHANNELS_DEFAULT != NCCL_MIN_P2P_NCHANNELS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MIN_P2P_NCHANNELS");
  }
  NCCL_MNNVL_CLIQUE_ID = env2num<int64_t>("NCCL_MNNVL_CLIQUE_ID", "-1");
  NCCL_MNNVL_CLIQUE_ID_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_MNNVL_CLIQUE_ID_DEFAULT != NCCL_MNNVL_CLIQUE_ID) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MNNVL_CLIQUE_ID");
  }
  NCCL_MNNVL_CLIQUE_SIZE = env2num<int>("NCCL_MNNVL_CLIQUE_SIZE", "0");
  NCCL_MNNVL_CLIQUE_SIZE_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_MNNVL_CLIQUE_SIZE_DEFAULT != NCCL_MNNVL_CLIQUE_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MNNVL_CLIQUE_SIZE");
  }
  NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE =
      env2bool("NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE", "False");
  NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE_DEFAULT !=
      NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_MNNVL_DETERMINISTIC_COLLECTIVE_ENABLE");
  }
  NCCL_MNNVL_ENABLE = env2num<int64_t>("NCCL_MNNVL_ENABLE", "2");
  NCCL_MNNVL_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_MNNVL_ENABLE_DEFAULT != NCCL_MNNVL_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MNNVL_ENABLE");
  }
  NCCL_MNNVL_SCATTER_NETS_ENABLE =
      env2bool("NCCL_MNNVL_SCATTER_NETS_ENABLE", "False");
  NCCL_MNNVL_SCATTER_NETS_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_MNNVL_SCATTER_NETS_ENABLE_DEFAULT !=
      NCCL_MNNVL_SCATTER_NETS_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_MNNVL_SCATTER_NETS_ENABLE");
  }
  NCCL_MNNVL_TRUNK_DISABLE = env2bool("NCCL_MNNVL_TRUNK_DISABLE", "False");
  NCCL_MNNVL_TRUNK_DISABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_MNNVL_TRUNK_DISABLE_DEFAULT != NCCL_MNNVL_TRUNK_DISABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_MNNVL_TRUNK_DISABLE");
  }
  NCCL_MNNVL_UUID = env2num<int64_t>("NCCL_MNNVL_UUID", "-1");
  NCCL_MNNVL_UUID_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_MNNVL_UUID_DEFAULT != NCCL_MNNVL_UUID) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_MNNVL_UUID");
  }
  NCCL_NCHANNELS_PER_NET_PEER =
      env2num<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", "-1");
  NCCL_NCHANNELS_PER_NET_PEER_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_NCHANNELS_PER_NET_PEER_DEFAULT != NCCL_NCHANNELS_PER_NET_PEER) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_NCHANNELS_PER_NET_PEER");
  }
  NCCL_NETDEVS_POLICY = env2str("NCCL_NETDEVS_POLICY", "");
  NCCL_NETDEVS_POLICY_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_NETDEVS_POLICY_DEFAULT != NCCL_NETDEVS_POLICY) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NETDEVS_POLICY");
  }
  NCCL_NETWORK = env2str("NCCL_NET", "");
  NCCL_NETWORK_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_NETWORK_DEFAULT != NCCL_NETWORK) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NETWORK");
  }
  NCCL_NETWORK_PERF_MONITOR_ENABLE =
      env2bool("NCCL_NETWORK_PERF_MONITOR_ENABLE", "False");
  NCCL_NETWORK_PERF_MONITOR_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_NETWORK_PERF_MONITOR_ENABLE_DEFAULT !=
      NCCL_NETWORK_PERF_MONITOR_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_NETWORK_PERF_MONITOR_ENABLE");
  }
  NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE =
      env2bool("NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE", "False");
  NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE_DEFAULT !=
      NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_NETWORK_PERF_MONITOR_SCUBA_LOGGING_ENABLE");
  }
  NCCL_NET_DISABLE_INTRA = env2num<int64_t>("NCCL_NET_DISABLE_INTRA", "0");
  NCCL_NET_DISABLE_INTRA_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_NET_DISABLE_INTRA_DEFAULT != NCCL_NET_DISABLE_INTRA) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_NET_DISABLE_INTRA");
  }
  NCCL_NET_FORCE_FLUSH = env2num<int64_t>("NCCL_NET_FORCE_FLUSH", "0");
  NCCL_NET_FORCE_FLUSH_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_NET_FORCE_FLUSH_DEFAULT != NCCL_NET_FORCE_FLUSH) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_FORCE_FLUSH");
  }
  NCCL_NET_FORCE_MERGE = env2str("NCCL_NET_FORCE_MERGE", "");
  NCCL_NET_FORCE_MERGE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_NET_FORCE_MERGE_DEFAULT != NCCL_NET_FORCE_MERGE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_FORCE_MERGE");
  }
  NCCL_NET_GDR_C2C = env2bool("NCCL_NET_GDR_C2C", "False");
  NCCL_NET_GDR_C2C_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_NET_GDR_C2C_DEFAULT != NCCL_NET_GDR_C2C) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_GDR_C2C");
  }
  NCCL_NET_GDR_LEVEL = env2str("NCCL_NET_GDR_LEVEL", "");
  NCCL_NET_GDR_LEVEL_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_NET_GDR_LEVEL_DEFAULT != NCCL_NET_GDR_LEVEL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_GDR_LEVEL");
  }
  NCCL_NET_GDR_READ = env2num<int64_t>("NCCL_NET_GDR_READ", "-2");
  NCCL_NET_GDR_READ_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_NET_GDR_READ_DEFAULT != NCCL_NET_GDR_READ) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_GDR_READ");
  }
  NCCL_NET_MERGE_LEVEL = env2str("NCCL_NET_MERGE_LEVEL", "");
  NCCL_NET_MERGE_LEVEL_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_NET_MERGE_LEVEL_DEFAULT != NCCL_NET_MERGE_LEVEL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_MERGE_LEVEL");
  }
  NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR =
      env2num<int64_t>("NCCL_NET_OPTIONAL_RECV_COMPLETION", "1");
  NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR_DEFAULT !=
      NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_NET_OPTIONAL_RECV_COMPLETION_CVAR");
  }
  NCCL_NET_OVERHEAD = env2num<int64_t>("NCCL_NET_OVERHEAD", "-2");
  NCCL_NET_OVERHEAD_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_NET_OVERHEAD_DEFAULT != NCCL_NET_OVERHEAD) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_OVERHEAD");
  }
  NCCL_NET_PLUGIN = env2str("NCCL_NET_PLUGIN", "");
  NCCL_NET_PLUGIN_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_NET_PLUGIN_DEFAULT != NCCL_NET_PLUGIN) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_PLUGIN");
  }
  NCCL_NET_PLUGIN_REF_COUNT = env2num<int>("NCCL_NET_PLUGIN_REF_COUNT", "1");
  NCCL_NET_PLUGIN_REF_COUNT_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_NET_PLUGIN_REF_COUNT_DEFAULT != NCCL_NET_PLUGIN_REF_COUNT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_NET_PLUGIN_REF_COUNT");
  }
  NCCL_NET_SHARED_BUFFERS = env2num<int64_t>("NCCL_NET_SHARED_BUFFERS", "-2");
  NCCL_NET_SHARED_BUFFERS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_NET_SHARED_BUFFERS_DEFAULT != NCCL_NET_SHARED_BUFFERS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_NET_SHARED_BUFFERS");
  }
  NCCL_NET_SHARED_COMMS = env2num<int64_t>("NCCL_NET_SHARED_COMMS", "1");
  NCCL_NET_SHARED_COMMS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_NET_SHARED_COMMS_DEFAULT != NCCL_NET_SHARED_COMMS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NET_SHARED_COMMS");
  }
  NCCL_NSOCKS_PERTHREAD = env2num<int64_t>("NCCL_NSOCKS_PERTHREAD", "-2");
  NCCL_NSOCKS_PERTHREAD_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_NSOCKS_PERTHREAD_DEFAULT != NCCL_NSOCKS_PERTHREAD) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NSOCKS_PERTHREAD");
  }
  NCCL_NTHREADS = env2num<int64_t>("NCCL_NTHREADS", "-2");
  NCCL_NTHREADS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_NTHREADS_DEFAULT != NCCL_NTHREADS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NTHREADS");
  }
  NCCL_NVB_DISABLE = env2num<int64_t>("NCCL_NVB_DISABLE", "0");
  NCCL_NVB_DISABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_NVB_DISABLE_DEFAULT != NCCL_NVB_DISABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NVB_DISABLE");
  }
  NCCL_NVB_PRECONNECT = env2num<int64_t>("NCCL_NVB_PRECONNECT", "1");
  NCCL_NVB_PRECONNECT_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_NVB_PRECONNECT_DEFAULT != NCCL_NVB_PRECONNECT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NVB_PRECONNECT");
  }
  NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE =
      env2bool("NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE", "False");
  NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE_DEFAULT !=
      NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_NVLINK_UTIL_CENTRIC_SCHED_ENABLE");
  }
  NCCL_NVLSTREE_MAX_CHUNKSIZE =
      env2num<int64_t>("NCCL_NVLSTREE_MAX_CHUNKSIZE", "-2");
  NCCL_NVLSTREE_MAX_CHUNKSIZE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_NVLSTREE_MAX_CHUNKSIZE_DEFAULT != NCCL_NVLSTREE_MAX_CHUNKSIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_NVLSTREE_MAX_CHUNKSIZE");
  }
  NCCL_NVLS_CHUNKSIZE = env2num<int64_t>("NCCL_NVLS_CHUNKSIZE", "131072");
  NCCL_NVLS_CHUNKSIZE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_NVLS_CHUNKSIZE_DEFAULT != NCCL_NVLS_CHUNKSIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NVLS_CHUNKSIZE");
  }
  NCCL_NVLS_ENABLE = env2num<int64_t>("NCCL_NVLS_ENABLE", "2");
  NCCL_NVLS_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_NVLS_ENABLE_DEFAULT != NCCL_NVLS_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NVLS_ENABLE");
  }
  NCCL_NVLS_NCHANNELS = env2num<int>("NCCL_NVLS_NCHANNELS", "MIN");
  NCCL_NVLS_NCHANNELS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "MIN");

  if (NCCL_NVLS_NCHANNELS_DEFAULT != NCCL_NVLS_NCHANNELS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NVLS_NCHANNELS");
  }
  NCCL_NVTX_DISABLE = env2bool("NCCL_NVTX_DISABLE", "False");
  NCCL_NVTX_DISABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_NVTX_DISABLE_DEFAULT != NCCL_NVTX_DISABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_NVTX_DISABLE");
  }
  NCCL_OOB_NET_ENABLE = env2num<int64_t>("NCCL_OOB_NET_ENABLE", "0");
  NCCL_OOB_NET_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_OOB_NET_ENABLE_DEFAULT != NCCL_OOB_NET_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_OOB_NET_ENABLE");
  }
  NCCL_OOB_NET_IFNAME = env2str("NCCL_OOB_NET_IFNAME", "");
  NCCL_OOB_NET_IFNAME_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_OOB_NET_IFNAME_DEFAULT != NCCL_OOB_NET_IFNAME) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_OOB_NET_IFNAME");
  }
  NCCL_P2P_DIRECT_DISABLE = env2num<int64_t>("NCCL_P2P_DIRECT_DISABLE", "0");
  NCCL_P2P_DIRECT_DISABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_P2P_DIRECT_DISABLE_DEFAULT != NCCL_P2P_DIRECT_DISABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_P2P_DIRECT_DISABLE");
  }
  NCCL_P2P_DISABLE = env2bool("NCCL_P2P_DISABLE", "False");
  NCCL_P2P_DISABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_P2P_DISABLE_DEFAULT != NCCL_P2P_DISABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_P2P_DISABLE");
  }
  NCCL_P2P_LEVEL = env2str("NCCL_P2P_LEVEL", "");
  NCCL_P2P_LEVEL_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_P2P_LEVEL_DEFAULT != NCCL_P2P_LEVEL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_P2P_LEVEL");
  }
  NCCL_P2P_LL_THRESHOLD = env2num<int64_t>("NCCL_P2P_LL_THRESHOLD", "16384");
  NCCL_P2P_LL_THRESHOLD_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "16384");

  if (NCCL_P2P_LL_THRESHOLD_DEFAULT != NCCL_P2P_LL_THRESHOLD) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_P2P_LL_THRESHOLD");
  }
  NCCL_P2P_NET_CHUNKSIZE = env2num<int64_t>("NCCL_P2P_NET_CHUNKSIZE", "131072");
  NCCL_P2P_NET_CHUNKSIZE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_P2P_NET_CHUNKSIZE_DEFAULT != NCCL_P2P_NET_CHUNKSIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_P2P_NET_CHUNKSIZE");
  }
  NCCL_P2P_NVL_CHUNKSIZE = env2num<int64_t>("NCCL_P2P_NVL_CHUNKSIZE", "524288");
  NCCL_P2P_NVL_CHUNKSIZE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "524288");

  if (NCCL_P2P_NVL_CHUNKSIZE_DEFAULT != NCCL_P2P_NVL_CHUNKSIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_P2P_NVL_CHUNKSIZE");
  }
  NCCL_P2P_PCI_CHUNKSIZE = env2num<int64_t>("NCCL_P2P_PCI_CHUNKSIZE", "131072");
  NCCL_P2P_PCI_CHUNKSIZE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "131072");

  if (NCCL_P2P_PCI_CHUNKSIZE_DEFAULT != NCCL_P2P_PCI_CHUNKSIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_P2P_PCI_CHUNKSIZE");
  }
  NCCL_P2P_PXN_LEVEL = env2num<int64_t>("NCCL_P2P_PXN_LEVEL", "2");
  NCCL_P2P_PXN_LEVEL_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_P2P_PXN_LEVEL_DEFAULT != NCCL_P2P_PXN_LEVEL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_P2P_PXN_LEVEL");
  }
  NCCL_P2P_READ_ENABLE = env2num<int64_t>("NCCL_P2P_READ_ENABLE", "-2");
  NCCL_P2P_READ_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_P2P_READ_ENABLE_DEFAULT != NCCL_P2P_READ_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_P2P_READ_ENABLE");
  }
  NCCL_P2P_USE_CUDA_MEMCPY = env2num<int64_t>("NCCL_P2P_USE_CUDA_MEMCPY", "0");
  NCCL_P2P_USE_CUDA_MEMCPY_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_P2P_USE_CUDA_MEMCPY_DEFAULT != NCCL_P2P_USE_CUDA_MEMCPY) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_P2P_USE_CUDA_MEMCPY");
  }
  NCCL_PAT_ENABLE = env2num<int64_t>("NCCL_PAT_ENABLE", "0");
  NCCL_PAT_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_PAT_ENABLE_DEFAULT != NCCL_PAT_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PAT_ENABLE");
  }
  NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES =
      env2num<int>("NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES", "20");
  NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES_DEFAULT !=
      NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_PROCESS_GLOBAL_ERRORS_MAX_STACK_TRACES");
  }
  NCCL_PROFILER_PLUGIN = env2str("NCCL_PROFILER_PLUGIN", "");
  NCCL_PROFILER_PLUGIN_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_PROFILER_PLUGIN_DEFAULT != NCCL_PROFILER_PLUGIN) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PROFILER_PLUGIN");
  }
  NCCL_PROGRESS_APPENDOP_FREQ =
      env2num<int64_t>("NCCL_PROGRESS_APPENDOP_FREQ", "8");
  NCCL_PROGRESS_APPENDOP_FREQ_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "8");

  if (NCCL_PROGRESS_APPENDOP_FREQ_DEFAULT != NCCL_PROGRESS_APPENDOP_FREQ) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_PROGRESS_APPENDOP_FREQ");
  }
  NCCL_PROTO = env2str("NCCL_PROTO", "");
  NCCL_PROTO_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_PROTO_DEFAULT != NCCL_PROTO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PROTO");
  }
  NCCL_PROXYMOCK_NET_SEND_FAILURE.clear();
  NCCL_PROXYMOCK_NET_SEND_FAILURE =
      env2strlist("NCCL_PROXYMOCK_NET_SEND_FAILURE", "");
  NCCL_PROXYMOCK_NET_SEND_FAILURE_DEFAULT.clear();
  NCCL_PROXYMOCK_NET_SEND_FAILURE_DEFAULT =
      env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_PROXYMOCK_NET_SEND_FAILURE_DEFAULT !=
      NCCL_PROXYMOCK_NET_SEND_FAILURE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_PROXYMOCK_NET_SEND_FAILURE");
  }
  NCCL_PROXYTRACE.clear();
  NCCL_PROXYTRACE = env2strlist("NCCL_PROXYTRACE", "");
  NCCL_PROXYTRACE_DEFAULT.clear();
  NCCL_PROXYTRACE_DEFAULT = env2strlist("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_PROXYTRACE_DEFAULT != NCCL_PROXYTRACE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PROXYTRACE");
  }
  NCCL_PROXYTRACE_RECORD_MAX = env2num<int>("NCCL_PROXYTRACE_RECORD_MAX", "20");
  NCCL_PROXYTRACE_RECORD_MAX_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_PROXYTRACE_RECORD_MAX_DEFAULT != NCCL_PROXYTRACE_RECORD_MAX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_PROXYTRACE_RECORD_MAX");
  }
  NCCL_PROXY_APPEND_BATCH_SIZE =
      env2num<int64_t>("NCCL_PROXY_APPEND_BATCH_SIZE", "16");
  NCCL_PROXY_APPEND_BATCH_SIZE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "16");

  if (NCCL_PROXY_APPEND_BATCH_SIZE_DEFAULT != NCCL_PROXY_APPEND_BATCH_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_PROXY_APPEND_BATCH_SIZE");
  }
  NCCL_PROXY_CPUSET = env2str("NCCL_PROXY_CPUSET", "");
  NCCL_PROXY_CPUSET_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_PROXY_CPUSET_DEFAULT != NCCL_PROXY_CPUSET) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PROXY_CPUSET");
  }
  NCCL_PROXY_DUMP_SIGNAL = env2num<int64_t>("NCCL_PROXY_DUMP_SIGNAL", "-1");
  NCCL_PROXY_DUMP_SIGNAL_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_PROXY_DUMP_SIGNAL_DEFAULT != NCCL_PROXY_DUMP_SIGNAL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_PROXY_DUMP_SIGNAL");
  }
  NCCL_PXN_C2C = env2bool("NCCL_PXN_C2C", "False");
  NCCL_PXN_C2C_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_PXN_C2C_DEFAULT != NCCL_PXN_C2C) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PXN_C2C");
  }
  NCCL_PXN_DISABLE = env2num<int64_t>("NCCL_PXN_DISABLE", "0");
  NCCL_PXN_DISABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_PXN_DISABLE_DEFAULT != NCCL_PXN_DISABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_PXN_DISABLE");
  }
  NCCL_RAS_ADDR = env2str("NCCL_RAS_ADDR", "");
  NCCL_RAS_ADDR_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_RAS_ADDR_DEFAULT != NCCL_RAS_ADDR) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_RAS_ADDR");
  }
  NCCL_RAS_ENABLE = env2num<int64_t>("NCCL_RAS_ENABLE", "0");
  NCCL_RAS_ENABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_RAS_ENABLE_DEFAULT != NCCL_RAS_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_RAS_ENABLE");
  }
  NCCL_RAS_TIMEOUT_FACTOR = env2num<int64_t>("NCCL_RAS_TIMEOUT_FACTOR", "1");
  NCCL_RAS_TIMEOUT_FACTOR_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_RAS_TIMEOUT_FACTOR_DEFAULT != NCCL_RAS_TIMEOUT_FACTOR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_RAS_TIMEOUT_FACTOR");
  }
  if (getenv("NCCL_REDUCESCATTER_ALGO") == nullptr) {
    NCCL_REDUCESCATTER_ALGO = NCCL_REDUCESCATTER_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_REDUCESCATTER_ALGO"));
    if (str == std::string("orig")) {
      NCCL_REDUCESCATTER_ALGO = NCCL_REDUCESCATTER_ALGO::orig;
    } else if (str == std::string("ctran")) {
      NCCL_REDUCESCATTER_ALGO = NCCL_REDUCESCATTER_ALGO::ctran;
    } else if (str == std::string("ctdirect")) {
      NCCL_REDUCESCATTER_ALGO = NCCL_REDUCESCATTER_ALGO::ctdirect;
    } else if (str == std::string("ctring")) {
      NCCL_REDUCESCATTER_ALGO = NCCL_REDUCESCATTER_ALGO::ctring;
    } else if (str == std::string("ctrhd")) {
      NCCL_REDUCESCATTER_ALGO = NCCL_REDUCESCATTER_ALGO::ctrhd;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_REDUCESCATTER_ALGO", str.c_str());
    }
  }
  NCCL_REDUCESCATTER_ALGO_DEFAULT = NCCL_REDUCESCATTER_ALGO::orig;

  if (NCCL_REDUCESCATTER_ALGO_DEFAULT != NCCL_REDUCESCATTER_ALGO) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_REDUCESCATTER_ALGO");
  }
  NCCL_REPORT_CONNECT_PROGRESS =
      env2num<int64_t>("NCCL_REPORT_CONNECT_PROGRESS", "0");
  NCCL_REPORT_CONNECT_PROGRESS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_REPORT_CONNECT_PROGRESS_DEFAULT != NCCL_REPORT_CONNECT_PROGRESS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_REPORT_CONNECT_PROGRESS");
  }
  NCCL_RUNTIME_CONNECT = env2num<int64_t>("NCCL_RUNTIME_CONNECT", "1");
  NCCL_RUNTIME_CONNECT_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_RUNTIME_CONNECT_DEFAULT != NCCL_RUNTIME_CONNECT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_RUNTIME_CONNECT");
  }
  NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY =
      env2bool("NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY", "False");
  NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY_DEFAULT !=
      NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SCUBA_ENABLE_INCLUDE_BACKEND_TOPOLOGY");
  }
  NCCL_SCUBA_LOG_FILE_PREFIX = env2str("NCCL_SCUBA_LOG_FILE_PREFIX", "/logs");
  NCCL_SCUBA_LOG_FILE_PREFIX_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "/logs");

  if (NCCL_SCUBA_LOG_FILE_PREFIX_DEFAULT != NCCL_SCUBA_LOG_FILE_PREFIX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SCUBA_LOG_FILE_PREFIX");
  }
  NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED =
      env2bool("NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED", "False");
  NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED_DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED_DEFAULT !=
      NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SCUBA_STACK_TRACE_ON_ERROR_ENABLED");
  }
  if (getenv("NCCL_SENDRECV_ALGO") == nullptr) {
    NCCL_SENDRECV_ALGO = NCCL_SENDRECV_ALGO::orig;
  } else {
    std::string str(getenv("NCCL_SENDRECV_ALGO"));
    if (str == std::string("orig")) {
      NCCL_SENDRECV_ALGO = NCCL_SENDRECV_ALGO::orig;
    } else if (str == std::string("ctran")) {
      NCCL_SENDRECV_ALGO = NCCL_SENDRECV_ALGO::ctran;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_SENDRECV_ALGO", str.c_str());
    }
  }
  NCCL_SENDRECV_ALGO_DEFAULT = NCCL_SENDRECV_ALGO::orig;

  if (NCCL_SENDRECV_ALGO_DEFAULT != NCCL_SENDRECV_ALGO) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SENDRECV_ALGO");
  }
  NCCL_SET_CPU_STACK_SIZE = env2num<int>("NCCL_SET_CPU_STACK_SIZE", "1");
  NCCL_SET_CPU_STACK_SIZE_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_SET_CPU_STACK_SIZE_DEFAULT != NCCL_SET_CPU_STACK_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SET_CPU_STACK_SIZE");
  }
  NCCL_SET_STACK_SIZE = env2num<int64_t>("NCCL_SET_STACK_SIZE", "0");
  NCCL_SET_STACK_SIZE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_SET_STACK_SIZE_DEFAULT != NCCL_SET_STACK_SIZE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SET_STACK_SIZE");
  }
  NCCL_SET_THREAD_NAME = env2num<int64_t>("NCCL_SET_THREAD_NAME", "0");
  NCCL_SET_THREAD_NAME_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_SET_THREAD_NAME_DEFAULT != NCCL_SET_THREAD_NAME) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SET_THREAD_NAME");
  }
  NCCL_SHM_DISABLE = env2num<int64_t>("NCCL_SHM_DISABLE", "0");
  NCCL_SHM_DISABLE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_SHM_DISABLE_DEFAULT != NCCL_SHM_DISABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SHM_DISABLE");
  }
  NCCL_SHM_LOCALITY = env2num<int64_t>("NCCL_SHM_LOCALITY", "2");
  NCCL_SHM_LOCALITY_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "2");

  if (NCCL_SHM_LOCALITY_DEFAULT != NCCL_SHM_LOCALITY) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SHM_LOCALITY");
  }
  NCCL_SHM_MEMCPY_MODE = env2num<int64_t>("NCCL_SHM_MEMCPY_MODE", "1");
  NCCL_SHM_MEMCPY_MODE_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_SHM_MEMCPY_MODE_DEFAULT != NCCL_SHM_MEMCPY_MODE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SHM_MEMCPY_MODE");
  }
  NCCL_SHM_USE_CUDA_MEMCPY = env2num<int64_t>("NCCL_SHM_USE_CUDA_MEMCPY", "0");
  NCCL_SHM_USE_CUDA_MEMCPY_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_SHM_USE_CUDA_MEMCPY_DEFAULT != NCCL_SHM_USE_CUDA_MEMCPY) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SHM_USE_CUDA_MEMCPY");
  }
  NCCL_SINGLE_PROC_MEM_REG_ENABLE =
      env2num<int64_t>("NCCL_SINGLE_PROC_MEM_REG_ENABLE", "0");
  NCCL_SINGLE_PROC_MEM_REG_ENABLE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_SINGLE_PROC_MEM_REG_ENABLE_DEFAULT !=
      NCCL_SINGLE_PROC_MEM_REG_ENABLE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SINGLE_PROC_MEM_REG_ENABLE");
  }
  NCCL_SKIP_TCPFORM_RING = env2bool("NCCL_SKIP_TCPFORM_RING", "False");
  NCCL_SKIP_TCPFORM_RING_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_SKIP_TCPFORM_RING_DEFAULT != NCCL_SKIP_TCPFORM_RING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SKIP_TCPFORM_RING");
  }
  NCCL_SLOW_COLL_LOGGING =
      env2str("NCCL_SLOW_COLL_LOGGING", "pipe:nccl_slow_coll");
  NCCL_SLOW_COLL_LOGGING_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "pipe:nccl_slow_coll");

  if (NCCL_SLOW_COLL_LOGGING_DEFAULT != NCCL_SLOW_COLL_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SLOW_COLL_LOGGING");
  }
  NCCL_SLOW_RANK_ENABLE = env2bool("NCCL_SLOW_RANK_ENABLE", "False");
  NCCL_SLOW_RANK_ENABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_SLOW_RANK_ENABLE_DEFAULT != NCCL_SLOW_RANK_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SLOW_RANK_ENABLE");
  }
  NCCL_SLOW_RANK_LOGGING =
      env2str("NCCL_SLOW_RANK_LOGGING", "scuba:nccl_profiler_slow_rank");
  NCCL_SLOW_RANK_LOGGING_DEFAULT =
      env2str("NCCL_ENV_DO_NOT_SET", "scuba:nccl_profiler_slow_rank");

  if (NCCL_SLOW_RANK_LOGGING_DEFAULT != NCCL_SLOW_RANK_LOGGING) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SLOW_RANK_LOGGING");
  }
  NCCL_SLOW_RANK_LOG_NSAMPLES =
      env2num<int>("NCCL_SLOW_RANK_LOG_NSAMPLES", "10");
  NCCL_SLOW_RANK_LOG_NSAMPLES_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "10");

  if (NCCL_SLOW_RANK_LOG_NSAMPLES_DEFAULT != NCCL_SLOW_RANK_LOG_NSAMPLES) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SLOW_RANK_LOG_NSAMPLES");
  }
  NCCL_SLOW_RANK_PERF_WINDOW_SIZE =
      env2num<int>("NCCL_SLOW_RANK_PERF_WINDOW_SIZE", "5");
  NCCL_SLOW_RANK_PERF_WINDOW_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "5");

  if (NCCL_SLOW_RANK_PERF_WINDOW_SIZE_DEFAULT !=
      NCCL_SLOW_RANK_PERF_WINDOW_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SLOW_RANK_PERF_WINDOW_SIZE");
  }
  NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC =
      env2num<int>("NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC", "70");
  NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "70");

  if (NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC_DEFAULT !=
      NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SLOW_RANK_RDMA_PERF_EFFICIENCY_PERC");
  }
  NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS =
      env2num<int>("NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS", "1000000");
  NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1000000");

  if (NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS_DEFAULT !=
      NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SLOW_RANK_SCUBA_LOGGING_INTERVAL_IN_USECS");
  }
  NCCL_SLOW_RANK_VARIANCE_PERC =
      env2num<int>("NCCL_SLOW_RANK_VARIANCE_PERC", "20");
  NCCL_SLOW_RANK_VARIANCE_PERC_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "20");

  if (NCCL_SLOW_RANK_VARIANCE_PERC_DEFAULT != NCCL_SLOW_RANK_VARIANCE_PERC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SLOW_RANK_VARIANCE_PERC");
  }
  NCCL_SLOW_RANK_WQE_WINDOW_SIZE =
      env2num<int>("NCCL_SLOW_RANK_WQE_WINDOW_SIZE", "1");
  NCCL_SLOW_RANK_WQE_WINDOW_SIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_SLOW_RANK_WQE_WINDOW_SIZE_DEFAULT !=
      NCCL_SLOW_RANK_WQE_WINDOW_SIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SLOW_RANK_WQE_WINDOW_SIZE");
  }
  NCCL_SOCKET_FAMILY = env2str("NCCL_SOCKET_FAMILY", "");
  NCCL_SOCKET_FAMILY_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_SOCKET_FAMILY_DEFAULT != NCCL_SOCKET_FAMILY) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_FAMILY");
  }
  NCCL_SOCKET_IFNAME = env2str("NCCL_SOCKET_IFNAME", "");
  NCCL_SOCKET_IFNAME_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_SOCKET_IFNAME_DEFAULT != NCCL_SOCKET_IFNAME) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_IFNAME");
  }
  NCCL_SOCKET_INLINE = env2num<int>("NCCL_SOCKET_INLINE", "128");
  NCCL_SOCKET_INLINE_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "128");

  if (NCCL_SOCKET_INLINE_DEFAULT != NCCL_SOCKET_INLINE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_INLINE");
  }
  NCCL_SOCKET_IPADDR_PREFIX = env2str("NCCL_SOCKET_IPADDR_PREFIX", "");
  NCCL_SOCKET_IPADDR_PREFIX_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_SOCKET_IPADDR_PREFIX_DEFAULT != NCCL_SOCKET_IPADDR_PREFIX) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SOCKET_IPADDR_PREFIX");
  }
  NCCL_SOCKET_MIN_TASKSIZE = env2num<int>("NCCL_SOCKET_MIN_TASKSIZE", "65536");
  NCCL_SOCKET_MIN_TASKSIZE_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "65536");

  if (NCCL_SOCKET_MIN_TASKSIZE_DEFAULT != NCCL_SOCKET_MIN_TASKSIZE) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SOCKET_MIN_TASKSIZE");
  }
  NCCL_SOCKET_NTHREADS = env2num<int64_t>("NCCL_SOCKET_NTHREADS", "-2");
  NCCL_SOCKET_NTHREADS_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "-2");

  if (NCCL_SOCKET_NTHREADS_DEFAULT != NCCL_SOCKET_NTHREADS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_NTHREADS");
  }
  NCCL_SOCKET_RCVBUF = env2num<int>("NCCL_SOCKET_RCVBUF", "-1");
  NCCL_SOCKET_RCVBUF_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_SOCKET_RCVBUF_DEFAULT != NCCL_SOCKET_RCVBUF) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_RCVBUF");
  }
  NCCL_SOCKET_RETRY_CNT = env2num<int64_t>("NCCL_SOCKET_RETRY_CNT", "34");
  NCCL_SOCKET_RETRY_CNT_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "34");

  if (NCCL_SOCKET_RETRY_CNT_DEFAULT != NCCL_SOCKET_RETRY_CNT) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_RETRY_CNT");
  }
  NCCL_SOCKET_RETRY_SLEEP_MSEC =
      env2num<int64_t>("NCCL_SOCKET_RETRY_SLEEP_MSEC", "100");
  NCCL_SOCKET_RETRY_SLEEP_MSEC_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "100");

  if (NCCL_SOCKET_RETRY_SLEEP_MSEC_DEFAULT != NCCL_SOCKET_RETRY_SLEEP_MSEC) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_SOCKET_RETRY_SLEEP_MSEC");
  }
  NCCL_SOCKET_SNDBUF = env2num<int>("NCCL_SOCKET_SNDBUF", "-1");
  NCCL_SOCKET_SNDBUF_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_SOCKET_SNDBUF_DEFAULT != NCCL_SOCKET_SNDBUF) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SOCKET_SNDBUF");
  }
  NCCL_SOCKET_TOS_CONFIG = env2num<int>("NCCL_SOCKET_TOS_CONFIG", "-1");
  NCCL_SOCKET_TOS_CONFIG_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_SOCKET_TOS_CONFIG_DEFAULT != NCCL_SOCKET_TOS_CONFIG) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_SOCKET_TOS_CONFIG");
  }
  NCCL_SYM_CTAS = env2num<int>("NCCL_SYM_CTAS", "0");
  NCCL_SYM_CTAS_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_SYM_CTAS_DEFAULT != NCCL_SYM_CTAS) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SYM_CTAS");
  }
  NCCL_SYM_KERNEL = env2str("NCCL_SYM_KERNEL", "");
  NCCL_SYM_KERNEL_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_SYM_KERNEL_DEFAULT != NCCL_SYM_KERNEL) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_SYM_KERNEL");
  }
  NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL =
      env2num<int>("NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL", "500");
  NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "500");

  if (NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL_DEFAULT !=
      NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TCPSTORE_BACKOFF_INITIAL_INTERVAL");
  }
  NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL =
      env2num<int>("NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL", "3000");
  NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "3000");

  if (NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL_DEFAULT !=
      NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TCPSTORE_BACKOFF_MAX_INTERVAL");
  }
  NCCL_TCPSTORE_BACKOFF_MULTIPLIER =
      env2num<double>("NCCL_TCPSTORE_BACKOFF_MULTIPLIER", "1.5");
  NCCL_TCPSTORE_BACKOFF_MULTIPLIER_DEFAULT =
      env2num<double>("NCCL_ENV_DO_NOT_SET", "1.5");

  if (NCCL_TCPSTORE_BACKOFF_MULTIPLIER_DEFAULT !=
      NCCL_TCPSTORE_BACKOFF_MULTIPLIER) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TCPSTORE_BACKOFF_MULTIPLIER");
  }
  NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR =
      env2num<double>("NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR", "0.1");
  NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR_DEFAULT =
      env2num<double>("NCCL_ENV_DO_NOT_SET", "0.1");

  if (NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR_DEFAULT !=
      NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TCPSTORE_BACKOFF_RANDOMIZATION_FACTOR");
  }
  NCCL_TCPSTORE_CONNECT_TIMEOUT =
      env2num<int>("NCCL_TCPSTORE_CONNECT_TIMEOUT", "30");
  NCCL_TCPSTORE_CONNECT_TIMEOUT_DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "30");

  if (NCCL_TCPSTORE_CONNECT_TIMEOUT_DEFAULT != NCCL_TCPSTORE_CONNECT_TIMEOUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TCPSTORE_CONNECT_TIMEOUT");
  }
  NCCL_TCPSTORE_IO_TIMEOUT = env2num<int>("NCCL_TCPSTORE_IO_TIMEOUT", "300");
  NCCL_TCPSTORE_IO_TIMEOUT_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "300");

  if (NCCL_TCPSTORE_IO_TIMEOUT_DEFAULT != NCCL_TCPSTORE_IO_TIMEOUT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_TCPSTORE_IO_TIMEOUT");
  }
  NCCL_THREAD_THRESHOLDS = env2str("NCCL_THREAD_THRESHOLDS", "");
  NCCL_THREAD_THRESHOLDS_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_THREAD_THRESHOLDS_DEFAULT != NCCL_THREAD_THRESHOLDS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_THREAD_THRESHOLDS");
  }
  NCCL_TOPO_DUMP_FILE = env2str("NCCL_TOPO_DUMP_FILE", "");
  NCCL_TOPO_DUMP_FILE_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_TOPO_DUMP_FILE_DEFAULT != NCCL_TOPO_DUMP_FILE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_TOPO_DUMP_FILE");
  }
  NCCL_TOPO_DUMP_FILE_RANK = env2num<int64_t>("NCCL_TOPO_DUMP_FILE_RANK", "0");
  NCCL_TOPO_DUMP_FILE_RANK_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_TOPO_DUMP_FILE_RANK_DEFAULT != NCCL_TOPO_DUMP_FILE_RANK) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_TOPO_DUMP_FILE_RANK");
  }
  NCCL_TOPO_FILE = env2str(
      "NCCL_TOPO_FILE", "/var/run/nvidia-topologyd/virtualTopology.xml");
  NCCL_TOPO_FILE_DEFAULT = env2str(
      "NCCL_ENV_DO_NOT_SET", "/var/run/nvidia-topologyd/virtualTopology.xml");

  if (NCCL_TOPO_FILE_DEFAULT != NCCL_TOPO_FILE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_TOPO_FILE");
  }
  NCCL_TOPO_FILE_PATH = env2str("NCCL_TOPO_FILE_PATH", "/etc/fbwhoami");
  NCCL_TOPO_FILE_PATH_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "/etc/fbwhoami");

  if (NCCL_TOPO_FILE_PATH_DEFAULT != NCCL_TOPO_FILE_PATH) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_TOPO_FILE_PATH");
  }
  NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT =
      env2num<int64_t>("NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT", "0");
  NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT_DEFAULT !=
      NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TRANSPORT_PREP_TRAINER_ITERATION_LIMIT");
  }
  NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT =
      env2num<uint64_t>("NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT", "0");
  NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT_DEFAULT =
      env2num<uint64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT_DEFAULT !=
      NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_TRANSPORT_RECONNECT_OPCOUNT_LIMIT");
  }
  NCCL_TUNER_PLUGIN = env2str("NCCL_TUNER_PLUGIN", "");
  NCCL_TUNER_PLUGIN_DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (NCCL_TUNER_PLUGIN_DEFAULT != NCCL_TUNER_PLUGIN) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_TUNER_PLUGIN");
  }
  NCCL_UID_STAGGER_RATE = env2num<int64_t>("NCCL_UID_STAGGER_RATE", "7000");
  NCCL_UID_STAGGER_RATE_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "7000");

  if (NCCL_UID_STAGGER_RATE_DEFAULT != NCCL_UID_STAGGER_RATE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_UID_STAGGER_RATE");
  }
  NCCL_UID_STAGGER_THRESHOLD =
      env2num<int64_t>("NCCL_UID_STAGGER_THRESHOLD", "256");
  NCCL_UID_STAGGER_THRESHOLD_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "256");

  if (NCCL_UID_STAGGER_THRESHOLD_DEFAULT != NCCL_UID_STAGGER_THRESHOLD) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_UID_STAGGER_THRESHOLD");
  }
  NCCL_UNPACK_DOUBLE_NCHANNELS =
      env2num<int64_t>("NCCL_UNPACK_DOUBLE_NCHANNELS", "1");
  NCCL_UNPACK_DOUBLE_NCHANNELS_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1");

  if (NCCL_UNPACK_DOUBLE_NCHANNELS_DEFAULT != NCCL_UNPACK_DOUBLE_NCHANNELS) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "NCCL_UNPACK_DOUBLE_NCHANNELS");
  }
  NCCL_USE_MEM_CACHE = env2bool("NCCL_USE_MEM_CACHE", "False");
  NCCL_USE_MEM_CACHE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_USE_MEM_CACHE_DEFAULT != NCCL_USE_MEM_CACHE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_USE_MEM_CACHE");
  }
  NCCL_USE_SHARED_BUFFER_POOL = env2bool("NCCL_USE_SHARED_BUFFER_POOL", "True");
  NCCL_USE_SHARED_BUFFER_POOL_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_USE_SHARED_BUFFER_POOL_DEFAULT != NCCL_USE_SHARED_BUFFER_POOL) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_USE_SHARED_BUFFER_POOL");
  }
  NCCL_USE_TRANSPORT_EXT = env2bool("NCCL_USE_TRANSPORT_EXT", "False");
  NCCL_USE_TRANSPORT_EXT_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (NCCL_USE_TRANSPORT_EXT_DEFAULT != NCCL_USE_TRANSPORT_EXT) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_USE_TRANSPORT_EXT");
  }
  if (getenv("NCCL_USE_TRANSPORT_PROXY") == nullptr) {
    NCCL_USE_TRANSPORT_PROXY = NCCL_USE_TRANSPORT_PROXY::unset;
  } else {
    std::string str(getenv("NCCL_USE_TRANSPORT_PROXY"));
    if (str == std::string("unset")) {
      NCCL_USE_TRANSPORT_PROXY = NCCL_USE_TRANSPORT_PROXY::unset;
    } else if (str == std::string("none")) {
      NCCL_USE_TRANSPORT_PROXY = NCCL_USE_TRANSPORT_PROXY::none;
    } else if (str == std::string("comm")) {
      NCCL_USE_TRANSPORT_PROXY = NCCL_USE_TRANSPORT_PROXY::comm;
    } else if (str == std::string("shared")) {
      NCCL_USE_TRANSPORT_PROXY = NCCL_USE_TRANSPORT_PROXY::shared;
    } else {
      CVAR_WARN_UNKNOWN_VALUE("NCCL_USE_TRANSPORT_PROXY", str.c_str());
    }
  }
  NCCL_USE_TRANSPORT_PROXY_DEFAULT = NCCL_USE_TRANSPORT_PROXY::unset;

  if (NCCL_USE_TRANSPORT_PROXY_DEFAULT != NCCL_USE_TRANSPORT_PROXY) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_USE_TRANSPORT_PROXY");
  }
  NCCL_WARN_ENABLE_DEBUG_INFO =
      env2num<int64_t>("NCCL_WARN_ENABLE_DEBUG_INFO", "0");
  NCCL_WARN_ENABLE_DEBUG_INFO_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (NCCL_WARN_ENABLE_DEBUG_INFO_DEFAULT != NCCL_WARN_ENABLE_DEBUG_INFO) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "NCCL_WARN_ENABLE_DEBUG_INFO");
  }
  NCCL_WIN_ENABLE = env2bool("NCCL_WIN_ENABLE", "True");
  NCCL_WIN_ENABLE_DEFAULT = env2bool("NCCL_ENV_DO_NOT_SET", "True");

  if (NCCL_WIN_ENABLE_DEFAULT != NCCL_WIN_ENABLE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_WIN_ENABLE");
  }
  NCCL_WIN_STRIDE = env2num<int>("NCCL_WIN_STRIDE", "-1");
  NCCL_WIN_STRIDE_DEFAULT = env2num<int>("NCCL_ENV_DO_NOT_SET", "-1");

  if (NCCL_WIN_STRIDE_DEFAULT != NCCL_WIN_STRIDE) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_WIN_STRIDE");
  }
  NCCL_WORK_ARGS_BYTES = env2num<int64_t>("NCCL_WORK_ARGS_BYTES", "MAX");
  NCCL_WORK_ARGS_BYTES_DEFAULT = env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "MAX");

  if (NCCL_WORK_ARGS_BYTES_DEFAULT != NCCL_WORK_ARGS_BYTES) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_WORK_ARGS_BYTES");
  }
  NCCL_WORK_FIFO_BYTES = env2num<int64_t>("NCCL_WORK_FIFO_BYTES", "1048576");
  NCCL_WORK_FIFO_BYTES_DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "1048576");

  if (NCCL_WORK_FIFO_BYTES_DEFAULT != NCCL_WORK_FIFO_BYTES) {
    CVAR_INFO("NCCL Config - CVAR {} has an override", "NCCL_WORK_FIFO_BYTES");
  }
  __NCCL_UNIT_TEST_STRING_CVAR__ =
      env2str("__NCCL_UNIT_TEST_STRING_CVAR__", "");
  __NCCL_UNIT_TEST_STRING_CVAR___DEFAULT = env2str("NCCL_ENV_DO_NOT_SET", "");

  if (__NCCL_UNIT_TEST_STRING_CVAR___DEFAULT !=
      __NCCL_UNIT_TEST_STRING_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "__NCCL_UNIT_TEST_STRING_CVAR__");
  }
  __NCCL_UNIT_TEST_BOOL_CVAR__ =
      env2bool("__NCCL_UNIT_TEST_BOOL_CVAR__", "False");
  __NCCL_UNIT_TEST_BOOL_CVAR___DEFAULT =
      env2bool("NCCL_ENV_DO_NOT_SET", "False");

  if (__NCCL_UNIT_TEST_BOOL_CVAR___DEFAULT != __NCCL_UNIT_TEST_BOOL_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "__NCCL_UNIT_TEST_BOOL_CVAR__");
  }
  __NCCL_UNIT_TEST_INT_CVAR__ =
      env2num<int>("__NCCL_UNIT_TEST_INT_CVAR__", "0");
  __NCCL_UNIT_TEST_INT_CVAR___DEFAULT =
      env2num<int>("NCCL_ENV_DO_NOT_SET", "0");

  if (__NCCL_UNIT_TEST_INT_CVAR___DEFAULT != __NCCL_UNIT_TEST_INT_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override", "__NCCL_UNIT_TEST_INT_CVAR__");
  }
  __NCCL_UNIT_TEST_INT64_T_CVAR__ =
      env2num<int64_t>("__NCCL_UNIT_TEST_INT64_T_CVAR__", "0");
  __NCCL_UNIT_TEST_INT64_T_CVAR___DEFAULT =
      env2num<int64_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (__NCCL_UNIT_TEST_INT64_T_CVAR___DEFAULT !=
      __NCCL_UNIT_TEST_INT64_T_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "__NCCL_UNIT_TEST_INT64_T_CVAR__");
  }
  __NCCL_UNIT_TEST_UINT16_T_CVAR__ =
      env2num<uint16_t>("__NCCL_UNIT_TEST_UINT16_T_CVAR__", "0");
  __NCCL_UNIT_TEST_UINT16_T_CVAR___DEFAULT =
      env2num<uint16_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (__NCCL_UNIT_TEST_UINT16_T_CVAR___DEFAULT !=
      __NCCL_UNIT_TEST_UINT16_T_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "__NCCL_UNIT_TEST_UINT16_T_CVAR__");
  }
  __NCCL_UNIT_TEST_SIZE_T_CVAR__ =
      env2num<size_t>("__NCCL_UNIT_TEST_SIZE_T_CVAR__", "0");
  __NCCL_UNIT_TEST_SIZE_T_CVAR___DEFAULT =
      env2num<size_t>("NCCL_ENV_DO_NOT_SET", "0");

  if (__NCCL_UNIT_TEST_SIZE_T_CVAR___DEFAULT !=
      __NCCL_UNIT_TEST_SIZE_T_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "__NCCL_UNIT_TEST_SIZE_T_CVAR__");
  }
  __NCCL_UNIT_TEST_DOUBLE_CVAR__ =
      env2num<double>("__NCCL_UNIT_TEST_DOUBLE_CVAR__", "0");
  __NCCL_UNIT_TEST_DOUBLE_CVAR___DEFAULT =
      env2num<double>("NCCL_ENV_DO_NOT_SET", "0");

  if (__NCCL_UNIT_TEST_DOUBLE_CVAR___DEFAULT !=
      __NCCL_UNIT_TEST_DOUBLE_CVAR__) {
    CVAR_INFO(
        "NCCL Config - CVAR {} has an override",
        "__NCCL_UNIT_TEST_DOUBLE_CVAR__");
  }
  ncclx::validateCvarEnv();
}
}; // namespace ncclx

// Automatically generated by ./comms/utils/cvars/extractcvars.py --- END
